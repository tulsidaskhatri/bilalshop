{"version":3,"sources":["components/LoginComponent/LoginComponent.tsx","components/NavigationItem/NavigationItem.tsx","components/NavigationBar/NavigationBar.tsx","layouts/NavigationBarLayout/NavigationBarLayout.tsx","components/Button/Button.tsx","layouts/ProductsTable/ProductsTable.tsx","api.ts","views/Products/useProductsPage.ts","layouts/ProductModal/useProductModal.ts","layouts/ProductModal/ProductModal.tsx","components/FloatingAlert/FloatingAlert.tsx","views/Products/ProductsPage.tsx","layouts/CustomersTable/CustomersTable.tsx","views/Customers/useCustomersPage.ts","layouts/CustomerModal/useCustomerModal.ts","layouts/CustomerModal/CustomerModal.tsx","views/Customers/CustomersPage.tsx","views/Cities/useCitiesPage.ts","views/Cities/CitiesPage.tsx","layouts/VendorsTable/VendorsTable.tsx","views/Vendors/useVendorsPage.ts","layouts/VendorModal/useVendorModal.ts","layouts/VendorModal/VendorModal.tsx","views/Vendors/VendorsPage.tsx","layouts/AccountsTable/AccountsTable.tsx","views/Accounts/useAccountsPage.ts","layouts/AccountModal/useAccountModal.ts","layouts/AccountModal/AccountModal.tsx","views/Accounts/AccountsPage.tsx","layouts/PurchasesTable/PurchasesTable.tsx","views/Purchases/usePurchasesPage.ts","layouts/PurchaseModal/usePurchaseModal.ts","layouts/PurchaseModal/PurchaseModal.tsx","views/Purchases/PurchasesPage.tsx","layouts/InvoicesTable/InvoicesTable.tsx","utils.ts","views/Invoices/useInvoicesPage.ts","layouts/InvoiceModal/useInvoiceModal.ts","layouts/InvoiceModal/InvoiceModal.tsx","views/Invoices/InvoicesPage.tsx","layouts/VendorPaymentsTable/VendorPaymentsTable.tsx","views/VendorPayments/useVendorPaymentsPage.ts","layouts/VendorPaymentModal/useVendorPaymentModal.ts","layouts/VendorPaymentModal/VendorPaymentModal.tsx","views/VendorPayments/VendorPaymentsPage.tsx","layouts/CustomerPaymentsTable/CustomerPaymentsTable.tsx","views/CustomerPaymentsPage/useCustomerPaymentsPage.ts","layouts/CustomerPaymentModal/useCustomerPaymentModal.ts","layouts/CustomerPaymentModal/CustomerPaymentModal.tsx","views/CustomerPaymentsPage/CustomerPaymentsPage.tsx","Routes/Routes.tsx","components/LogoutButton/LogoutButton.tsx","layouts/Welcome/useWelcome.ts","layouts/Welcome/Welcome.tsx","App.tsx","serviceWorker.ts","theme.ts","index.tsx"],"names":["LoginComponent","useState","email","setEmail","password","setPassword","error","setError","Grid","container","justify","alignItems","direction","style","height","backgroundColor","item","md","sm","xs","Paper","padding","margin","spacing","Typography","variant","color","TextField","fullWidth","label","type","onChange","event","target","value","onClick","firebase","auth","signInWithEmailAndPassword","then","catch","NavigationItem","props","history","useHistory","ListItem","button","push","link","selected","divider","ListItemText","primary","text","NavigationBar","List","items","map","index","key","NavigationBarLayout","withRouter","navigationItems","products","location","pathname","purchases","vendors","customers","accounts","vendorPayments","customerPayments","invoices","cities","Button","loading","disabled","others","startIcon","CircularProgress","size","children","columns","useStyles","makeStyles","head","ProductsTable","classes","TableContainer","Table","TableHead","root","TableRow","column","TableCell","TableBody","rows","row","id","console","log","name","rate","quantity","details","IconButton","onRowDelete","deleting","onLoadMore","allLoaded","api","product","get","successCallback","errorCallback","startAfter","query","firestore","collection","limit","orderBy","result","add","data","success","newProductDoc","delete","productId","doc","customer","newCustomerDoc","customerId","purchase","newPurchaseDoc","purchaseId","invoice","newInvoiceDoc","invoiceId","vendor","city","newCityDoc","cityId","account","accountId","vendorPayment","newVendorPaymentDoc","vendorPaymentId","customerPayment","newCustomerPaymentDoc","customerPaymentId","counts","getSnapshot","onSnapshot","snapshot","productDocs","useProductsPage","modalOpen","setModalOpen","showSuccessMessage","setShowSuccessMessage","setRows","setDeleting","setLoading","useEffect","docs","forEach","openProductModal","closeProductModal","created","hideSuccessMessage","deleteProduct","splice","remaining","filter","i","addProduct","newProduct","sort","a","b","createdAt","loadMoreProducts","prev","concat","length","useProductModal","onAdd","close","setName","setDetails","handleClick","now","Date","updatedAt","onNameChange","onDetailsChange","ProductModal","open","Dialog","DialogTitle","multiline","FloatingAlert","Snackbar","autoHideDuration","onClose","reason","anchorOrigin","vertical","horizontal","severity","message","ProductsPage","FormControl","placeholder","numberOfProducts","aria-labelledby","CustomersTable","mobile","debt","customerDocs","useCustomersPage","setCities","loadingCities","setLoadingCities","openCustomerModal","closeCustomerModal","deleteCustomer","addCustomer","newCustomer","loadMoreCustomers","addCity","newCity","useCustomerModal","setMobile","setCity","onMobileChange","CustomerModal","Autocomplete","options","getOptionLabel","option","renderInput","params","CustomersPage","numberOfCustomers","cityDocs","useCitiesPage","adding","setAdding","deleteCity","oldRows","CitiesPage","VendorsTable","vendorDocs","useVendorsPage","openVendorModal","closeVendorModal","deleteVendor","addVendor","newVendor","loadMoreVendors","useVendorModal","VendorModal","VendorsPage","numberOfVendors","AccountsTable","amount","accountDocs","useAccountsPage","openAccountModal","closeAccountModal","deleteAccount","addAccount","newAccount","loadMoreAccounts","useAccountModal","setType","setAmount","onTypeChange","onAmountChange","AccountModal","parseInt","AccountsPage","numberOfAccounts","PurchasesTable","purchaseDocs","usePurchasesPage","setProducts","setVendors","loadingProducts","setLoadingProducts","loadingVendors","setLoadingVendors","openPurchaseModal","closePurchaseModal","deletePurchase","addPurchase","newPurchase","loadMorePurchases","usePurchaseModal","setProduct","setVendor","setQuantity","setRate","onQuantityChange","onRateChange","PurchaseModal","PurchasesPage","numberOfPurchases","InvoicesTable","sales","total","sale","getTotalSalesAmount","invoiceDocs","useInvoicesPage","setCustomers","loadingCustomers","setLoadingCustomers","openInvoiceModal","closeInvoiceModal","deleteInvoice","addInvoice","newInvoice","loadMoreInvoices","useInvoiceModal","setCustomer","setSales","addSale","newSales","InvoiceModal","InvoicesPage","numberOfInvoices","VendorPaymentsTable","vendorPaymentDocs","useVendorPaymentsPage","setAccounts","loadingAccounts","setLoadingAccounts","openVendorPaymentModal","closeVendorPaymentModal","deleteVendorPayment","addVendorPayment","newVendorPayment","loadMoreVendorPayments","useVendorPaymentModal","setAccount","VendorPaymentModal","VendorPaymentsPage","numberOfVendorPayments","CustomerPaymentsTable","customerPaymentDocs","useCustomerPaymentsPage","openCustomerPaymentModal","closeCustomerPaymentModal","deleteCustomerPayment","addCustomerPayment","newCustomerPayment","loadMoreCustomerPayments","useCustomerPaymentModal","CustomerPaymentModal","CustomerPaymentsPage","numberOfCustomerPayments","Routes","routes","path","component","numberOfCities","route","exact","LogoutButton","signOut","useWelcome","setNumberOfProducts","setNumberOfCities","setNumberOfCustomers","setNumberOfVendors","setNumberOfAccounts","setNumberOfPurchases","setNumberOfInvoices","setNumberOfVendorPayments","setNumberOfCustomerPayments","Welcome","basename","align","App","setloading","signedIn","setSignedIn","onAuthStateChanged","user","Boolean","window","hostname","match","createMuiTheme","MuiTextField","MuiButton","initializeApp","apiKey","projectId","ReactDOM","render","StrictMode","ThemeProvider","theme","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.062ac18f.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport {\n    FormControl,\n    Button,\n    TextField,\n    makeStyles,\n    Grid,\n    Typography,\n    Paper,\n} from '@material-ui/core';\nimport firebase from 'firebase';\n\nconst LoginComponent = () => {\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const [error, setError] = useState('');\n\n    const handleClick = () => {\n        setError('');\n        firebase\n            .auth()\n            .signInWithEmailAndPassword(email, password)\n            .then(() => {})\n            .catch(function (error) {\n                setError('Invalid User');\n            });\n    };\n\n    return (\n        <Grid\n            container\n            justify=\"center\"\n            alignItems=\"center\"\n            direction=\"row\"\n            style={{height: '100vh', backgroundColor: 'lightBlue'}}\n        >\n            <Grid item md={4} sm={8} xs={12}>\n                <Paper style={{padding: 32, margin: 16}}>\n                    <Grid container spacing={2}>\n                        <Grid item xs={12}>\n                            <Typography variant=\"h6\" color=\"error\">\n                                {error}\n                            </Typography>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                variant=\"outlined\"\n                                label=\"Email\"\n                                type=\"email\"\n                                onChange={(event) => {\n                                    setEmail(event.target.value);\n                                }}\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                variant=\"outlined\"\n                                type=\"password\"\n                                label=\"Password\"\n                                onChange={(event) => {\n                                    setPassword(event.target.value);\n                                }}\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <Button fullWidth variant=\"contained\" onClick={handleClick}>\n                                Login\n                            </Button>\n                        </Grid>\n                    </Grid>\n                </Paper>\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default LoginComponent;\n","import React from 'react';\nimport { Link, ListItem, ListItemText } from '@material-ui/core';\nimport { useHistory } from 'react-router-dom';\n\nexport interface NavigationItemProps {\n    text: string;\n    link: string;\n    selected: boolean;\n}\nconst NavigationItem = (props: NavigationItemProps) => {\n    const history = useHistory();\n    return (\n    <ListItem button onClick={()=>{history.push(props.link)}} selected={props.selected} divider>\n        <ListItemText primary={props.text}/>\n   </ListItem>\n    );\n}\n    \n\n\nexport default NavigationItem;","import React from 'react';\nimport NavigationItem, {NavigationItemProps} from '../NavigationItem/NavigationItem';\nimport { List } from '@material-ui/core';\n\ninterface NavigationBarProps {\n    items: NavigationItemProps[];\n}\n\nconst NavigationBar = (props: NavigationBarProps) => \n    <List>\n        {props.items.map((item:NavigationItemProps, index:number)=> (\n            <NavigationItem key={index} {...item}/>\n        ))}\n    </List>\n    \n\n\nexport default NavigationBar;","import React from 'react';\nimport TestComponent from '../../components/TestComponent/TestComponent';\nimport LoginComponent from '../../components/LoginComponent/LoginComponent';\nimport {Grid} from '@material-ui/core';\nimport NavigationBar from '../../components/NavigationBar/NavigationBar';\nimport {NavigationItemProps} from '../../components/NavigationItem/NavigationItem';\nimport {withRouter, RouteComponentProps} from 'react-router-dom';\n\ninterface NavigationBarLayoutType extends RouteComponentProps {\n    products: number;\n    cities: number;\n    customers: number;\n    vendors: number;\n    accounts: number;\n    purchases: number;\n    invoices: number;\n    vendorPayments: number;\n    customerPayments: number;\n}\n\nconst NavigationBarLayout = withRouter(({history, ...props}: NavigationBarLayoutType) => {\n    const navigationItems: NavigationItemProps[] = [\n        {\n            text: `Products (${props.products})`,\n            link: '/products',\n            selected:\n                history.location.pathname === '/products' || history.location.pathname === '/',\n        },\n        {\n            text: `Purchases (${props.purchases})`,\n            link: '/purchases',\n            selected: history.location.pathname === '/purchases',\n        },\n        {\n            text: `Vendors (${props.vendors})`,\n            link: '/vendors',\n            selected: history.location.pathname === '/vendors',\n        },\n        {\n            text: `Customers (${props.customers})`,\n            link: '/customers',\n            selected: history.location.pathname === '/customers',\n        },\n        {\n            text: 'Employees',\n            link: '/employees',\n            selected: history.location.pathname === '/employees',\n        },\n        {\n            text: `Accounts (${props.accounts})`,\n            link: '/accounts',\n            selected: history.location.pathname === '/accounts',\n        },\n        {\n            text: 'Loans',\n            link: '/loans',\n            selected: history.location.pathname === '/loans',\n        },\n        {\n            text: 'Expenses',\n            link: '/expenses',\n            selected: history.location.pathname === '/expenses',\n        },\n        {\n            text: `Vendor Payments (${props.vendorPayments})`,\n            link: '/payments/vendors',\n            selected: history.location.pathname === '/payments/vendors',\n        },\n        {\n            text: `Customer Payments (${props.customerPayments})`,\n            link: '/payments/customers',\n            selected: history.location.pathname === '/payments/customer',\n        },\n        {\n            text: `Invoices (${props.invoices})`,\n            link: '/invoices',\n            selected: history.location.pathname === '/invoices',\n        },\n        {\n            text: `Cities (${props.cities})`,\n            link: '/cities',\n            selected: history.location.pathname === '/cities',\n        },\n    ];\n    return <NavigationBar items={navigationItems} />;\n});\n\nexport default NavigationBarLayout;\n","import React from 'react';\nimport {\n    Button as MuiButton,\n    ButtonProps as MuiButtonProps,\n    CircularProgress,\n} from '@material-ui/core';\n\ninterface ButtonProps extends MuiButtonProps {\n    loading?: boolean;\n}\nconst Button = (props: ButtonProps) => {\n    const {loading, disabled, ...others} = {...props};\n    return (\n        <MuiButton\n            {...others}\n            disabled={loading || disabled}\n            startIcon={loading ? <CircularProgress style={{color: 'white'}} size={'1rem'} /> : ''}\n        >\n            {props.children}\n        </MuiButton>\n    );\n};\n\nexport default Button;\n","import React, {useState, useEffect} from 'react';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport {\n    Paper,\n    TableContainer,\n    Table,\n    TableHead,\n    TableRow,\n    TableCell,\n    TableSortLabel,\n    TableBody,\n    TablePagination,\n    makeStyles,\n    IconButton,\n} from '@material-ui/core';\nimport {firestore} from 'firebase';\nimport api from '../../api';\nimport ProductType from '../../model/product';\nimport Button from '../../components/Button/Button';\n\nconst columns: string[] = ['Name', 'Average Rate', 'Quantity', 'Total', 'Details', 'Actions'];\n\nconst useStyles = makeStyles({\n    head: {\n        backgroundColor: '#ECEDEF',\n    },\n});\n\ninterface ProductsTableType {\n    rows: ProductType[];\n    onRowDelete: Function;\n    deleting: boolean;\n    loading?: boolean;\n    allLoaded: boolean;\n    onLoadMore: () => void;\n}\n\nconst ProductsTable = (props: ProductsTableType) => {\n    const classes = useStyles();\n    return (\n        <>\n            <Paper>\n                <TableContainer>\n                    <Table>\n                        <TableHead classes={{root: classes.head}}>\n                            <TableRow>\n                                {columns.map((column: string, index: number) => (\n                                    <TableCell key={index}>{column}</TableCell>\n                                ))}\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {props.rows.map((row, index) => (\n                                <TableRow\n                                    key={row.id}\n                                    onClick={() => {\n                                        console.log('clicked', index);\n                                    }}\n                                >\n                                    <TableCell>{row.name}</TableCell>\n                                    <TableCell>{row.rate}</TableCell>\n                                    <TableCell>{row.quantity}</TableCell>\n                                    <TableCell>\n                                        {(row.rate ? row.rate : 0) *\n                                            (row.quantity ? row.quantity : 0)}\n                                    </TableCell>\n                                    <TableCell>{row.details}</TableCell>\n                                    <TableCell>\n                                        <IconButton\n                                            onClick={() => {\n                                                props.onRowDelete(index);\n                                            }}\n                                            disabled={props.deleting}\n                                        >\n                                            <DeleteIcon />\n                                        </IconButton>\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                    <Button\n                        onClick={props.onLoadMore}\n                        disabled={props.allLoaded}\n                        loading={props.loading}\n                    >\n                        Load More\n                    </Button>\n                </TableContainer>\n            </Paper>\n        </>\n    );\n};\n\nexport default ProductsTable;\n","import ProductType from './model/product';\nimport CountsType from './model/counts';\nimport {firestore} from 'firebase';\nimport {Dispatch, SetStateAction} from 'react';\nimport CustomerType from './model/customer';\nimport CityType from './model/city';\nimport AccountType from './model/account';\nimport PurchaseType from './model/purchase';\nimport VendorType from './model/vendor';\nimport InvoiceType from './model/invoice';\nimport VendorPaymentType from './model/vendorPayment';\nimport CustomerPaymentType from './model/customerPayment';\n\nconst api = {\n    product: {\n        get: (successCallback?: Function, errorCallback?: Function, startAfter?: any) => {\n            let query = firestore().collection('products').limit(5).orderBy('createdAt', 'desc');\n            if (startAfter) {\n                query = query.startAfter(startAfter);\n            }\n            query\n                .get()\n                .then((result) => {\n                    successCallback && successCallback(result);\n                })\n                .catch((error) => {\n                    errorCallback && errorCallback(error);\n                });\n        },\n        add: (data: ProductType, success: (id: string) => void, error: () => void) => {\n            firestore()\n                .collection('products')\n                .add(data)\n                .then((newProductDoc) => {\n                    success(newProductDoc.id);\n                })\n                .catch(() => {\n                    error();\n                });\n        },\n        delete: (productId?: string, success?: () => void, error?: () => void) => {\n            firestore()\n                .collection('products')\n                .doc(productId)\n                .delete()\n                .then(() => {\n                    success && success();\n                })\n                .catch((error) => {\n                    error && error();\n                });\n        },\n    },\n    customer: {\n        get: (successCallback?: Function, errorCallback?: Function, startAfter?: any) => {\n            let query = firestore().collection('customers').limit(5).orderBy('createdAt', 'desc');\n            if (startAfter) {\n                query = query.startAfter(startAfter);\n            }\n            query\n                .get()\n                .then((result) => {\n                    successCallback && successCallback(result);\n                })\n                .catch((error) => {\n                    errorCallback && errorCallback(error);\n                });\n        },\n        add: (data: CustomerType, success: (id: string) => void, error: () => void) => {\n            firestore()\n                .collection('customers')\n                .add(data)\n                .then((newCustomerDoc) => {\n                    success(newCustomerDoc.id);\n                })\n                .catch(() => {\n                    error();\n                });\n        },\n        delete: (customerId?: string, success?: () => void, error?: () => void) => {\n            firestore()\n                .collection('customers')\n                .doc(customerId)\n                .delete()\n                .then(() => {\n                    success && success();\n                })\n                .catch((error) => {\n                    error && error();\n                });\n        },\n    },\n    purchase: {\n        get: (successCallback?: Function, errorCallback?: Function, startAfter?: any) => {\n            let query = firestore().collection('purchases').limit(5).orderBy('createdAt', 'desc');\n            if (startAfter) {\n                query = query.startAfter(startAfter);\n            }\n            query\n                .get()\n                .then((result) => {\n                    successCallback && successCallback(result);\n                })\n                .catch((error) => {\n                    errorCallback && errorCallback(error);\n                });\n        },\n        add: (data: PurchaseType, success: (id: string) => void, error: () => void) => {\n            firestore()\n                .collection('purchases')\n                .add(data)\n                .then((newPurchaseDoc) => {\n                    success(newPurchaseDoc.id);\n                })\n                .catch(() => {\n                    error();\n                });\n        },\n        delete: (purchaseId?: string, success?: () => void, error?: () => void) => {\n            firestore()\n                .collection('purchases')\n                .doc(purchaseId)\n                .delete()\n                .then(() => {\n                    success && success();\n                })\n                .catch(() => {\n                    error && error();\n                });\n        },\n    },\n    invoice: {\n        get: (successCallback?: Function, errorCallback?: Function, startAfter?: any) => {\n            let query = firestore().collection('invoices').limit(5).orderBy('createdAt', 'desc');\n            if (startAfter) {\n                query = query.startAfter(startAfter);\n            }\n            query\n                .get()\n                .then((result) => {\n                    successCallback && successCallback(result);\n                })\n                .catch((error) => {\n                    errorCallback && errorCallback(error);\n                });\n        },\n        add: (data: InvoiceType, success: (id: string) => void, error: () => void) => {\n            firestore()\n                .collection('invoices')\n                .add(data)\n                .then((newInvoiceDoc) => {\n                    success(newInvoiceDoc.id);\n                })\n                .catch(() => {\n                    error();\n                });\n        },\n        delete: (invoiceId?: string, success?: () => void, error?: () => void) => {\n            firestore()\n                .collection('invoices')\n                .doc(invoiceId)\n                .delete()\n                .then(() => {\n                    success && success();\n                })\n                .catch(() => {\n                    error && error();\n                });\n        },\n    },\n    vendor: {\n        get: (successCallback?: Function, errorCallback?: Function, startAfter?: any) => {\n            let query = firestore().collection('vendors').limit(5).orderBy('createdAt', 'desc');\n            if (startAfter) {\n                query = query.startAfter(startAfter);\n            }\n            query\n                .get()\n                .then((result) => {\n                    successCallback && successCallback(result);\n                })\n                .catch((error) => {\n                    errorCallback && errorCallback(error);\n                });\n        },\n        add: (data: VendorType, success: (id: string) => void, error: () => void) => {\n            firestore()\n                .collection('vendors')\n                .add(data)\n                .then((newCustomerDoc) => {\n                    success(newCustomerDoc.id);\n                })\n                .catch(() => {\n                    error();\n                });\n        },\n        delete: (customerId?: string, success?: () => void, error?: () => void) => {\n            firestore()\n                .collection('vendors')\n                .doc(customerId)\n                .delete()\n                .then(() => {\n                    success && success();\n                })\n                .catch((error) => {\n                    error && error();\n                });\n        },\n    },\n    city: {\n        get: (successCallback?: Function, errorCallback?: Function, startAfter?: any) => {\n            let query = firestore().collection('cities').orderBy('name');\n            query\n                .get()\n                .then((result) => {\n                    successCallback && successCallback(result);\n                })\n                .catch((error) => {\n                    errorCallback && errorCallback(error);\n                });\n        },\n        add: (data: CityType, success: (id: string) => void, error: () => void) => {\n            firestore()\n                .collection('cities')\n                .add(data)\n                .then((newCityDoc) => {\n                    success(newCityDoc.id);\n                })\n                .catch(() => {\n                    error();\n                });\n        },\n        delete: (cityId?: string, success?: () => void, error?: () => void) => {\n            firestore()\n                .collection('cities')\n                .doc(cityId)\n                .delete()\n                .then(() => {\n                    success && success();\n                })\n                .catch((error) => {\n                    error && error();\n                });\n        },\n    },\n    account: {\n        get: (successCallback?: Function, errorCallback?: Function, startAfter?: any) => {\n            let query = firestore().collection('accounts').limit(5).orderBy('createdAt', 'desc');\n            if (startAfter) {\n                query = query.startAfter(startAfter);\n            }\n            query\n                .get()\n                .then((result) => {\n                    successCallback && successCallback(result);\n                })\n                .catch((error) => {\n                    errorCallback && errorCallback(error);\n                });\n        },\n        add: (data: AccountType, success: (id: string) => void, error: () => void) => {\n            firestore()\n                .collection('accounts')\n                .add(data)\n                .then((newProductDoc) => {\n                    success(newProductDoc.id);\n                })\n                .catch(() => {\n                    error();\n                });\n        },\n        delete: (accountId?: string, success?: () => void, error?: () => void) => {\n            firestore()\n                .collection('accounts')\n                .doc(accountId)\n                .delete()\n                .then(() => {\n                    success && success();\n                })\n                .catch((error) => {\n                    error && error();\n                });\n        },\n    },\n    vendorPayment: {\n        get: (successCallback?: Function, errorCallback?: Function, startAfter?: any) => {\n            let query = firestore()\n                .collection('vendorPayments')\n                .limit(5)\n                .orderBy('createdAt', 'desc');\n            if (startAfter) {\n                query = query.startAfter(startAfter);\n            }\n            query\n                .get()\n                .then((result) => {\n                    successCallback && successCallback(result);\n                })\n                .catch((error) => {\n                    errorCallback && errorCallback(error);\n                });\n        },\n        add: (data: VendorPaymentType, success: (id: string) => void, error: () => void) => {\n            firestore()\n                .collection('vendorPayments')\n                .add(data)\n                .then((newVendorPaymentDoc) => {\n                    success(newVendorPaymentDoc.id);\n                })\n                .catch(() => {\n                    error();\n                });\n        },\n        delete: (vendorPaymentId?: string, success?: () => void, error?: () => void) => {\n            firestore()\n                .collection('vendorPayments')\n                .doc(vendorPaymentId)\n                .delete()\n                .then(() => {\n                    success && success();\n                })\n                .catch(() => {\n                    error && error();\n                });\n        },\n    },\n    customerPayment: {\n        get: (successCallback?: Function, errorCallback?: Function, startAfter?: any) => {\n            let query = firestore()\n                .collection('customerPayments')\n                .limit(5)\n                .orderBy('createdAt', 'desc');\n            if (startAfter) {\n                query = query.startAfter(startAfter);\n            }\n            query\n                .get()\n                .then((result) => {\n                    successCallback && successCallback(result);\n                })\n                .catch((error) => {\n                    errorCallback && errorCallback(error);\n                });\n        },\n        add: (data: CustomerPaymentType, success: (id: string) => void, error: () => void) => {\n            firestore()\n                .collection('customerPayments')\n                .add(data)\n                .then((newCustomerPaymentDoc) => {\n                    success(newCustomerPaymentDoc.id);\n                })\n                .catch(() => {\n                    error();\n                });\n        },\n        delete: (customerPaymentId?: string, success?: () => void, error?: () => void) => {\n            firestore()\n                .collection('customerPayments')\n                .doc(customerPaymentId)\n                .delete()\n                .then(() => {\n                    success && success();\n                })\n                .catch(() => {\n                    error && error();\n                });\n        },\n    },\n    counts: {\n        get: (getSnapshot: (snapshot: firestore.QuerySnapshot<firestore.DocumentData>) => void) => {\n            firestore()\n                .collection('counts')\n                .limit(1)\n                .onSnapshot((snapshot) => {\n                    getSnapshot(snapshot);\n                });\n        },\n    },\n};\n\nexport default api;\n","import {useState, useEffect} from 'react';\nimport api from '../../api';\nimport ProductType from '../../model/product';\nlet productDocs: any[] = [];\nconst useProductsPage = () => {\n    const [modalOpen, setModalOpen] = useState(false);\n    const [showSuccessMessage, setShowSuccessMessage] = useState(false);\n\n    const [rows, setRows] = useState<ProductType[]>([]);\n    const [deleting, setDeleting] = useState(false);\n    const [loading, setLoading] = useState(false);\n\n    const openProductModal = () => {\n        setModalOpen(true);\n    };\n\n    const closeProductModal = (created: boolean) => {\n        setModalOpen(false);\n        if (created) setShowSuccessMessage(true);\n    };\n\n    const hideSuccessMessage = () => {\n        setShowSuccessMessage(false);\n    };\n\n    const loadProducts = () => {\n        setLoading(true);\n        api.product.get(\n            (result: any) => {\n                productDocs = [];\n                const items: any[] = [];\n                result.docs.forEach((doc: any) => {\n                    productDocs.push(doc);\n                    const item: any = doc.data();\n                    item.id = doc.id;\n                    items.push(item);\n                });\n                setRows(items);\n                setLoading(false);\n            },\n            () => {\n                setLoading(false);\n            }\n        );\n    };\n\n    const loadMoreProducts = () => {\n        setLoading(true);\n        api.product.get(\n            (result: any) => {\n                const items: any[] = [];\n                result.docs.forEach((doc: any) => {\n                    productDocs.push(doc);\n                    const item: any = doc.data();\n                    item.id = doc.id;\n                    items.push(item);\n                });\n                setRows((prev) => prev.concat(items));\n                setLoading(false);\n            },\n            () => {\n                setLoading(false);\n            },\n            productDocs[productDocs.length - 1]\n        );\n    };\n\n    const addProduct = (newProduct: ProductType) => {\n        rows.push(newProduct);\n        rows.sort(\n            (a: ProductType, b: ProductType) =>\n                (b.createdAt ? b.createdAt : 0) - (a.createdAt ? a.createdAt : 0)\n        );\n        setRows(rows);\n    };\n\n    const deleteProduct = (index: number) => {\n        setDeleting(true);\n        api.product.delete(\n            rows[index].id,\n            () => {\n                productDocs.splice(index, 1);\n                const remaining = rows.filter((row, i) => i !== index);\n                setRows(remaining);\n                setDeleting(false);\n            },\n            () => {\n                setDeleting(false);\n            }\n        );\n    };\n\n    const editProduct = () => {};\n\n    useEffect(() => {\n        loadProducts();\n    }, []);\n\n    return {\n        openProductModal,\n        closeProductModal,\n        modalOpen,\n        showSuccessMessage,\n        hideSuccessMessage,\n        deleteProduct,\n        addProduct,\n        loadMoreProducts,\n        deleting,\n        loading,\n        rows,\n    };\n};\nexport default useProductsPage;\n","import firebase from 'firebase';\nimport ProductType from '../../model/product';\nimport {useState} from 'react';\nimport api from '../../api';\n\nconst useProductModal = (\n    onAdd: (product: ProductType) => void,\n    close: (created: boolean) => void\n) => {\n    const [name, setName] = useState('');\n    const [details, setDetails] = useState('');\n    const [loading, setLoading] = useState(false);\n\n    const onNameChange = (value: string) => {\n        setName(value);\n    };\n\n    const onDetailsChange = (value: string) => {\n        setDetails(value);\n    };\n\n    const handleClick = () => {\n        if (!loading) {\n            setLoading(true);\n            const now = Date.now();\n            const newProduct: ProductType = {\n                name,\n                details,\n                quantity: 0,\n                rate: 0,\n                createdAt: now,\n                updatedAt: now,\n            };\n            api.product.add(\n                newProduct,\n                (id: string) => {\n                    setLoading(false);\n                    newProduct.id = id;\n                    onAdd(newProduct);\n                    close(true);\n                },\n                () => {\n                    setLoading(false);\n                    //ToDo failed to add data\n                }\n            );\n        }\n    };\n    return {\n        handleClick,\n        onNameChange,\n        onDetailsChange,\n        loading,\n    };\n};\n\nexport default useProductModal;\n","import React from 'react';\nimport {Dialog, DialogTitle, FormControl, TextField, Grid} from '@material-ui/core';\nimport Button from '../../components/Button/Button';\nimport useProductModal from './useProductModal';\nimport ProductType from '../../model/product';\n\nexport interface ProductModalType {\n    open: boolean;\n    close: (created: boolean) => void;\n    onAdd: (product: ProductType) => void;\n}\nconst ProductModal = (props: ProductModalType) => {\n    const {open, close, onAdd} = props;\n    const {handleClick, onNameChange, onDetailsChange, loading} = useProductModal(onAdd, close);\n    return (\n        <Dialog open={open}>\n            <DialogTitle>Add New Product</DialogTitle>\n            <Grid container spacing={2} style={{padding: 24}}>\n                <Grid item xs={12}>\n                    <Grid container spacing={2}>\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                label=\"Product Name\"\n                                onChange={(event) => {\n                                    onNameChange(event.target.value);\n                                }}\n                            />\n                        </Grid>\n\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                label=\"Details\"\n                                multiline\n                                rows={3}\n                                onChange={(event) => {\n                                    onDetailsChange(event.target.value);\n                                }}\n                            />\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid item xs={12}>\n                    <Grid container spacing={2} justify={'flex-end'}>\n                        <Grid item>\n                            <Button\n                                variant=\"text\"\n                                onClick={() => {\n                                    close(false);\n                                }}\n                            >\n                                Cancel\n                            </Button>\n                        </Grid>\n                        <Grid item>\n                            <Button onClick={handleClick} loading={loading}>\n                                Add Product\n                            </Button>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </Dialog>\n    );\n};\n\nexport default ProductModal;\n","import React from 'react';\nimport {Snackbar, SnackbarCloseReason} from '@material-ui/core';\nimport MuiAlert from '@material-ui/lab/Alert';\n\ninterface FloatingAlertProps {\n    message: string;\n    open: boolean;\n    severity: 'success' | 'info' | 'warning' | 'error';\n    onClose: () => void;\n}\nconst FloatingAlert = (props: FloatingAlertProps) => {\n    const onClose = (event: React.SyntheticEvent<any, Event>, reason: SnackbarCloseReason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        props.onClose();\n    };\n    return (\n        <Snackbar\n            open={props.open}\n            autoHideDuration={1000}\n            onClose={onClose}\n            anchorOrigin={{vertical: 'top', horizontal: 'right'}}\n        >\n            <MuiAlert variant=\"filled\" severity={props.severity}>\n                {props.message}\n            </MuiAlert>\n        </Snackbar>\n    );\n};\n\nexport default FloatingAlert;\n","import React from 'react';\nimport ProductsTable from '../../layouts/ProductsTable/ProductsTable';\nimport {Typography, Grid, TextField, FormControl, Button} from '@material-ui/core';\nimport useProductsPage from './useProductsPage';\nimport ProductModal from '../../layouts/ProductModal/ProductModal';\nimport FloatingAlert from '../../components/FloatingAlert/FloatingAlert';\nimport ProductType from '../../model/product';\n\ninterface ProductsPageType {\n    numberOfProducts: number;\n}\nconst ProductsPage = (props: ProductsPageType) => {\n    const {\n        openProductModal,\n        closeProductModal,\n        modalOpen,\n        showSuccessMessage,\n        hideSuccessMessage,\n        deleteProduct,\n        loadMoreProducts,\n        addProduct,\n        deleting,\n        loading,\n        rows,\n    } = useProductsPage();\n    return (\n        <>\n            <Grid container>\n                <Grid item xs={1}></Grid>\n                <Grid item xs={10}>\n                    <Typography variant=\"h4\">Products</Typography>\n                    <Grid container alignItems=\"center\">\n                        <Grid item xs={6}>\n                            <FormControl fullWidth>\n                                <TextField variant=\"outlined\" placeholder=\"Search Products\" />\n                            </FormControl>\n                        </Grid>\n\n                        <Grid item xs={6}>\n                            <Grid container justify=\"flex-end\">\n                                <Grid item>\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        onClick={openProductModal}\n                                    >\n                                        Add New Product\n                                    </Button>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                    <Typography variant=\"body1\">\n                        Showing {rows.length} out of {props.numberOfProducts} products\n                    </Typography>\n                    <ProductsTable\n                        rows={rows}\n                        onRowDelete={deleteProduct}\n                        deleting={deleting}\n                        onLoadMore={loadMoreProducts}\n                        allLoaded={rows.length === props.numberOfProducts}\n                        loading={loading}\n                    />\n                </Grid>\n            </Grid>\n            <FloatingAlert\n                severity=\"success\"\n                open={showSuccessMessage}\n                onClose={hideSuccessMessage}\n                message=\"Product added successfully\"\n            />\n            <ProductModal\n                open={modalOpen}\n                close={closeProductModal}\n                aria-labelledby=\"product_modal\"\n                onAdd={addProduct}\n            />\n        </>\n    );\n};\n\nexport default ProductsPage;\n","import React, {useState, useEffect} from 'react';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport {\n    Paper,\n    TableContainer,\n    Table,\n    TableHead,\n    TableRow,\n    TableCell,\n    TableSortLabel,\n    TableBody,\n    TablePagination,\n    makeStyles,\n    IconButton,\n} from '@material-ui/core';\nimport {firestore} from 'firebase';\nimport api from '../../api';\nimport ProductType from '../../model/product';\nimport Button from '../../components/Button/Button';\nimport CustomerType from '../../model/customer';\n\nconst createData = (\n    name: string,\n    averageRate: number,\n    quantity: number,\n    total: number,\n    details: string\n) => {\n    return {name, averageRate, quantity, total, details};\n};\n\nconst columns: string[] = ['Name', 'City', 'Mobile', 'Debt', 'Actions'];\n\nconst useStyles = makeStyles({\n    head: {\n        backgroundColor: '#ECEDEF',\n    },\n});\n\ninterface CustomersTableType {\n    rows: CustomerType[];\n    onRowDelete: Function;\n    deleting: boolean;\n    loading?: boolean;\n    allLoaded: boolean;\n    onLoadMore: () => void;\n}\n\nconst CustomersTable = (props: CustomersTableType) => {\n    const classes = useStyles();\n    return (\n        <>\n            <Paper>\n                <TableContainer>\n                    <Table>\n                        <TableHead classes={{root: classes.head}}>\n                            <TableRow>\n                                {columns.map((column: string, index: number) => (\n                                    <TableCell key={index}>{column}</TableCell>\n                                ))}\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {props.rows.map((row, index) => (\n                                <TableRow\n                                    key={row.id}\n                                    onClick={() => {\n                                        console.log('clicked', index);\n                                    }}\n                                >\n                                    <TableCell>{row.name}</TableCell>\n                                    <TableCell>{row.city?.name}</TableCell>\n                                    <TableCell>{row.mobile}</TableCell>\n                                    <TableCell>{row.debt}</TableCell>\n                                    <TableCell>\n                                        <IconButton\n                                            onClick={() => {\n                                                props.onRowDelete(index);\n                                            }}\n                                            disabled={props.deleting}\n                                        >\n                                            <DeleteIcon />\n                                        </IconButton>\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                    <Button\n                        onClick={props.onLoadMore}\n                        disabled={props.allLoaded}\n                        loading={props.loading}\n                    >\n                        Load More\n                    </Button>\n                </TableContainer>\n            </Paper>\n        </>\n    );\n};\n\nexport default CustomersTable;\n","import {useState, useEffect} from 'react';\nimport api from '../../api';\nimport CustomerType from '../../model/customer';\nimport CityType from '../../model/city';\nlet customerDocs: any[] = [];\nconst useCustomersPage = () => {\n    const [modalOpen, setModalOpen] = useState(false);\n    const [showSuccessMessage, setShowSuccessMessage] = useState(false);\n\n    const [rows, setRows] = useState<CustomerType[]>([]);\n    const [cities, setCities] = useState<CityType[]>([]);\n    const [deleting, setDeleting] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [loadingCities, setLoadingCities] = useState(false);\n\n    const openCustomerModal = () => {\n        setModalOpen(true);\n    };\n\n    const closeCustomerModal = (created: boolean) => {\n        setModalOpen(false);\n        if (created) setShowSuccessMessage(true);\n    };\n\n    const hideSuccessMessage = () => {\n        setShowSuccessMessage(false);\n    };\n\n    const loadCustomers = () => {\n        setLoading(true);\n        api.customer.get(\n            (result: any) => {\n                customerDocs = [];\n                const items: any[] = [];\n                result.docs.forEach((doc: any) => {\n                    customerDocs.push(doc);\n                    const item: any = doc.data();\n                    item.id = doc.id;\n                    items.push(item);\n                });\n                setRows(items);\n                setLoading(false);\n            },\n            () => {\n                setLoading(false);\n            }\n        );\n    };\n\n    const loadCities = () => {\n        setLoadingCities(true);\n        api.city.get(\n            (result: any) => {\n                const items: any[] = [];\n                console.log('total', result.docs.length);\n                result.docs.forEach((doc: any) => {\n                    const item: any = doc.data();\n                    item.id = doc.id;\n                    items.push(item);\n                });\n                setCities(items);\n                setLoadingCities(false);\n            },\n            () => {\n                setLoadingCities(false);\n            }\n        );\n    };\n\n    const addCity = (name: string) => {\n        const now = Date.now();\n        const newCity: CityType = {\n            name,\n            createdAt: now,\n            updatedAt: now,\n        };\n\n        cities.push(newCity);\n        setCities(cities);\n    };\n\n    const loadMoreCustomers = () => {\n        setLoading(true);\n        api.customer.get(\n            (result: any) => {\n                const items: any[] = [];\n                result.docs.forEach((doc: any) => {\n                    customerDocs.push(doc);\n                    const item: any = doc.data();\n                    item.id = doc.id;\n                    items.push(item);\n                });\n                setRows((prev) => prev.concat(items));\n                setLoading(false);\n            },\n            () => {\n                setLoading(false);\n            },\n            customerDocs[customerDocs.length - 1]\n        );\n    };\n\n    const addCustomer = (newCustomer: CustomerType) => {\n        rows.push(newCustomer);\n        rows.sort(\n            (a: CustomerType, b: CustomerType) =>\n                (b.createdAt ? b.createdAt : 0) - (a.createdAt ? a.createdAt : 0)\n        );\n        setRows(rows);\n    };\n\n    const deleteCustomer = (index: number) => {\n        setDeleting(true);\n        api.customer.delete(\n            rows[index].id,\n            () => {\n                customerDocs.splice(index, 1);\n                const remaining = rows.filter((row, i) => i !== index);\n                setRows(remaining);\n                setDeleting(false);\n            },\n            () => {\n                setDeleting(false);\n            }\n        );\n    };\n\n    const editCustomer = () => {};\n\n    useEffect(() => {\n        loadCustomers();\n        loadCities();\n    }, []);\n\n    return {\n        openCustomerModal,\n        closeCustomerModal,\n        modalOpen,\n        showSuccessMessage,\n        hideSuccessMessage,\n        deleteCustomer,\n        addCustomer,\n        loadMoreCustomers,\n        deleting,\n        loading,\n        rows,\n        cities,\n        loadingCities,\n        addCity,\n    };\n};\nexport default useCustomersPage;\n","import CustomerType from '../../model/customer';\nimport {useState} from 'react';\nimport api from '../../api';\nimport CityType from '../../model/city';\n\nconst useCustomerModal = (\n    onAdd: (customer: CustomerType) => void,\n    close: (created: boolean) => void\n) => {\n    const [name, setName] = useState('');\n    const [mobile, setMobile] = useState('');\n    const [city, setCity] = useState<CityType>();\n    const [loading, setLoading] = useState(false);\n\n    const onNameChange = (value: string) => {\n        setName(value);\n    };\n\n    const onMobileChange = (value: string) => {\n        setMobile(value);\n    };\n\n    const handleClick = () => {\n        if (!loading) {\n            setLoading(true);\n            const now = Date.now();\n            const newCustomer: CustomerType = {\n                name,\n                mobile,\n                city: {name: city?.name || 'Dummy City', id: city?.id},\n                debt: 0,\n                createdAt: now,\n                updatedAt: now,\n            };\n            api.customer.add(\n                newCustomer,\n                (id: string) => {\n                    setLoading(false);\n                    newCustomer.id = id;\n                    onAdd(newCustomer);\n                    close(true);\n                },\n                () => {\n                    setLoading(false);\n                    //ToDo failed to add data\n                }\n            );\n        }\n    };\n    return {\n        handleClick,\n        onNameChange,\n        onMobileChange,\n        city,\n        loading,\n        setCity,\n    };\n};\n\nexport default useCustomerModal;\n","import React from 'react';\nimport {Dialog, DialogTitle, FormControl, TextField, Grid} from '@material-ui/core';\nimport Button from '../../components/Button/Button';\nimport useCustomerModal from './useCustomerModal';\nimport CustomerType from '../../model/customer';\nimport CityType from '../../model/city';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\n\nexport interface CustomerModalType {\n    open: boolean;\n    close: (created: boolean) => void;\n    onAdd: (product: CustomerType) => void;\n    cities: CityType[];\n}\nconst CustomerModal = (props: CustomerModalType) => {\n    const {open, close, onAdd} = props;\n    const {handleClick, onNameChange, setCity, onMobileChange, loading, city} = useCustomerModal(\n        onAdd,\n        close\n    );\n    return (\n        <Dialog open={open}>\n            <DialogTitle>Add New Customer</DialogTitle>\n            <Grid container spacing={2} style={{padding: 24}}>\n                <Grid item xs={12}>\n                    <Grid container spacing={2}>\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                label=\"Customer Name\"\n                                onChange={(event) => {\n                                    onNameChange(event.target.value);\n                                }}\n                            />\n                        </Grid>\n\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                label=\"Mobile Number\"\n                                onChange={(event) => {\n                                    onMobileChange(event.target.value);\n                                }}\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <Autocomplete\n                                id=\"city-search\"\n                                options={props.cities}\n                                getOptionLabel={(option) => {\n                                    return option.name;\n                                }}\n                                // style={{width: 300}}\n                                renderInput={(params) => (\n                                    <TextField {...params} label=\"City\" variant=\"outlined\" />\n                                )}\n                                onChange={(event: any, value: CityType | null) => {\n                                    value && setCity(value);\n                                }}\n                            />\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid item xs={12}>\n                    <Grid container spacing={2} justify={'flex-end'}>\n                        <Grid item>\n                            <Button\n                                variant=\"text\"\n                                onClick={() => {\n                                    close(false);\n                                }}\n                            >\n                                Cancel\n                            </Button>\n                        </Grid>\n                        <Grid item>\n                            <Button onClick={handleClick} loading={loading}>\n                                Add Customer\n                            </Button>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </Dialog>\n    );\n};\n\nexport default CustomerModal;\n","import React from 'react';\nimport CustomersTable from '../../layouts/CustomersTable/CustomersTable';\nimport {Typography, Grid, TextField, FormControl, Button} from '@material-ui/core';\nimport useCustomersPage from './useCustomersPage';\nimport CustomerModal from '../../layouts/CustomerModal/CustomerModal';\nimport FloatingAlert from '../../components/FloatingAlert/FloatingAlert';\nimport CustomerType from '../../model/customer';\n\ninterface CustomersPageType {\n    numberOfCustomers: number;\n}\nconst CustomersPage = (props: CustomersPageType) => {\n    const {\n        openCustomerModal,\n        closeCustomerModal,\n        modalOpen,\n        showSuccessMessage,\n        hideSuccessMessage,\n        deleteCustomer,\n        loadMoreCustomers,\n        addCustomer,\n        deleting,\n        loading,\n        rows,\n        cities,\n        loadingCities,\n        addCity,\n    } = useCustomersPage();\n    return (\n        <>\n            <Grid container>\n                <Grid item xs={1}></Grid>\n                <Grid item xs={10}>\n                    <Typography variant=\"h4\">Customers</Typography>\n                    <Grid container alignItems=\"center\">\n                        <Grid item xs={6}>\n                            <FormControl fullWidth>\n                                <TextField variant=\"outlined\" placeholder=\"Search Customers\" />\n                            </FormControl>\n                        </Grid>\n\n                        <Grid item xs={6}>\n                            <Grid container justify=\"flex-end\">\n                                <Grid item>\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        onClick={openCustomerModal}\n                                        disabled={loadingCities}\n                                    >\n                                        Add New Customer\n                                    </Button>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                    <Typography variant=\"body1\">\n                        Showing {rows.length} out of {props.numberOfCustomers} customers\n                    </Typography>\n                    <CustomersTable\n                        rows={rows}\n                        onRowDelete={deleteCustomer}\n                        deleting={deleting}\n                        onLoadMore={loadMoreCustomers}\n                        allLoaded={rows.length === props.numberOfCustomers}\n                        loading={loading}\n                    />\n                </Grid>\n            </Grid>\n            <FloatingAlert\n                severity=\"success\"\n                open={showSuccessMessage}\n                onClose={hideSuccessMessage}\n                message=\"Customer added successfully\"\n            />\n            <CustomerModal\n                open={modalOpen}\n                close={closeCustomerModal}\n                aria-labelledby=\"customer_modal\"\n                onAdd={addCustomer}\n                cities={cities}\n            />\n        </>\n    );\n};\n\nexport default CustomersPage;\n","import {useState, useEffect} from 'react';\nimport api from '../../api';\nimport CityType from '../../model/city';\nlet cityDocs: any[] = [];\nconst useCitiesPage = () => {\n    const [showSuccessMessage, setShowSuccessMessage] = useState(false);\n    const [city, setCity] = useState('');\n    const [rows, setRows] = useState<CityType[]>([]);\n    const [deleting, setDeleting] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [adding, setAdding] = useState(false);\n\n    const hideSuccessMessage = () => {\n        setShowSuccessMessage(false);\n    };\n\n    const loadCities = () => {\n        setLoading(true);\n        api.city.get(\n            (result: any) => {\n                const items: any[] = [];\n                console.log('total', result.docs.length);\n                result.docs.forEach((doc: any) => {\n                    const item: any = doc.data();\n                    item.id = doc.id;\n                    items.push(item);\n                });\n                setRows(items);\n                setLoading(false);\n            },\n            () => {\n                setLoading(false);\n            }\n        );\n    };\n\n    const addCity = () => {\n        setAdding(true);\n        const now = Date.now();\n        const newCity: CityType = {\n            name: city,\n            createdAt: now,\n            updatedAt: now,\n        };\n        api.city.add(\n            newCity,\n            (id) => {\n                setAdding(false);\n                newCity.id = id;\n                setRows((oldRows) => oldRows.concat(newCity));\n                setCity('');\n            },\n            () => {\n                setAdding(false);\n            }\n        );\n    };\n\n    const deleteCity = (index: number) => {\n        setDeleting(true);\n        api.city.delete(\n            rows[index].id,\n            () => {\n                cityDocs.splice(index, 1);\n                const remaining = rows.filter((row, i) => i !== index);\n                setRows(remaining);\n                setDeleting(false);\n            },\n            () => {\n                setDeleting(false);\n            }\n        );\n    };\n\n    const editCity = () => {};\n\n    useEffect(() => {\n        loadCities();\n    }, []);\n\n    return {\n        showSuccessMessage,\n        hideSuccessMessage,\n        deleteCity,\n        addCity,\n        deleting,\n        loading,\n        adding,\n        rows,\n        setCity,\n        city,\n    };\n};\nexport default useCitiesPage;\n","import React from 'react';\nimport {\n    Typography,\n    Grid,\n    TextField,\n    FormControl,\n    List,\n    ListItem,\n    ListItemText,\n    CircularProgress,\n} from '@material-ui/core';\nimport useCitiesPage from './useCitiesPage';\nimport FloatingAlert from '../../components/FloatingAlert/FloatingAlert';\nimport CityType from '../../model/city';\nimport Button from '../../components/Button/Button';\n\ninterface CitiesPageType {\n    numberOfCities: number;\n}\nconst CitiesPage = (props: CitiesPageType) => {\n    const {\n        showSuccessMessage,\n        hideSuccessMessage,\n        deleteCity,\n        addCity,\n        deleting,\n        loading,\n        rows,\n        setCity,\n        adding,\n        city,\n    } = useCitiesPage();\n    return (\n        <>\n            <Grid container>\n                <Grid item>Cities</Grid>\n                <Grid container spacing={2}>\n                    <Grid item>\n                        <TextField\n                            value={city}\n                            label=\"New City Name\"\n                            onChange={(event) => {\n                                setCity(event.target.value);\n                            }}\n                        />\n                    </Grid>\n                    <Grid item>\n                        <Button onClick={addCity} loading={adding}>\n                            Add City\n                        </Button>\n                    </Grid>\n                </Grid>\n\n                <Grid container>\n                    {loading && <CircularProgress />}\n                    <List>\n                        {rows.map((city, index) => (\n                            <ListItem key={index}>\n                                <ListItemText>{city.name}</ListItemText>\n                            </ListItem>\n                        ))}\n                    </List>\n                </Grid>\n            </Grid>\n            {/* <FloatingAlert\n                severity=\"success\"\n                open={showSuccessMessage}\n                onClose={hideSuccessMessage}\n                message=\"City added successfully\"\n            /> */}\n        </>\n    );\n};\n\nexport default CitiesPage;\n","import React, {useState, useEffect} from 'react';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport {\n    Paper,\n    TableContainer,\n    Table,\n    TableHead,\n    TableRow,\n    TableCell,\n    TableSortLabel,\n    TableBody,\n    TablePagination,\n    makeStyles,\n    IconButton,\n} from '@material-ui/core';\nimport {firestore} from 'firebase';\nimport api from '../../api';\nimport ProductType from '../../model/product';\nimport Button from '../../components/Button/Button';\nimport VendorType from '../../model/vendor';\n\nconst createData = (\n    name: string,\n    averageRate: number,\n    quantity: number,\n    total: number,\n    details: string\n) => {\n    return {name, averageRate, quantity, total, details};\n};\n\nconst columns: string[] = ['Name', 'City', 'Mobile', 'Debt', 'Actions'];\n\nconst useStyles = makeStyles({\n    head: {\n        backgroundColor: '#ECEDEF',\n    },\n});\n\ninterface VendorsTableType {\n    rows: VendorType[];\n    onRowDelete: Function;\n    deleting: boolean;\n    loading?: boolean;\n    allLoaded: boolean;\n    onLoadMore: () => void;\n}\n\nconst VendorsTable = (props: VendorsTableType) => {\n    const classes = useStyles();\n    return (\n        <>\n            <Paper>\n                <TableContainer>\n                    <Table>\n                        <TableHead classes={{root: classes.head}}>\n                            <TableRow>\n                                {columns.map((column: string, index: number) => (\n                                    <TableCell key={index}>{column}</TableCell>\n                                ))}\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {props.rows.map((row, index) => (\n                                <TableRow\n                                    key={row.id}\n                                    onClick={() => {\n                                        console.log('clicked', index);\n                                    }}\n                                >\n                                    <TableCell>{row.name}</TableCell>\n                                    <TableCell>{row.city?.name}</TableCell>\n                                    <TableCell>{row.mobile}</TableCell>\n                                    <TableCell>{row.debt}</TableCell>\n                                    <TableCell>\n                                        <IconButton\n                                            onClick={() => {\n                                                props.onRowDelete(index);\n                                            }}\n                                            disabled={props.deleting}\n                                        >\n                                            <DeleteIcon />\n                                        </IconButton>\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                    <Button\n                        onClick={props.onLoadMore}\n                        disabled={props.allLoaded}\n                        loading={props.loading}\n                    >\n                        Load More\n                    </Button>\n                </TableContainer>\n            </Paper>\n        </>\n    );\n};\n\nexport default VendorsTable;\n","import {useState, useEffect} from 'react';\nimport api from '../../api';\nimport VendorType from '../../model/vendor';\nimport CityType from '../../model/city';\nlet vendorDocs: any[] = [];\nconst useVendorsPage = () => {\n    const [modalOpen, setModalOpen] = useState(false);\n    const [showSuccessMessage, setShowSuccessMessage] = useState(false);\n\n    const [rows, setRows] = useState<VendorType[]>([]);\n    const [cities, setCities] = useState<CityType[]>([]);\n    const [deleting, setDeleting] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [loadingCities, setLoadingCities] = useState(false);\n\n    const openVendorModal = () => {\n        setModalOpen(true);\n    };\n\n    const closeVendorModal = (created: boolean) => {\n        setModalOpen(false);\n        if (created) setShowSuccessMessage(true);\n    };\n\n    const hideSuccessMessage = () => {\n        setShowSuccessMessage(false);\n    };\n\n    const loadVendors = () => {\n        setLoading(true);\n        api.vendor.get(\n            (result: any) => {\n                vendorDocs = [];\n                const items: any[] = [];\n                result.docs.forEach((doc: any) => {\n                    vendorDocs.push(doc);\n                    const item: any = doc.data();\n                    item.id = doc.id;\n                    items.push(item);\n                });\n                setRows(items);\n                setLoading(false);\n            },\n            () => {\n                setLoading(false);\n            }\n        );\n    };\n\n    const loadCities = () => {\n        setLoadingCities(true);\n        api.city.get(\n            (result: any) => {\n                const items: any[] = [];\n                console.log('total', result.docs.length);\n                result.docs.forEach((doc: any) => {\n                    const item: any = doc.data();\n                    item.id = doc.id;\n                    items.push(item);\n                });\n                setCities(items);\n                setLoadingCities(false);\n            },\n            () => {\n                setLoadingCities(false);\n            }\n        );\n    };\n\n    const addCity = (name: string) => {\n        const now = Date.now();\n        const newCity: CityType = {\n            name,\n            createdAt: now,\n            updatedAt: now,\n        };\n\n        cities.push(newCity);\n        setCities(cities);\n    };\n\n    const loadMoreVendors = () => {\n        setLoading(true);\n        api.vendor.get(\n            (result: any) => {\n                const items: any[] = [];\n                result.docs.forEach((doc: any) => {\n                    vendorDocs.push(doc);\n                    const item: any = doc.data();\n                    item.id = doc.id;\n                    items.push(item);\n                });\n                setRows((prev) => prev.concat(items));\n                setLoading(false);\n            },\n            () => {\n                setLoading(false);\n            },\n            vendorDocs[vendorDocs.length - 1]\n        );\n    };\n\n    const addVendor = (newVendor: VendorType) => {\n        rows.push(newVendor);\n        rows.sort(\n            (a: VendorType, b: VendorType) =>\n                (b.createdAt ? b.createdAt : 0) - (a.createdAt ? a.createdAt : 0)\n        );\n        setRows(rows);\n    };\n\n    const deleteVendor = (index: number) => {\n        setDeleting(true);\n        api.vendor.delete(\n            rows[index].id,\n            () => {\n                vendorDocs.splice(index, 1);\n                const remaining = rows.filter((row, i) => i !== index);\n                setRows(remaining);\n                setDeleting(false);\n            },\n            () => {\n                setDeleting(false);\n            }\n        );\n    };\n\n    const editVendor = () => {};\n\n    useEffect(() => {\n        loadVendors();\n        loadCities();\n    }, []);\n\n    return {\n        openVendorModal,\n        closeVendorModal,\n        modalOpen,\n        showSuccessMessage,\n        hideSuccessMessage,\n        deleteVendor,\n        addVendor,\n        loadMoreVendors,\n        deleting,\n        loading,\n        rows,\n        cities,\n        loadingCities,\n        addCity,\n    };\n};\nexport default useVendorsPage;\n","import VendorType from '../../model/vendor';\nimport {useState} from 'react';\nimport api from '../../api';\nimport CityType from '../../model/city';\n\nconst useVendorModal = (onAdd: (vendor: VendorType) => void, close: (created: boolean) => void) => {\n    const [name, setName] = useState('');\n    const [mobile, setMobile] = useState('');\n    const [city, setCity] = useState<CityType>();\n    const [loading, setLoading] = useState(false);\n\n    const onNameChange = (value: string) => {\n        setName(value);\n    };\n\n    const onMobileChange = (value: string) => {\n        setMobile(value);\n    };\n\n    const handleClick = () => {\n        if (!loading) {\n            setLoading(true);\n            const now = Date.now();\n            const newVendor: VendorType = {\n                name,\n                mobile,\n                city: {name: city?.name || 'Dummy City', id: city?.id},\n                debt: 0,\n                createdAt: now,\n                updatedAt: now,\n            };\n            api.vendor.add(\n                newVendor,\n                (id: string) => {\n                    setLoading(false);\n                    newVendor.id = id;\n                    onAdd(newVendor);\n                    close(true);\n                },\n                () => {\n                    setLoading(false);\n                    //ToDo failed to add data\n                }\n            );\n        }\n    };\n    return {\n        handleClick,\n        onNameChange,\n        onMobileChange,\n        city,\n        loading,\n        setCity,\n    };\n};\n\nexport default useVendorModal;\n","import React from 'react';\nimport {Dialog, DialogTitle, FormControl, TextField, Grid} from '@material-ui/core';\nimport Button from '../../components/Button/Button';\nimport useVendorModal from './useVendorModal';\nimport VendorType from '../../model/vendor';\nimport CityType from '../../model/city';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\n\nexport interface VendorModalType {\n    open: boolean;\n    close: (created: boolean) => void;\n    onAdd: (product: VendorType) => void;\n    addCity: (name: string) => void;\n    cities: CityType[];\n}\nconst VendorModal = (props: VendorModalType) => {\n    const {open, close, onAdd} = props;\n    const {handleClick, onNameChange, setCity, onMobileChange, loading, city} = useVendorModal(\n        onAdd,\n        close\n    );\n    return (\n        <Dialog open={open}>\n            <DialogTitle>Add New Vendor</DialogTitle>\n            <Grid container spacing={2} style={{padding: 24}}>\n                <Grid item xs={12}>\n                    <Grid container spacing={2}>\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                label=\"Vendor Name\"\n                                onChange={(event) => {\n                                    onNameChange(event.target.value);\n                                }}\n                            />\n                        </Grid>\n\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                label=\"Mobile Number\"\n                                onChange={(event) => {\n                                    onMobileChange(event.target.value);\n                                }}\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <Autocomplete\n                                id=\"city-search\"\n                                options={props.cities}\n                                getOptionLabel={(option) => {\n                                    return option.name;\n                                }}\n                                // style={{width: 300}}\n                                renderInput={(params) => (\n                                    <TextField {...params} label=\"City\" variant=\"outlined\" />\n                                )}\n                                onChange={(event: any, value: CityType | null) => {\n                                    value && setCity(value);\n                                }}\n                            />\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid item xs={12}>\n                    <Grid container spacing={2} justify={'flex-end'}>\n                        <Grid item>\n                            <Button\n                                variant=\"text\"\n                                onClick={() => {\n                                    close(false);\n                                }}\n                            >\n                                Cancel\n                            </Button>\n                        </Grid>\n                        <Grid item>\n                            <Button onClick={handleClick} loading={loading}>\n                                Add Vendor\n                            </Button>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </Dialog>\n    );\n};\n\nexport default VendorModal;\n","import React from 'react';\nimport VendorsTable from '../../layouts/VendorsTable/VendorsTable';\nimport {Typography, Grid, TextField, FormControl, Button} from '@material-ui/core';\nimport useVendorsPage from './useVendorsPage';\nimport VendorModal from '../../layouts/VendorModal/VendorModal';\nimport FloatingAlert from '../../components/FloatingAlert/FloatingAlert';\nimport VendorType from '../../model/vendor';\n\ninterface VendorsPageType {\n    numberOfVendors: number;\n}\nconst VendorsPage = (props: VendorsPageType) => {\n    const {\n        openVendorModal,\n        closeVendorModal,\n        modalOpen,\n        showSuccessMessage,\n        hideSuccessMessage,\n        deleteVendor,\n        loadMoreVendors,\n        addVendor,\n        deleting,\n        loading,\n        rows,\n        cities,\n        loadingCities,\n        addCity,\n    } = useVendorsPage();\n    return (\n        <>\n            <Grid container>\n                <Grid item xs={1}></Grid>\n                <Grid item xs={10}>\n                    <Typography variant=\"h4\">Vendors</Typography>\n                    <Grid container alignItems=\"center\">\n                        <Grid item xs={6}>\n                            <FormControl fullWidth>\n                                <TextField variant=\"outlined\" placeholder=\"Search Vendors\" />\n                            </FormControl>\n                        </Grid>\n\n                        <Grid item xs={6}>\n                            <Grid container justify=\"flex-end\">\n                                <Grid item>\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        onClick={openVendorModal}\n                                        disabled={loadingCities}\n                                    >\n                                        Add New Vendor\n                                    </Button>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                    <Typography variant=\"body1\">\n                        Showing {rows.length} out of {props.numberOfVendors} vendors\n                    </Typography>\n                    <VendorsTable\n                        rows={rows}\n                        onRowDelete={deleteVendor}\n                        deleting={deleting}\n                        onLoadMore={loadMoreVendors}\n                        allLoaded={rows.length === props.numberOfVendors}\n                        loading={loading}\n                    />\n                </Grid>\n            </Grid>\n            <FloatingAlert\n                severity=\"success\"\n                open={showSuccessMessage}\n                onClose={hideSuccessMessage}\n                message=\"Vendor added successfully\"\n            />\n            <VendorModal\n                open={modalOpen}\n                close={closeVendorModal}\n                aria-labelledby=\"vendor_modal\"\n                onAdd={addVendor}\n                cities={cities}\n                addCity={addCity}\n            />\n        </>\n    );\n};\n\nexport default VendorsPage;\n","import React, {useState, useEffect} from 'react';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport {\n    Paper,\n    TableContainer,\n    Table,\n    TableHead,\n    TableRow,\n    TableCell,\n    TableSortLabel,\n    TableBody,\n    TablePagination,\n    makeStyles,\n    IconButton,\n} from '@material-ui/core';\nimport {firestore} from 'firebase';\nimport api from '../../api';\nimport AccountType from '../../model/account';\nimport Button from '../../components/Button/Button';\n\nconst columns: string[] = ['Name', 'Amount', 'Type', 'Details', 'Actions'];\n\nconst useStyles = makeStyles({\n    head: {\n        backgroundColor: '#ECEDEF',\n    },\n});\n\ninterface AccountsTableType {\n    rows: AccountType[];\n    onRowDelete: Function;\n    deleting: boolean;\n    loading?: boolean;\n    allLoaded: boolean;\n    onLoadMore: () => void;\n}\n\nconst AccountsTable = (props: AccountsTableType) => {\n    const classes = useStyles();\n    return (\n        <>\n            <Paper>\n                <TableContainer>\n                    <Table>\n                        <TableHead classes={{root: classes.head}}>\n                            <TableRow>\n                                {columns.map((column: string, index: number) => (\n                                    <TableCell key={index}>{column}</TableCell>\n                                ))}\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {props.rows.map((row, index) => (\n                                <TableRow\n                                    key={row.id}\n                                    onClick={() => {\n                                        console.log('clicked', index);\n                                    }}\n                                >\n                                    <TableCell>{row.name}</TableCell>\n                                    <TableCell>{row.amount}</TableCell>\n                                    <TableCell>{row.type}</TableCell>\n                                    <TableCell>{row.details}</TableCell>\n                                    <TableCell>\n                                        <IconButton\n                                            onClick={() => {\n                                                props.onRowDelete(index);\n                                            }}\n                                            disabled={props.deleting}\n                                        >\n                                            <DeleteIcon />\n                                        </IconButton>\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                    <Button\n                        onClick={props.onLoadMore}\n                        disabled={props.allLoaded}\n                        loading={props.loading}\n                    >\n                        Load More\n                    </Button>\n                </TableContainer>\n            </Paper>\n        </>\n    );\n};\n\nexport default AccountsTable;\n","import {useState, useEffect} from 'react';\nimport api from '../../api';\nimport AccountType from '../../model/account';\nlet accountDocs: any[] = [];\nconst useAccountsPage = () => {\n    const [modalOpen, setModalOpen] = useState(false);\n    const [showSuccessMessage, setShowSuccessMessage] = useState(false);\n\n    const [rows, setRows] = useState<AccountType[]>([]);\n    const [deleting, setDeleting] = useState(false);\n    const [loading, setLoading] = useState(false);\n\n    const openAccountModal = () => {\n        setModalOpen(true);\n    };\n\n    const closeAccountModal = (created: boolean) => {\n        setModalOpen(false);\n        if (created) setShowSuccessMessage(true);\n    };\n\n    const hideSuccessMessage = () => {\n        setShowSuccessMessage(false);\n    };\n\n    const loadAccounts = () => {\n        setLoading(true);\n        api.account.get(\n            (result: any) => {\n                accountDocs = [];\n                const items: any[] = [];\n                result.docs.forEach((doc: any) => {\n                    accountDocs.push(doc);\n                    const item: any = doc.data();\n                    item.id = doc.id;\n                    items.push(item);\n                });\n                setRows(items);\n                setLoading(false);\n            },\n            () => {\n                setLoading(false);\n            }\n        );\n    };\n\n    const loadMoreAccounts = () => {\n        setLoading(true);\n        api.account.get(\n            (result: any) => {\n                const items: any[] = [];\n                result.docs.forEach((doc: any) => {\n                    accountDocs.push(doc);\n                    const item: any = doc.data();\n                    item.id = doc.id;\n                    items.push(item);\n                });\n                setRows((prev) => prev.concat(items));\n                setLoading(false);\n            },\n            () => {\n                setLoading(false);\n            },\n            accountDocs[accountDocs.length - 1]\n        );\n    };\n\n    const addAccount = (newAccount: AccountType) => {\n        rows.push(newAccount);\n        rows.sort(\n            (a: AccountType, b: AccountType) =>\n                (b.createdAt ? b.createdAt : 0) - (a.createdAt ? a.createdAt : 0)\n        );\n        setRows(rows);\n    };\n\n    const deleteAccount = (index: number) => {\n        setDeleting(true);\n        api.account.delete(\n            rows[index].id,\n            () => {\n                accountDocs.splice(index, 1);\n                const remaining = rows.filter((row, i) => i !== index);\n                setRows(remaining);\n                setDeleting(false);\n            },\n            () => {\n                setDeleting(false);\n            }\n        );\n    };\n\n    const editAccount = () => {};\n\n    useEffect(() => {\n        loadAccounts();\n    }, []);\n\n    return {\n        openAccountModal,\n        closeAccountModal,\n        modalOpen,\n        showSuccessMessage,\n        hideSuccessMessage,\n        deleteAccount,\n        addAccount,\n        loadMoreAccounts,\n        deleting,\n        loading,\n        rows,\n    };\n};\nexport default useAccountsPage;\n","import firebase from 'firebase';\nimport AccountType from '../../model/account';\nimport {useState} from 'react';\nimport api from '../../api';\n\nconst useAccountModal = (\n    onAdd: (account: AccountType) => void,\n    close: (created: boolean) => void\n) => {\n    const [name, setName] = useState('');\n    const [type, setType] = useState('');\n    const [amount, setAmount] = useState(0);\n    const [details, setDetails] = useState('');\n    const [loading, setLoading] = useState(false);\n\n    const onNameChange = (value: string) => {\n        setName(value);\n    };\n\n    const onDetailsChange = (value: string) => {\n        setDetails(value);\n    };\n\n    const onTypeChange = (value: string) => {\n        setType(value);\n    };\n\n    const onAmountChange = (value: number) => {\n        setAmount(value);\n    };\n\n    const handleClick = () => {\n        if (!loading) {\n            setLoading(true);\n            const now = Date.now();\n            const newAccount: AccountType = {\n                name,\n                details,\n                type,\n                amount,\n                createdAt: now,\n                updatedAt: now,\n            };\n            api.account.add(\n                newAccount,\n                (id: string) => {\n                    setLoading(false);\n                    newAccount.id = id;\n                    onAdd(newAccount);\n                    close(true);\n                },\n                () => {\n                    setLoading(false);\n                    //ToDo failed to add data\n                }\n            );\n        }\n    };\n    return {\n        handleClick,\n        onNameChange,\n        onDetailsChange,\n        onTypeChange,\n        onAmountChange,\n        loading,\n    };\n};\n\nexport default useAccountModal;\n","import React from 'react';\nimport {Dialog, DialogTitle, FormControl, TextField, Grid} from '@material-ui/core';\nimport Button from '../../components/Button/Button';\nimport useAccountModal from './useAccountModal';\nimport AccountType from '../../model/account';\n\nexport interface AccountModalType {\n    open: boolean;\n    close: (created: boolean) => void;\n    onAdd: (account: AccountType) => void;\n}\nconst AccountModal = (props: AccountModalType) => {\n    const {open, close, onAdd} = props;\n    const {\n        handleClick,\n        onNameChange,\n        onDetailsChange,\n        onTypeChange,\n        onAmountChange,\n        loading,\n    } = useAccountModal(onAdd, close);\n    return (\n        <Dialog open={open}>\n            <DialogTitle>Add New Account</DialogTitle>\n            <Grid container spacing={2} style={{padding: 24}}>\n                <Grid item xs={12}>\n                    <Grid container spacing={2}>\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                label=\"Account Name\"\n                                onChange={(event) => {\n                                    onNameChange(event.target.value);\n                                }}\n                            />\n                        </Grid>\n\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                label=\"Account Type\"\n                                onChange={(event) => {\n                                    onTypeChange(event.target.value);\n                                }}\n                            />\n                        </Grid>\n\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                label=\"Account Amount\"\n                                type=\"number\"\n                                onChange={(event) => {\n                                    onAmountChange(parseInt(event.target.value));\n                                }}\n                            />\n                        </Grid>\n\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                label=\"Details\"\n                                multiline\n                                rows={3}\n                                onChange={(event) => {\n                                    onDetailsChange(event.target.value);\n                                }}\n                            />\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid item xs={12}>\n                    <Grid container spacing={2} justify={'flex-end'}>\n                        <Grid item>\n                            <Button\n                                variant=\"text\"\n                                onClick={() => {\n                                    close(false);\n                                }}\n                            >\n                                Cancel\n                            </Button>\n                        </Grid>\n                        <Grid item>\n                            <Button onClick={handleClick} loading={loading}>\n                                Add Account\n                            </Button>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </Dialog>\n    );\n};\n\nexport default AccountModal;\n","import React from 'react';\nimport AccountsTable from '../../layouts/AccountsTable/AccountsTable';\nimport {Typography, Grid, TextField, FormControl, Button} from '@material-ui/core';\nimport useAccountsPage from './useAccountsPage';\nimport AccountModal from '../../layouts/AccountModal/AccountModal';\nimport FloatingAlert from '../../components/FloatingAlert/FloatingAlert';\nimport AccountType from '../../model/account';\n\ninterface AccountsPageType {\n    numberOfAccounts: number;\n}\nconst AccountsPage = (props: AccountsPageType) => {\n    const {\n        openAccountModal,\n        closeAccountModal,\n        modalOpen,\n        showSuccessMessage,\n        hideSuccessMessage,\n        deleteAccount,\n        loadMoreAccounts,\n        addAccount,\n        deleting,\n        loading,\n        rows,\n    } = useAccountsPage();\n    return (\n        <>\n            <Grid container>\n                <Grid item xs={1}></Grid>\n                <Grid item xs={10}>\n                    <Typography variant=\"h4\">Accounts</Typography>\n                    <Grid container alignItems=\"center\">\n                        <Grid item xs={6}>\n                            <FormControl fullWidth>\n                                <TextField variant=\"outlined\" placeholder=\"Search Accounts\" />\n                            </FormControl>\n                        </Grid>\n\n                        <Grid item xs={6}>\n                            <Grid container justify=\"flex-end\">\n                                <Grid item>\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        onClick={openAccountModal}\n                                    >\n                                        Add New Account\n                                    </Button>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                    <Typography variant=\"body1\">\n                        Showing {rows.length} out of {props.numberOfAccounts} accounts\n                    </Typography>\n                    <AccountsTable\n                        rows={rows}\n                        onRowDelete={deleteAccount}\n                        deleting={deleting}\n                        onLoadMore={loadMoreAccounts}\n                        allLoaded={rows.length === props.numberOfAccounts}\n                        loading={loading}\n                    />\n                </Grid>\n            </Grid>\n            <FloatingAlert\n                severity=\"success\"\n                open={showSuccessMessage}\n                onClose={hideSuccessMessage}\n                message=\"Account added successfully\"\n            />\n            <AccountModal\n                open={modalOpen}\n                close={closeAccountModal}\n                aria-labelledby=\"account_modal\"\n                onAdd={addAccount}\n            />\n        </>\n    );\n};\n\nexport default AccountsPage;\n","import React, {useState, useEffect} from 'react';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport {\n    Paper,\n    TableContainer,\n    Table,\n    TableHead,\n    TableRow,\n    TableCell,\n    TableSortLabel,\n    TableBody,\n    TablePagination,\n    makeStyles,\n    IconButton,\n} from '@material-ui/core';\nimport {firestore} from 'firebase';\nimport api from '../../api';\nimport ProductType from '../../model/product';\nimport Button from '../../components/Button/Button';\nimport PurchaseType from '../../model/purchase';\n\nconst createData = (\n    name: string,\n    averageRate: number,\n    quantity: number,\n    total: number,\n    details: string\n) => {\n    return {name, averageRate, quantity, total, details};\n};\n\nconst columns: string[] = ['Vendor', 'Product', 'Quantity', 'Rate', 'Total', 'Date', 'Actions'];\n\nconst useStyles = makeStyles({\n    head: {\n        backgroundColor: '#ECEDEF',\n    },\n});\n\ninterface PurchasesTableType {\n    rows: PurchaseType[];\n    onRowDelete: Function;\n    deleting: boolean;\n    loading?: boolean;\n    allLoaded: boolean;\n    onLoadMore: () => void;\n}\n\nconst PurchasesTable = (props: PurchasesTableType) => {\n    const classes = useStyles();\n    return (\n        <>\n            <Paper>\n                <TableContainer>\n                    <Table>\n                        <TableHead classes={{root: classes.head}}>\n                            <TableRow>\n                                {columns.map((column: string, index: number) => (\n                                    <TableCell key={index}>{column}</TableCell>\n                                ))}\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {props.rows.map((row, index) => (\n                                <TableRow\n                                    key={row.id}\n                                    onClick={() => {\n                                        console.log('clicked', index);\n                                    }}\n                                >\n                                    <TableCell>{row.vendor.name}</TableCell>\n                                    <TableCell>{row.product.name}</TableCell>\n                                    <TableCell>{row.quantity}</TableCell>\n                                    <TableCell>{row.rate}</TableCell>\n                                    <TableCell>{row.quantity * row.rate}</TableCell>\n                                    <TableCell>{row.createdAt}</TableCell>\n                                    <TableCell>\n                                        <IconButton\n                                            onClick={() => {\n                                                props.onRowDelete(index);\n                                            }}\n                                            disabled={props.deleting}\n                                        >\n                                            <DeleteIcon />\n                                        </IconButton>\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                    <Button\n                        onClick={props.onLoadMore}\n                        disabled={props.allLoaded}\n                        loading={props.loading}\n                    >\n                        Load More\n                    </Button>\n                </TableContainer>\n            </Paper>\n        </>\n    );\n};\n\nexport default PurchasesTable;\n","import {useState, useEffect} from 'react';\nimport api from '../../api';\nimport PurchaseType from '../../model/purchase';\nimport CityType from '../../model/city';\nimport ProductType from '../../model/product';\nimport VendorType from '../../model/vendor';\nlet purchaseDocs: any[] = [];\nconst usePurchasesPage = () => {\n    const [modalOpen, setModalOpen] = useState(false);\n    const [showSuccessMessage, setShowSuccessMessage] = useState(false);\n\n    const [rows, setRows] = useState<PurchaseType[]>([]);\n    const [products, setProducts] = useState<ProductType[]>([]);\n    const [vendors, setVendors] = useState<VendorType[]>([]);\n    const [deleting, setDeleting] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [loadingProducts, setLoadingProducts] = useState(false);\n    const [loadingVendors, setLoadingVendors] = useState(false);\n\n    const openPurchaseModal = () => {\n        setModalOpen(true);\n    };\n\n    const closePurchaseModal = (created: boolean) => {\n        setModalOpen(false);\n        if (created) setShowSuccessMessage(true);\n    };\n\n    const hideSuccessMessage = () => {\n        setShowSuccessMessage(false);\n    };\n\n    const loadPurchases = () => {\n        setLoading(true);\n        api.purchase.get(\n            (result: any) => {\n                purchaseDocs = [];\n                const items: any[] = [];\n                result.docs.forEach((doc: any) => {\n                    purchaseDocs.push(doc);\n                    const item: any = doc.data();\n                    item.id = doc.id;\n                    items.push(item);\n                });\n                setRows(items);\n                setLoading(false);\n            },\n            () => {\n                setLoading(false);\n            }\n        );\n    };\n\n    const loadProducts = () => {\n        setLoadingProducts(true);\n        api.product.get(\n            (result: any) => {\n                const items: any[] = [];\n                result.docs.forEach((doc: any) => {\n                    const item: any = doc.data();\n                    item.id = doc.id;\n                    items.push(item);\n                });\n                setProducts(items);\n                setLoadingProducts(false);\n            },\n            () => {\n                setLoadingProducts(false);\n            }\n        );\n    };\n\n    const loadVendors = () => {\n        setLoadingVendors(true);\n        api.vendor.get(\n            (result: any) => {\n                const items: any[] = [];\n                result.docs.forEach((doc: any) => {\n                    const item: any = doc.data();\n                    item.id = doc.id;\n                    items.push(item);\n                });\n                setVendors(items);\n                setLoadingVendors(false);\n            },\n            () => {\n                setLoadingVendors(false);\n            }\n        );\n    };\n\n    const loadMorePurchases = () => {\n        setLoading(true);\n        api.purchase.get(\n            (result: any) => {\n                const items: any[] = [];\n                result.docs.forEach((doc: any) => {\n                    purchaseDocs.push(doc);\n                    const item: any = doc.data();\n                    item.id = doc.id;\n                    items.push(item);\n                });\n                setRows((prev) => prev.concat(items));\n                setLoading(false);\n            },\n            () => {\n                setLoading(false);\n            },\n            purchaseDocs[purchaseDocs.length - 1]\n        );\n    };\n\n    const addPurchase = (newPurchase: PurchaseType) => {\n        rows.push(newPurchase);\n        rows.sort((a: PurchaseType, b: PurchaseType) => b.createdAt - a.createdAt);\n        setRows(rows);\n    };\n\n    const deletePurchase = (index: number) => {\n        setDeleting(true);\n        api.purchase.delete(\n            rows[index].id,\n            () => {\n                purchaseDocs.splice(index, 1);\n                const remaining = rows.filter((row, i) => i !== index);\n                setRows(remaining);\n                setDeleting(false);\n            },\n            () => {\n                setDeleting(false);\n            }\n        );\n    };\n\n    const editPurchase = () => {};\n\n    useEffect(() => {\n        loadPurchases();\n        loadProducts();\n        loadVendors();\n    }, []);\n\n    return {\n        openPurchaseModal,\n        closePurchaseModal,\n        modalOpen,\n        showSuccessMessage,\n        hideSuccessMessage,\n        deletePurchase,\n        addPurchase,\n        loadMorePurchases,\n        deleting,\n        loading,\n        rows,\n        products,\n        vendors,\n        loadingProducts,\n        loadingVendors,\n    };\n};\nexport default usePurchasesPage;\n","import PurchaseType from '../../model/purchase';\nimport {useState} from 'react';\nimport api from '../../api';\nimport CityType from '../../model/city';\nimport ProductType from '../../model/product';\nimport VendorType from '../../model/vendor';\n\nconst usePurchaseModal = (\n    onAdd: (purchase: PurchaseType) => void,\n    close: (created: boolean) => void\n) => {\n    const [product, setProduct] = useState<ProductType>();\n    const [vendor, setVendor] = useState<VendorType>();\n    const [quantity, setQuantity] = useState(0);\n    const [rate, setRate] = useState(0);\n\n    const [loading, setLoading] = useState(false);\n\n    const onQuantityChange = (value: number) => {\n        setQuantity(value);\n    };\n\n    const onRateChange = (value: number) => {\n        setRate(value);\n    };\n\n    const handleClick = () => {\n        if (!loading) {\n            setLoading(true);\n            const now = Date.now();\n            const newPurchase: PurchaseType = {\n                product: {id: product?.id, name: product?.name},\n                vendor: {id: vendor?.id, name: vendor?.name},\n                quantity: quantity,\n                rate: rate,\n                createdAt: now,\n                updatedAt: now,\n            };\n            api.purchase.add(\n                newPurchase,\n                (id: string) => {\n                    setLoading(false);\n                    newPurchase.id = id;\n                    onAdd(newPurchase);\n                    close(true);\n                },\n                () => {\n                    setLoading(false);\n                    //ToDo failed to add data\n                }\n            );\n        }\n    };\n    return {\n        handleClick,\n        onQuantityChange,\n        onRateChange,\n        setProduct,\n        setVendor,\n        loading,\n    };\n};\n\nexport default usePurchaseModal;\n","import React from 'react';\nimport {Dialog, DialogTitle, FormControl, TextField, Grid} from '@material-ui/core';\nimport Button from '../../components/Button/Button';\nimport usePurchaseModal from './usePurchaseModal';\nimport PurchaseType from '../../model/purchase';\nimport CityType from '../../model/city';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport VendorType from '../../model/vendor';\nimport ProductType from '../../model/product';\n\nexport interface PurchaseModalType {\n    open: boolean;\n    close: (created: boolean) => void;\n    onAdd: (product: PurchaseType) => void;\n    vendors: VendorType[];\n    products: ProductType[];\n}\nconst PurchaseModal = (props: PurchaseModalType) => {\n    const {open, close, onAdd} = props;\n    const {\n        handleClick,\n        onQuantityChange,\n        onRateChange,\n        loading,\n        setProduct,\n        setVendor,\n    } = usePurchaseModal(onAdd, close);\n    return (\n        <Dialog open={open}>\n            <DialogTitle>Add New Purchase</DialogTitle>\n            <Grid container spacing={2} style={{padding: 24}}>\n                <Grid item xs={12}>\n                    <Grid container spacing={2}>\n                        <Grid item xs={12}>\n                            <Autocomplete\n                                id=\"vendor-search\"\n                                options={props.vendors}\n                                getOptionLabel={(option) => {\n                                    return option.name || 'Dummy Vendor';\n                                }}\n                                renderInput={(params) => (\n                                    <TextField\n                                        {...params}\n                                        label=\"Search Vendor\"\n                                        variant=\"outlined\"\n                                    />\n                                )}\n                                onChange={(event: any, value: VendorType | null) => {\n                                    value && setVendor(value);\n                                }}\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <Autocomplete\n                                id=\"product-search\"\n                                options={props.products}\n                                getOptionLabel={(option) => {\n                                    return option.name || 'Dummy Product';\n                                }}\n                                renderInput={(params) => (\n                                    <TextField\n                                        {...params}\n                                        label=\"Search Product\"\n                                        variant=\"outlined\"\n                                    />\n                                )}\n                                onChange={(event: any, value: ProductType | null) => {\n                                    value && setProduct(value);\n                                }}\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                label=\"Quantity\"\n                                type=\"number\"\n                                onChange={(event) => {\n                                    onQuantityChange(parseInt(event.target.value));\n                                }}\n                            />\n                        </Grid>\n\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                label=\"Rate\"\n                                type=\"number\"\n                                onChange={(event) => {\n                                    onRateChange(parseInt(event.target.value));\n                                }}\n                            />\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid item xs={12}>\n                    <Grid container spacing={2} justify={'flex-end'}>\n                        <Grid item>\n                            <Button\n                                variant=\"text\"\n                                onClick={() => {\n                                    close(false);\n                                }}\n                            >\n                                Cancel\n                            </Button>\n                        </Grid>\n                        <Grid item>\n                            <Button onClick={handleClick} loading={loading}>\n                                Add Purchase\n                            </Button>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </Dialog>\n    );\n};\n\nexport default PurchaseModal;\n","import React from 'react';\nimport PurchasesTable from '../../layouts/PurchasesTable/PurchasesTable';\nimport {Typography, Grid, TextField, FormControl, Button} from '@material-ui/core';\nimport usePurchasesPage from './usePurchasesPage';\nimport PurchaseModal from '../../layouts/PurchaseModal/PurchaseModal';\nimport FloatingAlert from '../../components/FloatingAlert/FloatingAlert';\nimport PurchaseType from '../../model/purchase';\n\ninterface PurchasesPageType {\n    numberOfPurchases: number;\n}\nconst PurchasesPage = (props: PurchasesPageType) => {\n    const {\n        openPurchaseModal,\n        closePurchaseModal,\n        modalOpen,\n        showSuccessMessage,\n        hideSuccessMessage,\n        deletePurchase,\n        loadMorePurchases,\n        addPurchase,\n        deleting,\n        loading,\n        rows,\n        products,\n        loadingProducts,\n        vendors,\n        loadingVendors,\n    } = usePurchasesPage();\n    return (\n        <>\n            <Grid container>\n                <Grid item xs={1}></Grid>\n                <Grid item xs={10}>\n                    <Typography variant=\"h4\">Purchases</Typography>\n                    <Grid container alignItems=\"center\">\n                        <Grid item xs={6}>\n                            <FormControl fullWidth>\n                                <TextField variant=\"outlined\" placeholder=\"Search Purchases\" />\n                            </FormControl>\n                        </Grid>\n\n                        <Grid item xs={6}>\n                            <Grid container justify=\"flex-end\">\n                                <Grid item>\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        onClick={openPurchaseModal}\n                                        disabled={loadingProducts || loadingVendors}\n                                    >\n                                        Add New Purchase\n                                    </Button>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                    <Typography variant=\"body1\">\n                        Showing {rows.length} out of {props.numberOfPurchases} purchases\n                    </Typography>\n                    <PurchasesTable\n                        rows={rows}\n                        onRowDelete={deletePurchase}\n                        deleting={deleting}\n                        onLoadMore={loadMorePurchases}\n                        allLoaded={rows.length === props.numberOfPurchases}\n                        loading={loading}\n                    />\n                </Grid>\n            </Grid>\n            <FloatingAlert\n                severity=\"success\"\n                open={showSuccessMessage}\n                onClose={hideSuccessMessage}\n                message=\"Purchase added successfully\"\n            />\n            <PurchaseModal\n                open={modalOpen}\n                close={closePurchaseModal}\n                aria-labelledby=\"purchase_modal\"\n                onAdd={addPurchase}\n                products={products}\n                vendors={vendors}\n            />\n        </>\n    );\n};\n\nexport default PurchasesPage;\n","import React, {useState, useEffect} from 'react';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport {\n    Paper,\n    TableContainer,\n    Table,\n    TableHead,\n    TableRow,\n    TableCell,\n    TableSortLabel,\n    TableBody,\n    TablePagination,\n    makeStyles,\n    IconButton,\n} from '@material-ui/core';\nimport {firestore} from 'firebase';\nimport api from '../../api';\nimport ProductType from '../../model/product';\nimport Button from '../../components/Button/Button';\nimport InvoiceType from '../../model/invoice';\nimport {getTotalSalesAmount} from '../../utils';\n\nconst createData = (\n    name: string,\n    averageRate: number,\n    quantity: number,\n    total: number,\n    details: string\n) => {\n    return {name, averageRate, quantity, total, details};\n};\n\nconst columns: string[] = ['Customer', 'Products', 'Total', 'Date', 'Actions'];\n\nconst useStyles = makeStyles({\n    head: {\n        backgroundColor: '#ECEDEF',\n    },\n});\n\ninterface InvoicesTableType {\n    rows: InvoiceType[];\n    onRowDelete: Function;\n    deleting: boolean;\n    loading?: boolean;\n    allLoaded: boolean;\n    onLoadMore: () => void;\n}\n\nconst InvoicesTable = (props: InvoicesTableType) => {\n    const classes = useStyles();\n    return (\n        <>\n            <Paper>\n                <TableContainer>\n                    <Table>\n                        <TableHead classes={{root: classes.head}}>\n                            <TableRow>\n                                {columns.map((column: string, index: number) => (\n                                    <TableCell key={index}>{column}</TableCell>\n                                ))}\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {props.rows.map((row, index) => (\n                                <TableRow\n                                    key={row.id}\n                                    onClick={() => {\n                                        console.log('clicked', index);\n                                    }}\n                                >\n                                    <TableCell>{row.customer.name}</TableCell>\n                                    <TableCell>{row.sales.length}</TableCell>\n                                    <TableCell>{getTotalSalesAmount(row.sales)}</TableCell>\n                                    <TableCell>{row.createdAt}</TableCell>\n                                    <TableCell>\n                                        <IconButton\n                                            onClick={() => {\n                                                props.onRowDelete(index);\n                                            }}\n                                            disabled={props.deleting}\n                                        >\n                                            <DeleteIcon />\n                                        </IconButton>\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                    <Button\n                        onClick={props.onLoadMore}\n                        disabled={props.allLoaded}\n                        loading={props.loading}\n                    >\n                        Load More\n                    </Button>\n                </TableContainer>\n            </Paper>\n        </>\n    );\n};\n\nexport default InvoicesTable;\n","import {SalesType} from './model/invoice';\n\nexport const getTotalSalesAmount = (sales: SalesType[]) => {\n    let total = 0;\n    sales.forEach((sale) => {\n        total += sale.quantity * sale.rate;\n    });\n\n    return total;\n};\n","import {useState, useEffect} from 'react';\nimport api from '../../api';\nimport InvoiceType from '../../model/invoice';\nimport CityType from '../../model/city';\nimport ProductType from '../../model/product';\nimport CustomerType from '../../model/customer';\nlet invoiceDocs: any[] = [];\nconst useInvoicesPage = () => {\n    const [modalOpen, setModalOpen] = useState(false);\n    const [showSuccessMessage, setShowSuccessMessage] = useState(false);\n\n    const [rows, setRows] = useState<InvoiceType[]>([]);\n    const [products, setProducts] = useState<ProductType[]>([]);\n    const [customers, setCustomers] = useState<CustomerType[]>([]);\n    const [deleting, setDeleting] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [loadingProducts, setLoadingProducts] = useState(false);\n    const [loadingCustomers, setLoadingCustomers] = useState(false);\n\n    const openInvoiceModal = () => {\n        setModalOpen(true);\n    };\n\n    const closeInvoiceModal = (created: boolean) => {\n        setModalOpen(false);\n        if (created) setShowSuccessMessage(true);\n    };\n\n    const hideSuccessMessage = () => {\n        setShowSuccessMessage(false);\n    };\n\n    const loadInvoices = () => {\n        setLoading(true);\n        api.invoice.get(\n            (result: any) => {\n                invoiceDocs = [];\n                const items: any[] = [];\n                result.docs.forEach((doc: any) => {\n                    invoiceDocs.push(doc);\n                    const item: any = doc.data();\n                    item.id = doc.id;\n                    items.push(item);\n                });\n                setRows(items);\n                setLoading(false);\n            },\n            () => {\n                setLoading(false);\n            }\n        );\n    };\n\n    const loadProducts = () => {\n        setLoadingProducts(true);\n        api.product.get(\n            (result: any) => {\n                const items: any[] = [];\n                result.docs.forEach((doc: any) => {\n                    const item: any = doc.data();\n                    item.id = doc.id;\n                    items.push(item);\n                });\n                setProducts(items);\n                setLoadingProducts(false);\n            },\n            () => {\n                setLoadingProducts(false);\n            }\n        );\n    };\n\n    const loadCustomers = () => {\n        setLoadingCustomers(true);\n        api.customer.get(\n            (result: any) => {\n                const items: any[] = [];\n                result.docs.forEach((doc: any) => {\n                    const item: any = doc.data();\n                    item.id = doc.id;\n                    items.push(item);\n                });\n                setCustomers(items);\n                setLoadingCustomers(false);\n            },\n            () => {\n                setLoadingCustomers(false);\n            }\n        );\n    };\n\n    const loadMoreInvoices = () => {\n        setLoading(true);\n        api.invoice.get(\n            (result: any) => {\n                const items: any[] = [];\n                result.docs.forEach((doc: any) => {\n                    invoiceDocs.push(doc);\n                    const item: any = doc.data();\n                    item.id = doc.id;\n                    items.push(item);\n                });\n                setRows((prev) => prev.concat(items));\n                setLoading(false);\n            },\n            () => {\n                setLoading(false);\n            },\n            invoiceDocs[invoiceDocs.length - 1]\n        );\n    };\n\n    const addInvoice = (newInvoice: InvoiceType) => {\n        rows.push(newInvoice);\n        rows.sort((a: InvoiceType, b: InvoiceType) => b.createdAt - a.createdAt);\n        setRows(rows);\n    };\n\n    const deleteInvoice = (index: number) => {\n        setDeleting(true);\n        api.invoice.delete(\n            rows[index].id,\n            () => {\n                invoiceDocs.splice(index, 1);\n                const remaining = rows.filter((row, i) => i !== index);\n                setRows(remaining);\n                setDeleting(false);\n            },\n            () => {\n                setDeleting(false);\n            }\n        );\n    };\n\n    const editInvoice = () => {};\n\n    useEffect(() => {\n        loadInvoices();\n        loadProducts();\n        loadCustomers();\n    }, []);\n\n    return {\n        openInvoiceModal,\n        closeInvoiceModal,\n        modalOpen,\n        showSuccessMessage,\n        hideSuccessMessage,\n        deleteInvoice,\n        addInvoice,\n        loadMoreInvoices,\n        deleting,\n        loading,\n        rows,\n        products,\n        customers,\n        loadingProducts,\n        loadingCustomers,\n    };\n};\nexport default useInvoicesPage;\n","import InvoiceType, {SalesType} from '../../model/invoice';\nimport {useState} from 'react';\nimport api from '../../api';\nimport CityType from '../../model/city';\nimport ProductType from '../../model/product';\nimport CustomerType from '../../model/customer';\n\nconst useInvoiceModal = (\n    onAdd: (invoice: InvoiceType) => void,\n    close: (created: boolean) => void\n) => {\n    const [customer, setCustomer] = useState<CustomerType>();\n    const [sales, setSales] = useState<SalesType[]>([{} as SalesType]);\n    const [loading, setLoading] = useState(false);\n\n    const addSale = () => {\n        const newSales = sales.concat({} as SalesType);\n        setSales(newSales);\n    };\n\n    const handleClick = () => {\n        if (!loading) {\n            setLoading(true);\n            const now = Date.now();\n            const newInvoice: InvoiceType = {\n                sales: sales ? sales : [],\n                customer: {id: customer?.id, name: customer?.name},\n                createdAt: now,\n                updatedAt: now,\n            };\n            api.invoice.add(\n                newInvoice,\n                (id: string) => {\n                    setLoading(false);\n                    newInvoice.id = id;\n                    onAdd(newInvoice);\n                    close(true);\n                },\n                () => {\n                    setLoading(false);\n                    //ToDo failed to add data\n                }\n            );\n        }\n    };\n    return {\n        handleClick,\n        sales,\n        setCustomer,\n        loading,\n        addSale,\n    };\n};\n\nexport default useInvoiceModal;\n","import React from 'react';\nimport {Dialog, DialogTitle, FormControl, TextField, Grid} from '@material-ui/core';\nimport Button from '../../components/Button/Button';\nimport useInvoiceModal from './useInvoiceModal';\nimport InvoiceType from '../../model/invoice';\nimport CityType from '../../model/city';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport CustomerType from '../../model/customer';\nimport ProductType from '../../model/product';\n\nexport interface InvoiceModalType {\n    open: boolean;\n    close: (created: boolean) => void;\n    onAdd: (product: InvoiceType) => void;\n    customers: CustomerType[];\n    products: ProductType[];\n}\nconst InvoiceModal = (props: InvoiceModalType) => {\n    const {open, close, onAdd} = props;\n    const {\n        handleClick,\n\n        loading,\n        sales,\n        setCustomer,\n        addSale,\n    } = useInvoiceModal(onAdd, close);\n    return (\n        <Dialog open={open}>\n            <DialogTitle>Add New Invoice</DialogTitle>\n            <Grid container spacing={2} style={{padding: 24}}>\n                <Grid item xs={12}>\n                    <Grid container spacing={2}>\n                        <Grid item xs={12}>\n                            <Autocomplete\n                                id=\"customer-search\"\n                                options={props.customers}\n                                getOptionLabel={(option) => {\n                                    return option.name || 'Dummy Customer';\n                                }}\n                                renderInput={(params) => (\n                                    <TextField\n                                        {...params}\n                                        label=\"Search Customer\"\n                                        variant=\"outlined\"\n                                    />\n                                )}\n                                onChange={(event: any, value: CustomerType | null) => {\n                                    value && setCustomer(value);\n                                }}\n                            />\n                        </Grid>\n                        {sales?.map((sale, index) => (\n                            <Grid item xs={12}>\n                                <Grid container spacing={2}>\n                                    <Grid item xs={6}>\n                                        <Autocomplete\n                                            id=\"product-search\"\n                                            options={props.products}\n                                            getOptionLabel={(option) => {\n                                                return option.name || 'Dummy Product';\n                                            }}\n                                            renderInput={(params) => (\n                                                <TextField\n                                                    {...params}\n                                                    label=\"Search Product\"\n                                                    variant=\"outlined\"\n                                                />\n                                            )}\n                                            onChange={(event: any, value: ProductType | null) => {\n                                                // value && setProduct(value);\n                                                sale.product = value ? value : ({} as ProductType);\n                                            }}\n                                        />\n                                    </Grid>\n                                    <Grid item xs={3}>\n                                        <TextField\n                                            fullWidth\n                                            label=\"Quantity\"\n                                            type=\"number\"\n                                            onChange={(event) => {\n                                                // onQuantityChange(parseInt(event.target.value));\n                                                sale.quantity = parseInt(event.target.value);\n                                            }}\n                                        />\n                                    </Grid>\n                                    <Grid item xs={3}>\n                                        <TextField\n                                            fullWidth\n                                            label=\"Rate\"\n                                            type=\"number\"\n                                            onChange={(event) => {\n                                                // onRateChange(parseInt(event.target.value));\n                                                sale.rate = parseInt(event.target.value);\n                                            }}\n                                        />\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        ))}\n                        <Grid item xs={12}>\n                            <Button\n                                onClick={() => {\n                                    addSale();\n                                }}\n                            >\n                                Add Sale\n                            </Button>\n                        </Grid>\n                        {/* <Grid item xs={12}>\n                            <Autocomplete\n                                id=\"product-search\"\n                                options={props.products}\n                                getOptionLabel={(option) => {\n                                    return option.name || 'Dummy Product';\n                                }}\n                                renderInput={(params) => (\n                                    <TextField\n                                        {...params}\n                                        label=\"Search Product\"\n                                        variant=\"outlined\"\n                                    />\n                                )}\n                                onChange={(event: any, value: ProductType | null) => {\n                                    value && setProduct(value);\n                                }}\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                label=\"Quantity\"\n                                type=\"number\"\n                                onChange={(event) => {\n                                    onQuantityChange(parseInt(event.target.value));\n                                }}\n                            />\n                        </Grid>\n\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                label=\"Rate\"\n                                type=\"number\"\n                                onChange={(event) => {\n                                    onRateChange(parseInt(event.target.value));\n                                }}\n                            />\n                        </Grid> */}\n                    </Grid>\n                </Grid>\n                <Grid item xs={12}>\n                    <Grid container spacing={2} justify={'flex-end'}>\n                        <Grid item>\n                            <Button\n                                variant=\"text\"\n                                onClick={() => {\n                                    close(false);\n                                }}\n                            >\n                                Cancel\n                            </Button>\n                        </Grid>\n                        <Grid item>\n                            <Button onClick={handleClick} loading={loading}>\n                                Add Invoice\n                            </Button>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </Dialog>\n    );\n};\n\nexport default InvoiceModal;\n","import React from 'react';\nimport InvoicesTable from '../../layouts/InvoicesTable/InvoicesTable';\nimport {Typography, Grid, TextField, FormControl, Button} from '@material-ui/core';\nimport useInvoicesPage from './useInvoicesPage';\nimport InvoiceModal from '../../layouts/InvoiceModal/InvoiceModal';\nimport FloatingAlert from '../../components/FloatingAlert/FloatingAlert';\nimport InvoiceType from '../../model/invoice';\n\ninterface InvoicesPageType {\n    numberOfInvoices: number;\n}\nconst InvoicesPage = (props: InvoicesPageType) => {\n    const {\n        openInvoiceModal,\n        closeInvoiceModal,\n        modalOpen,\n        showSuccessMessage,\n        hideSuccessMessage,\n        deleteInvoice,\n        loadMoreInvoices,\n        addInvoice,\n        deleting,\n        loading,\n        rows,\n        products,\n        loadingProducts,\n        customers,\n        loadingCustomers,\n    } = useInvoicesPage();\n    return (\n        <>\n            <Grid container>\n                <Grid item xs={1}></Grid>\n                <Grid item xs={10}>\n                    <Typography variant=\"h4\">Invoices</Typography>\n                    <Grid container alignItems=\"center\">\n                        <Grid item xs={6}>\n                            <FormControl fullWidth>\n                                <TextField variant=\"outlined\" placeholder=\"Search Invoices\" />\n                            </FormControl>\n                        </Grid>\n\n                        <Grid item xs={6}>\n                            <Grid container justify=\"flex-end\">\n                                <Grid item>\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        onClick={openInvoiceModal}\n                                        disabled={loadingProducts || loadingCustomers}\n                                    >\n                                        Add New Invoice\n                                    </Button>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                    <Typography variant=\"body1\">\n                        Showing {rows.length} out of {props.numberOfInvoices} invoices\n                    </Typography>\n                    <InvoicesTable\n                        rows={rows}\n                        onRowDelete={deleteInvoice}\n                        deleting={deleting}\n                        onLoadMore={loadMoreInvoices}\n                        allLoaded={rows.length === props.numberOfInvoices}\n                        loading={loading}\n                    />\n                </Grid>\n            </Grid>\n            <FloatingAlert\n                severity=\"success\"\n                open={showSuccessMessage}\n                onClose={hideSuccessMessage}\n                message=\"Invoice added successfully\"\n            />\n            <InvoiceModal\n                open={modalOpen}\n                close={closeInvoiceModal}\n                aria-labelledby=\"invoice_modal\"\n                onAdd={addInvoice}\n                products={products}\n                customers={customers}\n            />\n        </>\n    );\n};\n\nexport default InvoicesPage;\n","import React, {useState, useEffect} from 'react';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport {\n    Paper,\n    TableContainer,\n    Table,\n    TableHead,\n    TableRow,\n    TableCell,\n    TableSortLabel,\n    TableBody,\n    TablePagination,\n    makeStyles,\n    IconButton,\n} from '@material-ui/core';\nimport {firestore} from 'firebase';\nimport api from '../../api';\nimport ProductType from '../../model/product';\nimport Button from '../../components/Button/Button';\nimport VendorPaymentType from '../../model/vendorPayment';\n\nconst createData = (\n    name: string,\n    averageRate: number,\n    quantity: number,\n    total: number,\n    details: string\n) => {\n    return {name, averageRate, quantity, total, details};\n};\n\nconst columns: string[] = ['Vendor', 'Amount', 'Account', 'Details', 'Date', 'Actions'];\n\nconst useStyles = makeStyles({\n    head: {\n        backgroundColor: '#ECEDEF',\n    },\n});\n\ninterface VendorPaymentsTableType {\n    rows: VendorPaymentType[];\n    onRowDelete: Function;\n    deleting: boolean;\n    loading?: boolean;\n    allLoaded: boolean;\n    onLoadMore: () => void;\n}\n\nconst VendorPaymentsTable = (props: VendorPaymentsTableType) => {\n    const classes = useStyles();\n    return (\n        <>\n            <Paper>\n                <TableContainer>\n                    <Table>\n                        <TableHead classes={{root: classes.head}}>\n                            <TableRow>\n                                {columns.map((column: string, index: number) => (\n                                    <TableCell key={index}>{column}</TableCell>\n                                ))}\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {props.rows.map((row, index) => (\n                                <TableRow\n                                    key={row.id}\n                                    onClick={() => {\n                                        console.log('clicked', index);\n                                    }}\n                                >\n                                    <TableCell>{row.vendor.name}</TableCell>\n                                    <TableCell>{row.amount}</TableCell>\n                                    <TableCell>{row.account.name}</TableCell>\n                                    <TableCell>{row.details}</TableCell>\n                                    <TableCell>{row.createdAt}</TableCell>\n                                    <TableCell>\n                                        <IconButton\n                                            onClick={() => {\n                                                props.onRowDelete(index);\n                                            }}\n                                            disabled={props.deleting}\n                                        >\n                                            <DeleteIcon />\n                                        </IconButton>\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                    <Button\n                        onClick={props.onLoadMore}\n                        disabled={props.allLoaded}\n                        loading={props.loading}\n                    >\n                        Load More\n                    </Button>\n                </TableContainer>\n            </Paper>\n        </>\n    );\n};\n\nexport default VendorPaymentsTable;\n","import {useState, useEffect} from 'react';\nimport api from '../../api';\nimport VendorPaymentType from '../../model/vendorPayment';\nimport CityType from '../../model/city';\nimport ProductType from '../../model/product';\nimport VendorType from '../../model/vendor';\nimport AccountType from '../../model/account';\nlet vendorPaymentDocs: any[] = [];\nconst useVendorPaymentsPage = () => {\n    const [modalOpen, setModalOpen] = useState(false);\n    const [showSuccessMessage, setShowSuccessMessage] = useState(false);\n\n    const [rows, setRows] = useState<VendorPaymentType[]>([]);\n    const [vendors, setVendors] = useState<VendorType[]>([]);\n    const [accounts, setAccounts] = useState<AccountType[]>([]);\n    const [deleting, setDeleting] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [loadingVendors, setLoadingVendors] = useState(false);\n    const [loadingAccounts, setLoadingAccounts] = useState(false);\n\n    const openVendorPaymentModal = () => {\n        setModalOpen(true);\n    };\n\n    const closeVendorPaymentModal = (created: boolean) => {\n        setModalOpen(false);\n        if (created) setShowSuccessMessage(true);\n    };\n\n    const hideSuccessMessage = () => {\n        setShowSuccessMessage(false);\n    };\n\n    const loadVendorPayments = () => {\n        setLoading(true);\n        api.vendorPayment.get(\n            (result: any) => {\n                vendorPaymentDocs = [];\n                const items: any[] = [];\n                result.docs.forEach((doc: any) => {\n                    vendorPaymentDocs.push(doc);\n                    const item: any = doc.data();\n                    item.id = doc.id;\n                    items.push(item);\n                });\n                setRows(items);\n                setLoading(false);\n            },\n            () => {\n                setLoading(false);\n            }\n        );\n    };\n\n    const loadVendors = () => {\n        setLoadingVendors(true);\n        api.vendor.get(\n            (result: any) => {\n                const items: any[] = [];\n                result.docs.forEach((doc: any) => {\n                    const item: any = doc.data();\n                    item.id = doc.id;\n                    items.push(item);\n                });\n                setVendors(items);\n                setLoadingVendors(false);\n            },\n            () => {\n                setLoadingVendors(false);\n            }\n        );\n    };\n\n    const loadAccounts = () => {\n        setLoadingAccounts(true);\n        api.account.get(\n            (result: any) => {\n                const items: any[] = [];\n                result.docs.forEach((doc: any) => {\n                    const item: any = doc.data();\n                    item.id = doc.id;\n                    items.push(item);\n                });\n                setAccounts(items);\n                setLoadingAccounts(false);\n            },\n            () => {\n                setLoadingAccounts(false);\n            }\n        );\n    };\n\n    const loadMoreVendorPayments = () => {\n        setLoading(true);\n        api.vendorPayment.get(\n            (result: any) => {\n                const items: any[] = [];\n                result.docs.forEach((doc: any) => {\n                    vendorPaymentDocs.push(doc);\n                    const item: any = doc.data();\n                    item.id = doc.id;\n                    items.push(item);\n                });\n                setRows((prev) => prev.concat(items));\n                setLoading(false);\n            },\n            () => {\n                setLoading(false);\n            },\n            vendorPaymentDocs[vendorPaymentDocs.length - 1]\n        );\n    };\n\n    const addVendorPayment = (newVendorPayment: VendorPaymentType) => {\n        rows.push(newVendorPayment);\n        rows.sort((a: VendorPaymentType, b: VendorPaymentType) => b.createdAt - a.createdAt);\n        setRows(rows);\n    };\n\n    const deleteVendorPayment = (index: number) => {\n        setDeleting(true);\n        api.vendorPayment.delete(\n            rows[index].id,\n            () => {\n                vendorPaymentDocs.splice(index, 1);\n                const remaining = rows.filter((row, i) => i !== index);\n                setRows(remaining);\n                setDeleting(false);\n            },\n            () => {\n                setDeleting(false);\n            }\n        );\n    };\n\n    const editVendorPayment = () => {};\n\n    useEffect(() => {\n        loadVendorPayments();\n        loadVendors();\n        loadAccounts();\n    }, []);\n\n    return {\n        openVendorPaymentModal,\n        closeVendorPaymentModal,\n        modalOpen,\n        showSuccessMessage,\n        hideSuccessMessage,\n        deleteVendorPayment,\n        addVendorPayment,\n        loadMoreVendorPayments,\n        deleting,\n        loading,\n        rows,\n        vendors,\n        accounts,\n        loadingVendors,\n        loadingAccounts,\n    };\n};\nexport default useVendorPaymentsPage;\n","import VendorPaymentType from '../../model/vendorPayment';\nimport {useState} from 'react';\nimport api from '../../api';\nimport CityType from '../../model/city';\nimport ProductType from '../../model/product';\nimport VendorType from '../../model/vendor';\nimport AccountType from '../../model/account';\n\nconst useVendorPaymentModal = (\n    onAdd: (vendorPayment: VendorPaymentType) => void,\n    close: (created: boolean) => void\n) => {\n    const [vendor, setVendor] = useState<VendorType>();\n    const [account, setAccount] = useState<AccountType>();\n    const [amount, setAmount] = useState(0);\n    const [details, setDetails] = useState('');\n\n    const [loading, setLoading] = useState(false);\n\n    const onAmountChange = (value: number) => {\n        setAmount(value);\n    };\n\n    const onDetailsChange = (value: string) => {\n        setDetails(value);\n    };\n\n    const handleClick = () => {\n        if (!loading) {\n            setLoading(true);\n            const now = Date.now();\n            const newVendorPayment: VendorPaymentType = {\n                vendor: {id: vendor?.id, name: vendor?.name},\n                amount: amount,\n                account: {id: account?.id, name: account?.name},\n                details: details,\n                createdAt: now,\n                updatedAt: now,\n            };\n            api.vendorPayment.add(\n                newVendorPayment,\n                (id: string) => {\n                    setLoading(false);\n                    newVendorPayment.id = id;\n                    onAdd(newVendorPayment);\n                    close(true);\n                },\n                () => {\n                    setLoading(false);\n                    //ToDo failed to add data\n                }\n            );\n        }\n    };\n    return {\n        handleClick,\n        onAmountChange,\n        onDetailsChange,\n        setVendor,\n        setAccount,\n        loading,\n    };\n};\n\nexport default useVendorPaymentModal;\n","import React from 'react';\nimport {Dialog, DialogTitle, FormControl, TextField, Grid} from '@material-ui/core';\nimport Button from '../../components/Button/Button';\nimport useVendorPaymentModal from './useVendorPaymentModal';\nimport VendorPaymentType from '../../model/vendorPayment';\nimport CityType from '../../model/city';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport VendorType from '../../model/vendor';\nimport ProductType from '../../model/product';\nimport AccountType from '../../model/account';\n\nexport interface VendorPaymentModalType {\n    open: boolean;\n    close: (created: boolean) => void;\n    onAdd: (product: VendorPaymentType) => void;\n    vendors: VendorType[];\n    accounts: AccountType[];\n}\nconst VendorPaymentModal = (props: VendorPaymentModalType) => {\n    const {open, close, onAdd} = props;\n    const {\n        handleClick,\n        loading,\n        onAmountChange,\n        onDetailsChange,\n        setVendor,\n        setAccount,\n    } = useVendorPaymentModal(onAdd, close);\n    return (\n        <Dialog open={open}>\n            <DialogTitle>Add New VendorPayment</DialogTitle>\n            <Grid container spacing={2} style={{padding: 24}}>\n                <Grid item xs={12}>\n                    <Grid container spacing={2}>\n                        <Grid item xs={12}>\n                            <Autocomplete\n                                id=\"vendor-search\"\n                                options={props.vendors}\n                                getOptionLabel={(option) => {\n                                    return option.name || 'Dummy Vendor';\n                                }}\n                                renderInput={(params) => (\n                                    <TextField\n                                        {...params}\n                                        label=\"Search Vendor\"\n                                        variant=\"outlined\"\n                                    />\n                                )}\n                                onChange={(event: any, value: VendorType | null) => {\n                                    value && setVendor(value);\n                                }}\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <Autocomplete\n                                id=\"account-search\"\n                                options={props.accounts}\n                                getOptionLabel={(option) => {\n                                    return option.name || 'Dummy Account';\n                                }}\n                                renderInput={(params) => (\n                                    <TextField\n                                        {...params}\n                                        label=\"Search Account\"\n                                        variant=\"outlined\"\n                                    />\n                                )}\n                                onChange={(event: any, value: AccountType | null) => {\n                                    value && setAccount(value);\n                                }}\n                            />\n                        </Grid>\n\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                label=\"Amount\"\n                                type=\"number\"\n                                onChange={(event) => {\n                                    onAmountChange(parseInt(event.target.value));\n                                }}\n                            />\n                        </Grid>\n\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                label=\"Details\"\n                                multiline\n                                rows={3}\n                                onChange={(event) => {\n                                    onDetailsChange(event.target.value);\n                                }}\n                            />\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid item xs={12}>\n                    <Grid container spacing={2} justify={'flex-end'}>\n                        <Grid item>\n                            <Button\n                                variant=\"text\"\n                                onClick={() => {\n                                    close(false);\n                                }}\n                            >\n                                Cancel\n                            </Button>\n                        </Grid>\n                        <Grid item>\n                            <Button onClick={handleClick} loading={loading}>\n                                Add VendorPayment\n                            </Button>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </Dialog>\n    );\n};\n\nexport default VendorPaymentModal;\n","import React from 'react';\nimport VendorPaymentsTable from '../../layouts/VendorPaymentsTable/VendorPaymentsTable';\nimport {Typography, Grid, TextField, FormControl, Button} from '@material-ui/core';\nimport useVendorPaymentsPage from './useVendorPaymentsPage';\nimport VendorPaymentModal from '../../layouts/VendorPaymentModal/VendorPaymentModal';\nimport FloatingAlert from '../../components/FloatingAlert/FloatingAlert';\nimport VendorPaymentType from '../../model/vendorPayment';\n\ninterface VendorPaymentsPageType {\n    numberOfVendorPayments: number;\n}\nconst VendorPaymentsPage = (props: VendorPaymentsPageType) => {\n    const {\n        openVendorPaymentModal,\n        closeVendorPaymentModal,\n        modalOpen,\n        showSuccessMessage,\n        hideSuccessMessage,\n        deleteVendorPayment,\n        loadMoreVendorPayments,\n        addVendorPayment,\n        deleting,\n        loading,\n        rows,\n        vendors,\n        accounts,\n        loadingVendors,\n        loadingAccounts,\n    } = useVendorPaymentsPage();\n    return (\n        <>\n            <Grid container>\n                <Grid item xs={1}></Grid>\n                <Grid item xs={10}>\n                    <Typography variant=\"h4\">VendorPayments</Typography>\n                    <Grid container alignItems=\"center\">\n                        <Grid item xs={6}>\n                            <FormControl fullWidth>\n                                <TextField variant=\"outlined\" placeholder=\"Search VendorPayments\" />\n                            </FormControl>\n                        </Grid>\n\n                        <Grid item xs={6}>\n                            <Grid container justify=\"flex-end\">\n                                <Grid item>\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        onClick={openVendorPaymentModal}\n                                        disabled={loadingAccounts || loadingVendors}\n                                    >\n                                        Add New VendorPayment\n                                    </Button>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                    <Typography variant=\"body1\">\n                        Showing {rows.length} out of {props.numberOfVendorPayments} vendorPayments\n                    </Typography>\n                    <VendorPaymentsTable\n                        rows={rows}\n                        onRowDelete={deleteVendorPayment}\n                        deleting={deleting}\n                        onLoadMore={loadMoreVendorPayments}\n                        allLoaded={rows.length === props.numberOfVendorPayments}\n                        loading={loading}\n                    />\n                </Grid>\n            </Grid>\n            <FloatingAlert\n                severity=\"success\"\n                open={showSuccessMessage}\n                onClose={hideSuccessMessage}\n                message=\"VendorPayment added successfully\"\n            />\n            <VendorPaymentModal\n                open={modalOpen}\n                close={closeVendorPaymentModal}\n                aria-labelledby=\"vendorPayment_modal\"\n                onAdd={addVendorPayment}\n                vendors={vendors}\n                accounts={accounts}\n            />\n        </>\n    );\n};\n\nexport default VendorPaymentsPage;\n","import React, {useState, useEffect} from 'react';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport {\n    Paper,\n    TableContainer,\n    Table,\n    TableHead,\n    TableRow,\n    TableCell,\n    TableSortLabel,\n    TableBody,\n    TablePagination,\n    makeStyles,\n    IconButton,\n} from '@material-ui/core';\nimport {firestore} from 'firebase';\nimport api from '../../api';\nimport ProductType from '../../model/product';\nimport Button from '../../components/Button/Button';\nimport CustomerPaymentType from '../../model/customerPayment';\n\nconst createData = (\n    name: string,\n    averageRate: number,\n    quantity: number,\n    total: number,\n    details: string\n) => {\n    return {name, averageRate, quantity, total, details};\n};\n\nconst columns: string[] = ['Customer', 'Amount', 'Account', 'Details', 'Date', 'Actions'];\n\nconst useStyles = makeStyles({\n    head: {\n        backgroundColor: '#ECEDEF',\n    },\n});\n\ninterface CustomerPaymentsTableType {\n    rows: CustomerPaymentType[];\n    onRowDelete: Function;\n    deleting: boolean;\n    loading?: boolean;\n    allLoaded: boolean;\n    onLoadMore: () => void;\n}\n\nconst CustomerPaymentsTable = (props: CustomerPaymentsTableType) => {\n    const classes = useStyles();\n    return (\n        <>\n            <Paper>\n                <TableContainer>\n                    <Table>\n                        <TableHead classes={{root: classes.head}}>\n                            <TableRow>\n                                {columns.map((column: string, index: number) => (\n                                    <TableCell key={index}>{column}</TableCell>\n                                ))}\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {props.rows.map((row, index) => (\n                                <TableRow\n                                    key={row.id}\n                                    onClick={() => {\n                                        console.log('clicked', index);\n                                    }}\n                                >\n                                    <TableCell>{row.customer.name}</TableCell>\n                                    <TableCell>{row.amount}</TableCell>\n                                    <TableCell>{row.account.name}</TableCell>\n                                    <TableCell>{row.details}</TableCell>\n                                    <TableCell>{row.createdAt}</TableCell>\n                                    <TableCell>\n                                        <IconButton\n                                            onClick={() => {\n                                                props.onRowDelete(index);\n                                            }}\n                                            disabled={props.deleting}\n                                        >\n                                            <DeleteIcon />\n                                        </IconButton>\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                    <Button\n                        onClick={props.onLoadMore}\n                        disabled={props.allLoaded}\n                        loading={props.loading}\n                    >\n                        Load More\n                    </Button>\n                </TableContainer>\n            </Paper>\n        </>\n    );\n};\n\nexport default CustomerPaymentsTable;\n","import {useState, useEffect} from 'react';\nimport api from '../../api';\nimport CustomerPaymentType from '../../model/customerPayment';\nimport CityType from '../../model/city';\nimport ProductType from '../../model/product';\nimport CustomerType from '../../model/customer';\nimport AccountType from '../../model/account';\nlet customerPaymentDocs: any[] = [];\nconst useCustomerPaymentsPage = () => {\n    const [modalOpen, setModalOpen] = useState(false);\n    const [showSuccessMessage, setShowSuccessMessage] = useState(false);\n\n    const [rows, setRows] = useState<CustomerPaymentType[]>([]);\n    const [customers, setCustomers] = useState<CustomerType[]>([]);\n    const [accounts, setAccounts] = useState<AccountType[]>([]);\n    const [deleting, setDeleting] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [loadingCustomers, setLoadingCustomers] = useState(false);\n    const [loadingAccounts, setLoadingAccounts] = useState(false);\n\n    const openCustomerPaymentModal = () => {\n        setModalOpen(true);\n    };\n\n    const closeCustomerPaymentModal = (created: boolean) => {\n        setModalOpen(false);\n        if (created) setShowSuccessMessage(true);\n    };\n\n    const hideSuccessMessage = () => {\n        setShowSuccessMessage(false);\n    };\n\n    const loadCustomerPayments = () => {\n        setLoading(true);\n        api.customerPayment.get(\n            (result: any) => {\n                customerPaymentDocs = [];\n                const items: any[] = [];\n                result.docs.forEach((doc: any) => {\n                    customerPaymentDocs.push(doc);\n                    const item: any = doc.data();\n                    item.id = doc.id;\n                    items.push(item);\n                });\n                setRows(items);\n                setLoading(false);\n            },\n            () => {\n                setLoading(false);\n            }\n        );\n    };\n\n    const loadCustomers = () => {\n        setLoadingCustomers(true);\n        api.customer.get(\n            (result: any) => {\n                const items: any[] = [];\n                result.docs.forEach((doc: any) => {\n                    const item: any = doc.data();\n                    item.id = doc.id;\n                    items.push(item);\n                });\n                setCustomers(items);\n                setLoadingCustomers(false);\n            },\n            () => {\n                setLoadingCustomers(false);\n            }\n        );\n    };\n\n    const loadAccounts = () => {\n        setLoadingAccounts(true);\n        api.account.get(\n            (result: any) => {\n                const items: any[] = [];\n                result.docs.forEach((doc: any) => {\n                    const item: any = doc.data();\n                    item.id = doc.id;\n                    items.push(item);\n                });\n                setAccounts(items);\n                setLoadingAccounts(false);\n            },\n            () => {\n                setLoadingAccounts(false);\n            }\n        );\n    };\n\n    const loadMoreCustomerPayments = () => {\n        setLoading(true);\n        api.customerPayment.get(\n            (result: any) => {\n                const items: any[] = [];\n                result.docs.forEach((doc: any) => {\n                    customerPaymentDocs.push(doc);\n                    const item: any = doc.data();\n                    item.id = doc.id;\n                    items.push(item);\n                });\n                setRows((prev) => prev.concat(items));\n                setLoading(false);\n            },\n            () => {\n                setLoading(false);\n            },\n            customerPaymentDocs[customerPaymentDocs.length - 1]\n        );\n    };\n\n    const addCustomerPayment = (newCustomerPayment: CustomerPaymentType) => {\n        rows.push(newCustomerPayment);\n        rows.sort((a: CustomerPaymentType, b: CustomerPaymentType) => b.createdAt - a.createdAt);\n        setRows(rows);\n    };\n\n    const deleteCustomerPayment = (index: number) => {\n        setDeleting(true);\n        api.customerPayment.delete(\n            rows[index].id,\n            () => {\n                customerPaymentDocs.splice(index, 1);\n                const remaining = rows.filter((row, i) => i !== index);\n                setRows(remaining);\n                setDeleting(false);\n            },\n            () => {\n                setDeleting(false);\n            }\n        );\n    };\n\n    const editCustomerPayment = () => {};\n\n    useEffect(() => {\n        loadCustomerPayments();\n        loadCustomers();\n        loadAccounts();\n    }, []);\n\n    return {\n        openCustomerPaymentModal,\n        closeCustomerPaymentModal,\n        modalOpen,\n        showSuccessMessage,\n        hideSuccessMessage,\n        deleteCustomerPayment,\n        addCustomerPayment,\n        loadMoreCustomerPayments,\n        deleting,\n        loading,\n        rows,\n        customers,\n        accounts,\n        loadingCustomers,\n        loadingAccounts,\n    };\n};\nexport default useCustomerPaymentsPage;\n","import CustomerPaymentType from '../../model/customerPayment';\nimport {useState} from 'react';\nimport api from '../../api';\nimport CityType from '../../model/city';\nimport ProductType from '../../model/product';\nimport CustomerType from '../../model/customer';\nimport AccountType from '../../model/account';\n\nconst useCustomerPaymentModal = (\n    onAdd: (customerPayment: CustomerPaymentType) => void,\n    close: (created: boolean) => void\n) => {\n    const [customer, setCustomer] = useState<CustomerType>();\n    const [account, setAccount] = useState<AccountType>();\n    const [amount, setAmount] = useState(0);\n    const [details, setDetails] = useState('');\n\n    const [loading, setLoading] = useState(false);\n\n    const onAmountChange = (value: number) => {\n        setAmount(value);\n    };\n\n    const onDetailsChange = (value: string) => {\n        setDetails(value);\n    };\n\n    const handleClick = () => {\n        if (!loading) {\n            setLoading(true);\n            const now = Date.now();\n            const newCustomerPayment: CustomerPaymentType = {\n                customer: {id: customer?.id, name: customer?.name},\n                amount: amount,\n                account: {id: account?.id, name: account?.name},\n                details: details,\n                createdAt: now,\n                updatedAt: now,\n            };\n            api.customerPayment.add(\n                newCustomerPayment,\n                (id: string) => {\n                    setLoading(false);\n                    newCustomerPayment.id = id;\n                    onAdd(newCustomerPayment);\n                    close(true);\n                },\n                () => {\n                    setLoading(false);\n                    //ToDo failed to add data\n                }\n            );\n        }\n    };\n    return {\n        handleClick,\n        onAmountChange,\n        onDetailsChange,\n        setCustomer,\n        setAccount,\n        loading,\n    };\n};\n\nexport default useCustomerPaymentModal;\n","import React from 'react';\nimport {Dialog, DialogTitle, FormControl, TextField, Grid} from '@material-ui/core';\nimport Button from '../../components/Button/Button';\nimport useCustomerPaymentModal from './useCustomerPaymentModal';\nimport CustomerPaymentType from '../../model/customerPayment';\nimport CityType from '../../model/city';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport CustomerType from '../../model/customer';\nimport ProductType from '../../model/product';\nimport AccountType from '../../model/account';\n\nexport interface CustomerPaymentModalType {\n    open: boolean;\n    close: (created: boolean) => void;\n    onAdd: (product: CustomerPaymentType) => void;\n    customers: CustomerType[];\n    accounts: AccountType[];\n}\nconst CustomerPaymentModal = (props: CustomerPaymentModalType) => {\n    const {open, close, onAdd} = props;\n    const {\n        handleClick,\n        loading,\n        onAmountChange,\n        onDetailsChange,\n        setCustomer,\n        setAccount,\n    } = useCustomerPaymentModal(onAdd, close);\n    return (\n        <Dialog open={open}>\n            <DialogTitle>Add New CustomerPayment</DialogTitle>\n            <Grid container spacing={2} style={{padding: 24}}>\n                <Grid item xs={12}>\n                    <Grid container spacing={2}>\n                        <Grid item xs={12}>\n                            <Autocomplete\n                                id=\"customer-search\"\n                                options={props.customers}\n                                getOptionLabel={(option) => {\n                                    return option.name || 'Dummy Customer';\n                                }}\n                                renderInput={(params) => (\n                                    <TextField\n                                        {...params}\n                                        label=\"Search Customer\"\n                                        variant=\"outlined\"\n                                    />\n                                )}\n                                onChange={(event: any, value: CustomerType | null) => {\n                                    value && setCustomer(value);\n                                }}\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <Autocomplete\n                                id=\"account-search\"\n                                options={props.accounts}\n                                getOptionLabel={(option) => {\n                                    return option.name || 'Dummy Account';\n                                }}\n                                renderInput={(params) => (\n                                    <TextField\n                                        {...params}\n                                        label=\"Search Account\"\n                                        variant=\"outlined\"\n                                    />\n                                )}\n                                onChange={(event: any, value: AccountType | null) => {\n                                    value && setAccount(value);\n                                }}\n                            />\n                        </Grid>\n\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                label=\"Amount\"\n                                type=\"number\"\n                                onChange={(event) => {\n                                    onAmountChange(parseInt(event.target.value));\n                                }}\n                            />\n                        </Grid>\n\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                label=\"Details\"\n                                multiline\n                                rows={3}\n                                onChange={(event) => {\n                                    onDetailsChange(event.target.value);\n                                }}\n                            />\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid item xs={12}>\n                    <Grid container spacing={2} justify={'flex-end'}>\n                        <Grid item>\n                            <Button\n                                variant=\"text\"\n                                onClick={() => {\n                                    close(false);\n                                }}\n                            >\n                                Cancel\n                            </Button>\n                        </Grid>\n                        <Grid item>\n                            <Button onClick={handleClick} loading={loading}>\n                                Add CustomerPayment\n                            </Button>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </Dialog>\n    );\n};\n\nexport default CustomerPaymentModal;\n","import React from 'react';\nimport CustomerPaymentsTable from '../../layouts/CustomerPaymentsTable/CustomerPaymentsTable';\nimport {Typography, Grid, TextField, FormControl, Button} from '@material-ui/core';\nimport useCustomerPaymentsPage from './useCustomerPaymentsPage';\nimport CustomerPaymentModal from '../../layouts/CustomerPaymentModal/CustomerPaymentModal';\nimport FloatingAlert from '../../components/FloatingAlert/FloatingAlert';\nimport CustomerPaymentType from '../../model/customerPayment';\n\ninterface CustomerPaymentsPageType {\n    numberOfCustomerPayments: number;\n}\nconst CustomerPaymentsPage = (props: CustomerPaymentsPageType) => {\n    const {\n        openCustomerPaymentModal,\n        closeCustomerPaymentModal,\n        modalOpen,\n        showSuccessMessage,\n        hideSuccessMessage,\n        deleteCustomerPayment,\n        loadMoreCustomerPayments,\n        addCustomerPayment,\n        deleting,\n        loading,\n        rows,\n        customers,\n        accounts,\n        loadingCustomers,\n        loadingAccounts,\n    } = useCustomerPaymentsPage();\n    return (\n        <>\n            <Grid container>\n                <Grid item xs={1}></Grid>\n                <Grid item xs={10}>\n                    <Typography variant=\"h4\">CustomerPayments</Typography>\n                    <Grid container alignItems=\"center\">\n                        <Grid item xs={6}>\n                            <FormControl fullWidth>\n                                <TextField\n                                    variant=\"outlined\"\n                                    placeholder=\"Search CustomerPayments\"\n                                />\n                            </FormControl>\n                        </Grid>\n\n                        <Grid item xs={6}>\n                            <Grid container justify=\"flex-end\">\n                                <Grid item>\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        onClick={openCustomerPaymentModal}\n                                        disabled={loadingAccounts || loadingCustomers}\n                                    >\n                                        Add New CustomerPayment\n                                    </Button>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                    <Typography variant=\"body1\">\n                        Showing {rows.length} out of {props.numberOfCustomerPayments}{' '}\n                        customerPayments\n                    </Typography>\n                    <CustomerPaymentsTable\n                        rows={rows}\n                        onRowDelete={deleteCustomerPayment}\n                        deleting={deleting}\n                        onLoadMore={loadMoreCustomerPayments}\n                        allLoaded={rows.length === props.numberOfCustomerPayments}\n                        loading={loading}\n                    />\n                </Grid>\n            </Grid>\n            <FloatingAlert\n                severity=\"success\"\n                open={showSuccessMessage}\n                onClose={hideSuccessMessage}\n                message=\"CustomerPayment added successfully\"\n            />\n            <CustomerPaymentModal\n                open={modalOpen}\n                close={closeCustomerPaymentModal}\n                aria-labelledby=\"customerPayment_modal\"\n                onAdd={addCustomerPayment}\n                customers={customers}\n                accounts={accounts}\n            />\n        </>\n    );\n};\n\nexport default CustomerPaymentsPage;\n","import React from 'react';\nimport {Route, Switch} from 'react-router-dom';\nimport {Typography} from '@material-ui/core';\nimport ProductsPage from '../views/Products/ProductsPage';\nimport CustomersPage from '../views/Customers/CustomersPage';\nimport CitiesPage from '../views/Cities/CitiesPage';\nimport VendorsPage from '../views/Vendors/VendorsPage';\nimport AccountsPage from '../views/Accounts/AccountsPage';\nimport PurchasesPage from '../views/Purchases/PurchasesPage';\nimport InvoicesPage from '../views/Invoices/InvoicesPage';\nimport VendorPaymentsPage from '../views/VendorPayments/VendorPaymentsPage';\nimport CustomerPaymentsPage from '../views/CustomerPaymentsPage/CustomerPaymentsPage';\n\ninterface RoutesType {\n    products: number;\n    purchases: number;\n    cities: number;\n    customers: number;\n    vendors: number;\n    accounts: number;\n    invoices: number;\n    vendorPayments: number;\n    customerPayments: number;\n}\nconst Routes = (props: RoutesType) => {\n    const routes = [\n        {\n            path: '/',\n            component: <ProductsPage numberOfProducts={props.products} />,\n        },\n        {\n            path: '/products',\n            component: <ProductsPage numberOfProducts={props.products} />,\n        },\n        {\n            path: '/purchases',\n            component: <PurchasesPage numberOfPurchases={props.purchases} />,\n        },\n        {\n            path: '/payments/vendors',\n            component: <VendorPaymentsPage numberOfVendorPayments={props.vendorPayments} />,\n        },\n        {\n            path: '/payments/customers',\n            component: <CustomerPaymentsPage numberOfCustomerPayments={props.customerPayments} />,\n        },\n        {\n            path: '/invoices',\n            component: <InvoicesPage numberOfInvoices={props.invoices} />,\n        },\n        {\n            path: '/customers',\n            component: <CustomersPage numberOfCustomers={props.customers} />,\n        },\n        {\n            path: '/vendors',\n            component: <VendorsPage numberOfVendors={props.vendors} />,\n        },\n        {\n            path: '/accounts',\n            component: <AccountsPage numberOfAccounts={props.accounts} />,\n        },\n        {\n            path: '/cities',\n            component: <CitiesPage numberOfCities={props.cities} />,\n        },\n        {\n            path: '*',\n            component: <Typography variant=\"h3\">Some Page</Typography>,\n        },\n    ];\n\n    return (\n        <Switch>\n            {routes.map((route, index) => (\n                <Route exact path={route.path} key={index}>\n                    {route.component}\n                </Route>\n            ))}\n        </Switch>\n    );\n};\n\nexport default Routes;\n","import React from 'react';\nimport {Button} from '@material-ui/core';\nimport firebase from 'firebase';\n\nconst LogoutButton = () => {\n    const logout = () => {\n        firebase\n            .auth()\n            .signOut()\n            .then(() => {\n                console.log('succesfully signed out');\n            })\n            .catch((error) => {\n                console.log('error', error);\n            });\n    };\n    return (\n        <Button fullWidth variant=\"text\" color=\"primary\" onClick={logout}>\n            Logout\n        </Button>\n    );\n};\n\nexport default LogoutButton;\n","import {useEffect, useState} from 'react';\nimport api from '../../api';\n\nconst useWelcome = () => {\n    const [numberOfProducts, setNumberOfProducts] = useState(0);\n    const [numberOfCities, setNumberOfCities] = useState(0);\n    const [numberOfCustomers, setNumberOfCustomers] = useState(0);\n    const [numberOfVendors, setNumberOfVendors] = useState(0);\n    const [numberOfAccounts, setNumberOfAccounts] = useState(0);\n    const [numberOfPurchases, setNumberOfPurchases] = useState(0);\n    const [numberOfInvoices, setNumberOfInvoices] = useState(0);\n    const [numberOfVendorPayments, setNumberOfVendorPayments] = useState(0);\n    const [numberOfCustomerPayments, setNumberOfCustomerPayments] = useState(0);\n\n    useEffect(() => {\n        api.counts.get((snapshot) => {\n            setNumberOfProducts(\n                snapshot.docs[0].data().products ? snapshot.docs[0].data().products : 0\n            );\n            setNumberOfCities(snapshot.docs[0].data().cities ? snapshot.docs[0].data().cities : 0);\n            setNumberOfCustomers(\n                snapshot.docs[0].data().customers ? snapshot.docs[0].data().customers : 0\n            );\n            setNumberOfVendors(\n                snapshot.docs[0].data().vendors ? snapshot.docs[0].data().vendors : 0\n            );\n            setNumberOfAccounts(\n                snapshot.docs[0].data().accounts ? snapshot.docs[0].data().accounts : 0\n            );\n            setNumberOfPurchases(\n                snapshot.docs[0].data().purchases ? snapshot.docs[0].data().purchases : 0\n            );\n            setNumberOfVendorPayments(\n                snapshot.docs[0].data().vendorPayments ? snapshot.docs[0].data().vendorPayments : 0\n            );\n            setNumberOfCustomerPayments(\n                snapshot.docs[0].data().customerPayments\n                    ? snapshot.docs[0].data().customerPayments\n                    : 0\n            );\n            setNumberOfInvoices(\n                snapshot.docs[0].data().invoices ? snapshot.docs[0].data().invoices : 0\n            );\n        });\n    }, []);\n\n    return {\n        numberOfProducts,\n        numberOfCities,\n        numberOfCustomers,\n        numberOfVendors,\n        numberOfAccounts,\n        numberOfPurchases,\n        numberOfInvoices,\n        numberOfVendorPayments,\n        numberOfCustomerPayments,\n    };\n};\n\nexport default useWelcome;\n","import React from 'react';\nimport {Grid, Typography} from '@material-ui/core';\nimport NavigationBarLayout from '../NavigationBarLayout/NavigationBarLayout';\nimport {BrowserRouter} from 'react-router-dom';\nimport Routes from '../../Routes/Routes';\nimport LogoutButton from '../../components/LogoutButton/LogoutButton';\nimport useWelcome from './useWelcome';\n\nconst Welcome = () => {\n    const {\n        numberOfProducts,\n        numberOfCities,\n        numberOfCustomers,\n        numberOfVendors,\n        numberOfAccounts,\n        numberOfPurchases,\n        numberOfInvoices,\n        numberOfVendorPayments,\n        numberOfCustomerPayments,\n    } = useWelcome();\n    return (\n        <>\n            <Grid container style={{height: '100vh', backgroundColor: '#FFFFFF'}}>\n                <BrowserRouter basename=\"/bilalshop\">\n                    <Grid item xs={2}>\n                        <div style={{padding: 16}}>\n                            <Typography variant=\"h5\" align={'center'}>\n                                Bilal Shop\n                            </Typography>\n                            <LogoutButton />\n                        </div>\n\n                        <NavigationBarLayout\n                            products={numberOfProducts}\n                            cities={numberOfCities}\n                            customers={numberOfCustomers}\n                            vendors={numberOfVendors}\n                            accounts={numberOfAccounts}\n                            purchases={numberOfPurchases}\n                            invoices={numberOfInvoices}\n                            vendorPayments={numberOfVendorPayments}\n                            customerPayments={numberOfCustomerPayments}\n                        />\n                    </Grid>\n                    <Grid item xs={10}>\n                        <Routes\n                            products={numberOfProducts}\n                            cities={numberOfCities}\n                            customers={numberOfCustomers}\n                            vendors={numberOfVendors}\n                            accounts={numberOfAccounts}\n                            purchases={numberOfPurchases}\n                            invoices={numberOfInvoices}\n                            vendorPayments={numberOfVendorPayments}\n                            customerPayments={numberOfCustomerPayments}\n                        />\n                    </Grid>\n                </BrowserRouter>\n            </Grid>\n        </>\n    );\n};\n\nexport default Welcome;\n","import React, {useState, useEffect} from 'react';\nimport LoginComponent from './components/LoginComponent/LoginComponent';\nimport {CircularProgress} from '@material-ui/core';\nimport firebase from 'firebase';\nimport Welcome from './layouts/Welcome/Welcome';\n\nconst App = () => {\n    const [loading, setloading] = useState(true);\n    const [signedIn, setSignedIn] = useState(false);\n\n    useEffect(() => {\n        firebase.auth().onAuthStateChanged((user: any) => {\n            if (user) {\n                setSignedIn(true);\n            } else {\n                setSignedIn(false);\n            }\n            setloading(false);\n        });\n    }, []);\n\n    return loading ? <CircularProgress /> : signedIn ? <Welcome /> : <LoginComponent />;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {createMuiTheme, Theme} from '@material-ui/core/styles';\n\nconst primary: Theme = createMuiTheme({\n    props: {\n        MuiTextField: {\n            variant: 'outlined',\n        },\n        MuiButton: {\n            color: 'primary',\n            variant: 'contained',\n        },\n    },\n});\n\nexport default primary;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport firebase from 'firebase';\nimport {ThemeProvider} from '@material-ui/core';\nimport primary from './theme';\n\nconst config = {\n    apiKey: 'AIzaSyAN6y59cHMfZiXomgcBbIVh5p1m0yLQshI',\n    // authDomain: 'bilalshop-b7685.firebaseapp.com',\n    projectId: 'bilalshop-b7685',\n    // ...\n};\nfirebase.initializeApp(config);\n\nReactDOM.render(\n    <React.StrictMode>\n        <ThemeProvider theme={primary}>\n            <App />\n        </ThemeProvider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}