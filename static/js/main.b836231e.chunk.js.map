{"version":3,"sources":["components/LoginComponent/LoginComponent.tsx","components/NavigationItem/NavigationItem.tsx","components/NavigationBar/NavigationBar.tsx","layouts/NavigationBarLayout/NavigationBarLayout.tsx","components/Button/Button.tsx","layouts/ProductsTable/ProductsTable.tsx","api.ts","views/Products/useProductsPage.ts","layouts/ProductModal/useProductModal.ts","layouts/ProductModal/ProductModal.tsx","components/FloatingAlert/FloatingAlert.tsx","views/Products/ProductsPage.tsx","layouts/CustomersTable/CustomersTable.tsx","views/Customers/useCustomersPage.ts","layouts/CustomerModal/useCustomerModal.ts","layouts/CustomerModal/CustomerModal.tsx","views/Customers/CustomersPage.tsx","views/Cities/useCitiesPage.ts","views/Cities/CitiesPage.tsx","layouts/VendorsTable/VendorsTable.tsx","views/Vendors/useVendorsPage.ts","layouts/VendorModal/useVendorModal.ts","layouts/VendorModal/VendorModal.tsx","views/Vendors/VendorsPage.tsx","layouts/AccountsTable/AccountsTable.tsx","views/Accounts/useAccountsPage.ts","layouts/AccountModal/useAccountModal.ts","layouts/AccountModal/AccountModal.tsx","views/Accounts/AccountsPage.tsx","layouts/PurchasesTable/PurchasesTable.tsx","views/Purchases/usePurchasesPage.ts","layouts/PurchaseModal/usePurchaseModal.ts","layouts/PurchaseModal/PurchaseModal.tsx","views/Purchases/PurchasesPage.tsx","Routes/Routes.tsx","components/LogoutButton/LogoutButton.tsx","layouts/Welcome/useWelcome.ts","layouts/Welcome/Welcome.tsx","App.tsx","serviceWorker.ts","theme.ts","index.tsx"],"names":["LoginComponent","useState","email","setEmail","password","setPassword","error","setError","Grid","container","justify","alignItems","direction","style","height","backgroundColor","item","md","sm","xs","Paper","padding","margin","spacing","Typography","variant","color","TextField","fullWidth","label","type","onChange","event","target","value","onClick","firebase","auth","signInWithEmailAndPassword","then","catch","NavigationItem","props","history","useHistory","ListItem","button","push","link","selected","divider","ListItemText","primary","text","NavigationBar","List","items","map","index","key","NavigationBarLayout","withRouter","navigationItems","products","location","pathname","purchases","vendors","customers","accounts","cities","Button","loading","disabled","others","startIcon","CircularProgress","size","children","columns","useStyles","makeStyles","head","ProductsTable","classes","TableContainer","Table","TableHead","root","TableRow","column","TableCell","TableBody","rows","row","id","console","log","name","rate","quantity","details","IconButton","onRowDelete","deleting","onLoadMore","allLoaded","api","product","get","successCallback","errorCallback","startAfter","query","firestore","collection","limit","orderBy","result","add","data","success","newProductDoc","delete","productId","doc","customer","newCustomerDoc","customerId","purchase","newPurchaseDoc","purchaseId","vendor","city","newCityDoc","cityId","account","accountId","counts","getSnapshot","onSnapshot","snapshot","productDocs","useProductsPage","modalOpen","setModalOpen","showSuccessMessage","setShowSuccessMessage","setRows","setDeleting","setLoading","useEffect","docs","forEach","openProductModal","closeProductModal","created","hideSuccessMessage","deleteProduct","splice","remaining","filter","i","addProduct","newProduct","sort","a","b","createdAt","loadMoreProducts","prev","concat","length","useProductModal","onAdd","close","setName","setDetails","handleClick","now","Date","updatedAt","onNameChange","onDetailsChange","ProductModal","open","Dialog","DialogTitle","multiline","FloatingAlert","Snackbar","autoHideDuration","onClose","reason","anchorOrigin","vertical","horizontal","severity","message","ProductsPage","FormControl","placeholder","numberOfProducts","aria-labelledby","CustomersTable","mobile","debt","customerDocs","useCustomersPage","setCities","loadingCities","setLoadingCities","openCustomerModal","closeCustomerModal","deleteCustomer","addCustomer","newCustomer","loadMoreCustomers","addCity","newCity","useCustomerModal","setMobile","setCity","onMobileChange","CustomerModal","Autocomplete","options","getOptionLabel","option","renderInput","params","CustomersPage","numberOfCustomers","cityDocs","useCitiesPage","adding","setAdding","deleteCity","oldRows","CitiesPage","VendorsTable","vendorDocs","useVendorsPage","openVendorModal","closeVendorModal","deleteVendor","addVendor","newVendor","loadMoreVendors","useVendorModal","VendorModal","VendorsPage","numberOfVendors","AccountsTable","amount","accountDocs","useAccountsPage","openAccountModal","closeAccountModal","deleteAccount","addAccount","newAccount","loadMoreAccounts","useAccountModal","setType","setAmount","onTypeChange","onAmountChange","AccountModal","parseInt","AccountsPage","numberOfAccounts","PurchasesTable","purchaseDocs","usePurchasesPage","setProducts","setVendors","loadingProducts","setLoadingProducts","loadingVendors","setLoadingVendors","openPurchaseModal","closePurchaseModal","deletePurchase","addPurchase","newPurchase","loadMorePurchases","usePurchaseModal","setProduct","setVendor","setQuantity","setRate","onQuantityChange","onRateChange","PurchaseModal","PurchasesPage","numberOfPurchases","Routes","routes","path","component","numberOfCities","route","exact","LogoutButton","signOut","useWelcome","setNumberOfProducts","setNumberOfCities","setNumberOfCustomers","setNumberOfVendors","setNumberOfAccounts","setNumberOfPurchases","Welcome","basename","align","App","setloading","signedIn","setSignedIn","onAuthStateChanged","user","Boolean","window","hostname","match","createMuiTheme","MuiTextField","MuiButton","initializeApp","apiKey","projectId","ReactDOM","render","StrictMode","ThemeProvider","theme","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b836231e.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport {\n    FormControl,\n    Button,\n    TextField,\n    makeStyles,\n    Grid,\n    Typography,\n    Paper,\n} from '@material-ui/core';\nimport firebase from 'firebase';\n\nconst LoginComponent = () => {\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const [error, setError] = useState('');\n\n    const handleClick = () => {\n        setError('');\n        firebase\n            .auth()\n            .signInWithEmailAndPassword(email, password)\n            .then(() => {})\n            .catch(function (error) {\n                setError('Invalid User');\n            });\n    };\n\n    return (\n        <Grid\n            container\n            justify=\"center\"\n            alignItems=\"center\"\n            direction=\"row\"\n            style={{height: '100vh', backgroundColor: 'lightBlue'}}\n        >\n            <Grid item md={4} sm={8} xs={12}>\n                <Paper style={{padding: 32, margin: 16}}>\n                    <Grid container spacing={2}>\n                        <Grid item xs={12}>\n                            <Typography variant=\"h6\" color=\"error\">\n                                {error}\n                            </Typography>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                variant=\"outlined\"\n                                label=\"Email\"\n                                type=\"email\"\n                                onChange={(event) => {\n                                    setEmail(event.target.value);\n                                }}\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                variant=\"outlined\"\n                                type=\"password\"\n                                label=\"Password\"\n                                onChange={(event) => {\n                                    setPassword(event.target.value);\n                                }}\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <Button fullWidth variant=\"contained\" onClick={handleClick}>\n                                Login\n                            </Button>\n                        </Grid>\n                    </Grid>\n                </Paper>\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default LoginComponent;\n","import React from 'react';\nimport { Link, ListItem, ListItemText } from '@material-ui/core';\nimport { useHistory } from 'react-router-dom';\n\nexport interface NavigationItemProps {\n    text: string;\n    link: string;\n    selected: boolean;\n}\nconst NavigationItem = (props: NavigationItemProps) => {\n    const history = useHistory();\n    return (\n    <ListItem button onClick={()=>{history.push(props.link)}} selected={props.selected} divider>\n        <ListItemText primary={props.text}/>\n   </ListItem>\n    );\n}\n    \n\n\nexport default NavigationItem;","import React from 'react';\nimport NavigationItem, {NavigationItemProps} from '../NavigationItem/NavigationItem';\nimport { List } from '@material-ui/core';\n\ninterface NavigationBarProps {\n    items: NavigationItemProps[];\n}\n\nconst NavigationBar = (props: NavigationBarProps) => \n    <List>\n        {props.items.map((item:NavigationItemProps, index:number)=> (\n            <NavigationItem key={index} {...item}/>\n        ))}\n    </List>\n    \n\n\nexport default NavigationBar;","import React from 'react';\nimport TestComponent from '../../components/TestComponent/TestComponent';\nimport LoginComponent from '../../components/LoginComponent/LoginComponent';\nimport {Grid} from '@material-ui/core';\nimport NavigationBar from '../../components/NavigationBar/NavigationBar';\nimport {NavigationItemProps} from '../../components/NavigationItem/NavigationItem';\nimport {withRouter, RouteComponentProps} from 'react-router-dom';\n\ninterface NavigationBarLayoutType extends RouteComponentProps {\n    products: number;\n    cities: number;\n    customers: number;\n    vendors: number;\n    accounts: number;\n    purchases: number;\n}\n\nconst NavigationBarLayout = withRouter(({history, ...props}: NavigationBarLayoutType) => {\n    const navigationItems: NavigationItemProps[] = [\n        {\n            text: `Products (${props.products})`,\n            link: '/products',\n            selected:\n                history.location.pathname === '/products' || history.location.pathname === '/',\n        },\n        {\n            text: `Purchases (${props.purchases})`,\n            link: '/purchases',\n            selected: history.location.pathname === '/purchases',\n        },\n        {\n            text: 'Sales',\n            link: '/sales',\n            selected: history.location.pathname === '/sales',\n        },\n        {\n            text: `Vendors (${props.vendors})`,\n            link: '/vendors',\n            selected: history.location.pathname === '/vendors',\n        },\n        {\n            text: `Customers (${props.customers})`,\n            link: '/customers',\n            selected: history.location.pathname === '/customers',\n        },\n        {\n            text: 'Employees',\n            link: '/employees',\n            selected: history.location.pathname === '/employees',\n        },\n        {\n            text: `Accounts (${props.accounts})`,\n            link: '/accounts',\n            selected: history.location.pathname === '/accounts',\n        },\n        {\n            text: 'Loans',\n            link: '/loans',\n            selected: history.location.pathname === '/loans',\n        },\n        {\n            text: 'Expenses',\n            link: '/expenses',\n            selected: history.location.pathname === '/expenses',\n        },\n        {\n            text: 'Vendor Payments',\n            link: '/vendorpayments',\n            selected: history.location.pathname === '/vendorpayments',\n        },\n        {\n            text: 'Customer Payments',\n            link: '/customerpayments',\n            selected: history.location.pathname === '/customerpayments',\n        },\n        {\n            text: 'Invoices',\n            link: '/invoices',\n            selected: history.location.pathname === '/invoices',\n        },\n        {\n            text: `Cities (${props.cities})`,\n            link: '/cities',\n            selected: history.location.pathname === '/cities',\n        },\n    ];\n    return <NavigationBar items={navigationItems} />;\n});\n\nexport default NavigationBarLayout;\n","import React from 'react';\nimport {\n    Button as MuiButton,\n    ButtonProps as MuiButtonProps,\n    CircularProgress,\n} from '@material-ui/core';\n\ninterface ButtonProps extends MuiButtonProps {\n    loading?: boolean;\n}\nconst Button = (props: ButtonProps) => {\n    const {loading, disabled, ...others} = {...props};\n    return (\n        <MuiButton\n            {...others}\n            disabled={loading || disabled}\n            startIcon={loading ? <CircularProgress style={{color: 'white'}} size={'1rem'} /> : ''}\n        >\n            {props.children}\n        </MuiButton>\n    );\n};\n\nexport default Button;\n","import React, {useState, useEffect} from 'react';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport {\n    Paper,\n    TableContainer,\n    Table,\n    TableHead,\n    TableRow,\n    TableCell,\n    TableSortLabel,\n    TableBody,\n    TablePagination,\n    makeStyles,\n    IconButton,\n} from '@material-ui/core';\nimport {firestore} from 'firebase';\nimport api from '../../api';\nimport ProductType from '../../model/product';\nimport Button from '../../components/Button/Button';\n\nconst columns: string[] = ['Name', 'Average Rate', 'Quantity', 'Total', 'Details', 'Actions'];\n\nconst useStyles = makeStyles({\n    head: {\n        backgroundColor: '#ECEDEF',\n    },\n});\n\ninterface ProductsTableType {\n    rows: ProductType[];\n    onRowDelete: Function;\n    deleting: boolean;\n    loading?: boolean;\n    allLoaded: boolean;\n    onLoadMore: () => void;\n}\n\nconst ProductsTable = (props: ProductsTableType) => {\n    const classes = useStyles();\n    return (\n        <>\n            <Paper>\n                <TableContainer>\n                    <Table>\n                        <TableHead classes={{root: classes.head}}>\n                            <TableRow>\n                                {columns.map((column: string, index: number) => (\n                                    <TableCell key={index}>{column}</TableCell>\n                                ))}\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {props.rows.map((row, index) => (\n                                <TableRow\n                                    key={row.id}\n                                    onClick={() => {\n                                        console.log('clicked', index);\n                                    }}\n                                >\n                                    <TableCell>{row.name}</TableCell>\n                                    <TableCell>{row.rate}</TableCell>\n                                    <TableCell>{row.quantity}</TableCell>\n                                    <TableCell>\n                                        {(row.rate ? row.rate : 0) *\n                                            (row.quantity ? row.quantity : 0)}\n                                    </TableCell>\n                                    <TableCell>{row.details}</TableCell>\n                                    <TableCell>\n                                        <IconButton\n                                            onClick={() => {\n                                                props.onRowDelete(index);\n                                            }}\n                                            disabled={props.deleting}\n                                        >\n                                            <DeleteIcon />\n                                        </IconButton>\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                    <Button\n                        onClick={props.onLoadMore}\n                        disabled={props.allLoaded}\n                        loading={props.loading}\n                    >\n                        Load More\n                    </Button>\n                </TableContainer>\n            </Paper>\n        </>\n    );\n};\n\nexport default ProductsTable;\n","import ProductType from './model/product';\nimport CountsType from './model/counts';\nimport {firestore} from 'firebase';\nimport {Dispatch, SetStateAction} from 'react';\nimport CustomerType from './model/customer';\nimport CityType from './model/city';\nimport AccountType from './model/account';\nimport PurchaseType from './model/purchase';\nimport VendorType from './model/vendor';\n\nconst api = {\n    product: {\n        get: (successCallback?: Function, errorCallback?: Function, startAfter?: any) => {\n            let query = firestore().collection('products').limit(5).orderBy('createdAt', 'desc');\n            if (startAfter) {\n                query = query.startAfter(startAfter);\n            }\n            query\n                .get()\n                .then((result) => {\n                    successCallback && successCallback(result);\n                })\n                .catch((error) => {\n                    errorCallback && errorCallback(error);\n                });\n        },\n        add: (data: ProductType, success: (id: string) => void, error: () => void) => {\n            firestore()\n                .collection('products')\n                .add(data)\n                .then((newProductDoc) => {\n                    success(newProductDoc.id);\n                })\n                .catch(() => {\n                    error();\n                });\n        },\n        delete: (productId?: string, success?: () => void, error?: () => void) => {\n            firestore()\n                .collection('products')\n                .doc(productId)\n                .delete()\n                .then(() => {\n                    success && success();\n                })\n                .catch((error) => {\n                    error && error();\n                });\n        },\n    },\n    customer: {\n        get: (successCallback?: Function, errorCallback?: Function, startAfter?: any) => {\n            let query = firestore().collection('customers').limit(5).orderBy('createdAt', 'desc');\n            if (startAfter) {\n                query = query.startAfter(startAfter);\n            }\n            query\n                .get()\n                .then((result) => {\n                    successCallback && successCallback(result);\n                })\n                .catch((error) => {\n                    errorCallback && errorCallback(error);\n                });\n        },\n        add: (data: CustomerType, success: (id: string) => void, error: () => void) => {\n            firestore()\n                .collection('customers')\n                .add(data)\n                .then((newCustomerDoc) => {\n                    success(newCustomerDoc.id);\n                })\n                .catch(() => {\n                    error();\n                });\n        },\n        delete: (customerId?: string, success?: () => void, error?: () => void) => {\n            firestore()\n                .collection('customers')\n                .doc(customerId)\n                .delete()\n                .then(() => {\n                    success && success();\n                })\n                .catch((error) => {\n                    error && error();\n                });\n        },\n    },\n    purchase: {\n        get: (successCallback?: Function, errorCallback?: Function, startAfter?: any) => {\n            let query = firestore().collection('purchases').limit(5).orderBy('createdAt', 'desc');\n            if (startAfter) {\n                query = query.startAfter(startAfter);\n            }\n            query\n                .get()\n                .then((result) => {\n                    successCallback && successCallback(result);\n                })\n                .catch((error) => {\n                    errorCallback && errorCallback(error);\n                });\n        },\n        add: (data: PurchaseType, success: (id: string) => void, error: () => void) => {\n            firestore()\n                .collection('purchases')\n                .add(data)\n                .then((newPurchaseDoc) => {\n                    success(newPurchaseDoc.id);\n                })\n                .catch(() => {\n                    error();\n                });\n        },\n        delete: (purchaseId?: string, success?: () => void, error?: () => void) => {\n            firestore()\n                .collection('purchases')\n                .doc(purchaseId)\n                .delete()\n                .then(() => {\n                    success && success();\n                })\n                .catch(() => {\n                    error && error();\n                });\n        },\n    },\n    vendor: {\n        get: (successCallback?: Function, errorCallback?: Function, startAfter?: any) => {\n            let query = firestore().collection('vendors').limit(5).orderBy('createdAt', 'desc');\n            if (startAfter) {\n                query = query.startAfter(startAfter);\n            }\n            query\n                .get()\n                .then((result) => {\n                    successCallback && successCallback(result);\n                })\n                .catch((error) => {\n                    errorCallback && errorCallback(error);\n                });\n        },\n        add: (data: VendorType, success: (id: string) => void, error: () => void) => {\n            firestore()\n                .collection('vendors')\n                .add(data)\n                .then((newCustomerDoc) => {\n                    success(newCustomerDoc.id);\n                })\n                .catch(() => {\n                    error();\n                });\n        },\n        delete: (customerId?: string, success?: () => void, error?: () => void) => {\n            firestore()\n                .collection('vendors')\n                .doc(customerId)\n                .delete()\n                .then(() => {\n                    success && success();\n                })\n                .catch((error) => {\n                    error && error();\n                });\n        },\n    },\n    city: {\n        get: (successCallback?: Function, errorCallback?: Function, startAfter?: any) => {\n            let query = firestore().collection('cities').orderBy('name');\n            query\n                .get()\n                .then((result) => {\n                    successCallback && successCallback(result);\n                })\n                .catch((error) => {\n                    errorCallback && errorCallback(error);\n                });\n        },\n        add: (data: CityType, success: (id: string) => void, error: () => void) => {\n            firestore()\n                .collection('cities')\n                .add(data)\n                .then((newCityDoc) => {\n                    success(newCityDoc.id);\n                })\n                .catch(() => {\n                    error();\n                });\n        },\n        delete: (cityId?: string, success?: () => void, error?: () => void) => {\n            firestore()\n                .collection('cities')\n                .doc(cityId)\n                .delete()\n                .then(() => {\n                    success && success();\n                })\n                .catch((error) => {\n                    error && error();\n                });\n        },\n    },\n    account: {\n        get: (successCallback?: Function, errorCallback?: Function, startAfter?: any) => {\n            let query = firestore().collection('accounts').limit(5).orderBy('createdAt', 'desc');\n            if (startAfter) {\n                query = query.startAfter(startAfter);\n            }\n            query\n                .get()\n                .then((result) => {\n                    successCallback && successCallback(result);\n                })\n                .catch((error) => {\n                    errorCallback && errorCallback(error);\n                });\n        },\n        add: (data: AccountType, success: (id: string) => void, error: () => void) => {\n            firestore()\n                .collection('accounts')\n                .add(data)\n                .then((newProductDoc) => {\n                    success(newProductDoc.id);\n                })\n                .catch(() => {\n                    error();\n                });\n        },\n        delete: (accountId?: string, success?: () => void, error?: () => void) => {\n            firestore()\n                .collection('accounts')\n                .doc(accountId)\n                .delete()\n                .then(() => {\n                    success && success();\n                })\n                .catch((error) => {\n                    error && error();\n                });\n        },\n    },\n    counts: {\n        get: (getSnapshot: (snapshot: firestore.QuerySnapshot<firestore.DocumentData>) => void) => {\n            firestore()\n                .collection('counts')\n                .limit(1)\n                .onSnapshot((snapshot) => {\n                    getSnapshot(snapshot);\n                });\n        },\n    },\n};\n\nexport default api;\n","import {useState, useEffect} from 'react';\nimport api from '../../api';\nimport ProductType from '../../model/product';\nlet productDocs: any[] = [];\nconst useProductsPage = () => {\n    const [modalOpen, setModalOpen] = useState(false);\n    const [showSuccessMessage, setShowSuccessMessage] = useState(false);\n\n    const [rows, setRows] = useState<ProductType[]>([]);\n    const [deleting, setDeleting] = useState(false);\n    const [loading, setLoading] = useState(false);\n\n    const openProductModal = () => {\n        setModalOpen(true);\n    };\n\n    const closeProductModal = (created: boolean) => {\n        setModalOpen(false);\n        if (created) setShowSuccessMessage(true);\n    };\n\n    const hideSuccessMessage = () => {\n        setShowSuccessMessage(false);\n    };\n\n    const loadProducts = () => {\n        setLoading(true);\n        api.product.get(\n            (result: any) => {\n                productDocs = [];\n                const items: any[] = [];\n                result.docs.forEach((doc: any) => {\n                    productDocs.push(doc);\n                    const item: any = doc.data();\n                    item.id = doc.id;\n                    items.push(item);\n                });\n                setRows(items);\n                setLoading(false);\n            },\n            () => {\n                setLoading(false);\n            }\n        );\n    };\n\n    const loadMoreProducts = () => {\n        setLoading(true);\n        api.product.get(\n            (result: any) => {\n                const items: any[] = [];\n                result.docs.forEach((doc: any) => {\n                    productDocs.push(doc);\n                    const item: any = doc.data();\n                    item.id = doc.id;\n                    items.push(item);\n                });\n                setRows((prev) => prev.concat(items));\n                setLoading(false);\n            },\n            () => {\n                setLoading(false);\n            },\n            productDocs[productDocs.length - 1]\n        );\n    };\n\n    const addProduct = (newProduct: ProductType) => {\n        rows.push(newProduct);\n        rows.sort(\n            (a: ProductType, b: ProductType) =>\n                (b.createdAt ? b.createdAt : 0) - (a.createdAt ? a.createdAt : 0)\n        );\n        setRows(rows);\n    };\n\n    const deleteProduct = (index: number) => {\n        setDeleting(true);\n        api.product.delete(\n            rows[index].id,\n            () => {\n                productDocs.splice(index, 1);\n                const remaining = rows.filter((row, i) => i !== index);\n                setRows(remaining);\n                setDeleting(false);\n            },\n            () => {\n                setDeleting(false);\n            }\n        );\n    };\n\n    const editProduct = () => {};\n\n    useEffect(() => {\n        loadProducts();\n    }, []);\n\n    return {\n        openProductModal,\n        closeProductModal,\n        modalOpen,\n        showSuccessMessage,\n        hideSuccessMessage,\n        deleteProduct,\n        addProduct,\n        loadMoreProducts,\n        deleting,\n        loading,\n        rows,\n    };\n};\nexport default useProductsPage;\n","import firebase from 'firebase';\nimport ProductType from '../../model/product';\nimport {useState} from 'react';\nimport api from '../../api';\n\nconst useProductModal = (\n    onAdd: (product: ProductType) => void,\n    close: (created: boolean) => void\n) => {\n    const [name, setName] = useState('');\n    const [details, setDetails] = useState('');\n    const [loading, setLoading] = useState(false);\n\n    const onNameChange = (value: string) => {\n        setName(value);\n    };\n\n    const onDetailsChange = (value: string) => {\n        setDetails(value);\n    };\n\n    const handleClick = () => {\n        if (!loading) {\n            setLoading(true);\n            const now = Date.now();\n            const newProduct: ProductType = {\n                name,\n                details,\n                quantity: 0,\n                rate: 0,\n                createdAt: now,\n                updatedAt: now,\n            };\n            api.product.add(\n                newProduct,\n                (id: string) => {\n                    setLoading(false);\n                    newProduct.id = id;\n                    onAdd(newProduct);\n                    close(true);\n                },\n                () => {\n                    setLoading(false);\n                    //ToDo failed to add data\n                }\n            );\n        }\n    };\n    return {\n        handleClick,\n        onNameChange,\n        onDetailsChange,\n        loading,\n    };\n};\n\nexport default useProductModal;\n","import React from 'react';\nimport {Dialog, DialogTitle, FormControl, TextField, Grid} from '@material-ui/core';\nimport Button from '../../components/Button/Button';\nimport useProductModal from './useProductModal';\nimport ProductType from '../../model/product';\n\nexport interface ProductModalType {\n    open: boolean;\n    close: (created: boolean) => void;\n    onAdd: (product: ProductType) => void;\n}\nconst ProductModal = (props: ProductModalType) => {\n    const {open, close, onAdd} = props;\n    const {handleClick, onNameChange, onDetailsChange, loading} = useProductModal(onAdd, close);\n    return (\n        <Dialog open={open}>\n            <DialogTitle>Add New Product</DialogTitle>\n            <Grid container spacing={2} style={{padding: 24}}>\n                <Grid item xs={12}>\n                    <Grid container spacing={2}>\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                label=\"Product Name\"\n                                onChange={(event) => {\n                                    onNameChange(event.target.value);\n                                }}\n                            />\n                        </Grid>\n\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                label=\"Details\"\n                                multiline\n                                rows={3}\n                                onChange={(event) => {\n                                    onDetailsChange(event.target.value);\n                                }}\n                            />\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid item xs={12}>\n                    <Grid container spacing={2} justify={'flex-end'}>\n                        <Grid item>\n                            <Button\n                                variant=\"text\"\n                                onClick={() => {\n                                    close(false);\n                                }}\n                            >\n                                Cancel\n                            </Button>\n                        </Grid>\n                        <Grid item>\n                            <Button onClick={handleClick} loading={loading}>\n                                Add Product\n                            </Button>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </Dialog>\n    );\n};\n\nexport default ProductModal;\n","import React from 'react';\nimport {Snackbar, SnackbarCloseReason} from '@material-ui/core';\nimport MuiAlert from '@material-ui/lab/Alert';\n\ninterface FloatingAlertProps {\n    message: string;\n    open: boolean;\n    severity: 'success' | 'info' | 'warning' | 'error';\n    onClose: () => void;\n}\nconst FloatingAlert = (props: FloatingAlertProps) => {\n    const onClose = (event: React.SyntheticEvent<any, Event>, reason: SnackbarCloseReason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        props.onClose();\n    };\n    return (\n        <Snackbar\n            open={props.open}\n            autoHideDuration={1000}\n            onClose={onClose}\n            anchorOrigin={{vertical: 'top', horizontal: 'right'}}\n        >\n            <MuiAlert variant=\"filled\" severity={props.severity}>\n                {props.message}\n            </MuiAlert>\n        </Snackbar>\n    );\n};\n\nexport default FloatingAlert;\n","import React from 'react';\nimport ProductsTable from '../../layouts/ProductsTable/ProductsTable';\nimport {Typography, Grid, TextField, FormControl, Button} from '@material-ui/core';\nimport useProductsPage from './useProductsPage';\nimport ProductModal from '../../layouts/ProductModal/ProductModal';\nimport FloatingAlert from '../../components/FloatingAlert/FloatingAlert';\nimport ProductType from '../../model/product';\n\ninterface ProductsPageType {\n    numberOfProducts: number;\n}\nconst ProductsPage = (props: ProductsPageType) => {\n    const {\n        openProductModal,\n        closeProductModal,\n        modalOpen,\n        showSuccessMessage,\n        hideSuccessMessage,\n        deleteProduct,\n        loadMoreProducts,\n        addProduct,\n        deleting,\n        loading,\n        rows,\n    } = useProductsPage();\n    return (\n        <>\n            <Grid container>\n                <Grid item xs={1}></Grid>\n                <Grid item xs={10}>\n                    <Typography variant=\"h4\">Products</Typography>\n                    <Grid container alignItems=\"center\">\n                        <Grid item xs={6}>\n                            <FormControl fullWidth>\n                                <TextField variant=\"outlined\" placeholder=\"Search Products\" />\n                            </FormControl>\n                        </Grid>\n\n                        <Grid item xs={6}>\n                            <Grid container justify=\"flex-end\">\n                                <Grid item>\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        onClick={openProductModal}\n                                    >\n                                        Add New Product\n                                    </Button>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                    <Typography variant=\"body1\">\n                        Showing {rows.length} out of {props.numberOfProducts} products\n                    </Typography>\n                    <ProductsTable\n                        rows={rows}\n                        onRowDelete={deleteProduct}\n                        deleting={deleting}\n                        onLoadMore={loadMoreProducts}\n                        allLoaded={rows.length === props.numberOfProducts}\n                        loading={loading}\n                    />\n                </Grid>\n            </Grid>\n            <FloatingAlert\n                severity=\"success\"\n                open={showSuccessMessage}\n                onClose={hideSuccessMessage}\n                message=\"Product added successfully\"\n            />\n            <ProductModal\n                open={modalOpen}\n                close={closeProductModal}\n                aria-labelledby=\"product_modal\"\n                onAdd={addProduct}\n            />\n        </>\n    );\n};\n\nexport default ProductsPage;\n","import React, {useState, useEffect} from 'react';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport {\n    Paper,\n    TableContainer,\n    Table,\n    TableHead,\n    TableRow,\n    TableCell,\n    TableSortLabel,\n    TableBody,\n    TablePagination,\n    makeStyles,\n    IconButton,\n} from '@material-ui/core';\nimport {firestore} from 'firebase';\nimport api from '../../api';\nimport ProductType from '../../model/product';\nimport Button from '../../components/Button/Button';\nimport CustomerType from '../../model/customer';\n\nconst createData = (\n    name: string,\n    averageRate: number,\n    quantity: number,\n    total: number,\n    details: string\n) => {\n    return {name, averageRate, quantity, total, details};\n};\n\nconst columns: string[] = ['Name', 'City', 'Mobile', 'Debt', 'Actions'];\n\nconst useStyles = makeStyles({\n    head: {\n        backgroundColor: '#ECEDEF',\n    },\n});\n\ninterface CustomersTableType {\n    rows: CustomerType[];\n    onRowDelete: Function;\n    deleting: boolean;\n    loading?: boolean;\n    allLoaded: boolean;\n    onLoadMore: () => void;\n}\n\nconst CustomersTable = (props: CustomersTableType) => {\n    const classes = useStyles();\n    return (\n        <>\n            <Paper>\n                <TableContainer>\n                    <Table>\n                        <TableHead classes={{root: classes.head}}>\n                            <TableRow>\n                                {columns.map((column: string, index: number) => (\n                                    <TableCell key={index}>{column}</TableCell>\n                                ))}\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {props.rows.map((row, index) => (\n                                <TableRow\n                                    key={row.id}\n                                    onClick={() => {\n                                        console.log('clicked', index);\n                                    }}\n                                >\n                                    <TableCell>{row.name}</TableCell>\n                                    <TableCell>{row.city.name}</TableCell>\n                                    <TableCell>{row.mobile}</TableCell>\n                                    <TableCell>{row.debt}</TableCell>\n                                    <TableCell>\n                                        <IconButton\n                                            onClick={() => {\n                                                props.onRowDelete(index);\n                                            }}\n                                            disabled={props.deleting}\n                                        >\n                                            <DeleteIcon />\n                                        </IconButton>\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                    <Button\n                        onClick={props.onLoadMore}\n                        disabled={props.allLoaded}\n                        loading={props.loading}\n                    >\n                        Load More\n                    </Button>\n                </TableContainer>\n            </Paper>\n        </>\n    );\n};\n\nexport default CustomersTable;\n","import {useState, useEffect} from 'react';\nimport api from '../../api';\nimport CustomerType from '../../model/customer';\nimport CityType from '../../model/city';\nlet customerDocs: any[] = [];\nconst useCustomersPage = () => {\n    const [modalOpen, setModalOpen] = useState(false);\n    const [showSuccessMessage, setShowSuccessMessage] = useState(false);\n\n    const [rows, setRows] = useState<CustomerType[]>([]);\n    const [cities, setCities] = useState<CityType[]>([]);\n    const [deleting, setDeleting] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [loadingCities, setLoadingCities] = useState(false);\n\n    const openCustomerModal = () => {\n        setModalOpen(true);\n    };\n\n    const closeCustomerModal = (created: boolean) => {\n        setModalOpen(false);\n        if (created) setShowSuccessMessage(true);\n    };\n\n    const hideSuccessMessage = () => {\n        setShowSuccessMessage(false);\n    };\n\n    const loadCustomers = () => {\n        setLoading(true);\n        api.customer.get(\n            (result: any) => {\n                customerDocs = [];\n                const items: any[] = [];\n                result.docs.forEach((doc: any) => {\n                    customerDocs.push(doc);\n                    const item: any = doc.data();\n                    item.id = doc.id;\n                    items.push(item);\n                });\n                setRows(items);\n                setLoading(false);\n            },\n            () => {\n                setLoading(false);\n            }\n        );\n    };\n\n    const loadCities = () => {\n        setLoadingCities(true);\n        api.city.get(\n            (result: any) => {\n                const items: any[] = [];\n                console.log('total', result.docs.length);\n                result.docs.forEach((doc: any) => {\n                    const item: any = doc.data();\n                    item.id = doc.id;\n                    items.push(item);\n                });\n                setCities(items);\n                setLoadingCities(false);\n            },\n            () => {\n                setLoadingCities(false);\n            }\n        );\n    };\n\n    const addCity = (name: string) => {\n        const now = Date.now();\n        const newCity: CityType = {\n            name,\n            createdAt: now,\n            updatedAt: now,\n        };\n\n        cities.push(newCity);\n        setCities(cities);\n    };\n\n    const loadMoreCustomers = () => {\n        setLoading(true);\n        api.customer.get(\n            (result: any) => {\n                const items: any[] = [];\n                result.docs.forEach((doc: any) => {\n                    customerDocs.push(doc);\n                    const item: any = doc.data();\n                    item.id = doc.id;\n                    items.push(item);\n                });\n                setRows((prev) => prev.concat(items));\n                setLoading(false);\n            },\n            () => {\n                setLoading(false);\n            },\n            customerDocs[customerDocs.length - 1]\n        );\n    };\n\n    const addCustomer = (newCustomer: CustomerType) => {\n        rows.push(newCustomer);\n        rows.sort((a: CustomerType, b: CustomerType) => b.createdAt - a.createdAt);\n        setRows(rows);\n    };\n\n    const deleteCustomer = (index: number) => {\n        setDeleting(true);\n        api.customer.delete(\n            rows[index].id,\n            () => {\n                customerDocs.splice(index, 1);\n                const remaining = rows.filter((row, i) => i !== index);\n                setRows(remaining);\n                setDeleting(false);\n            },\n            () => {\n                setDeleting(false);\n            }\n        );\n    };\n\n    const editCustomer = () => {};\n\n    useEffect(() => {\n        loadCustomers();\n        loadCities();\n    }, []);\n\n    return {\n        openCustomerModal,\n        closeCustomerModal,\n        modalOpen,\n        showSuccessMessage,\n        hideSuccessMessage,\n        deleteCustomer,\n        addCustomer,\n        loadMoreCustomers,\n        deleting,\n        loading,\n        rows,\n        cities,\n        loadingCities,\n        addCity,\n    };\n};\nexport default useCustomersPage;\n","import CustomerType from '../../model/customer';\nimport {useState} from 'react';\nimport api from '../../api';\nimport CityType from '../../model/city';\n\nconst useCustomerModal = (\n    onAdd: (customer: CustomerType) => void,\n    close: (created: boolean) => void\n) => {\n    const [name, setName] = useState('');\n    const [mobile, setMobile] = useState('');\n    const [city, setCity] = useState<CityType>();\n    const [loading, setLoading] = useState(false);\n\n    const onNameChange = (value: string) => {\n        setName(value);\n    };\n\n    const onMobileChange = (value: string) => {\n        setMobile(value);\n    };\n\n    const handleClick = () => {\n        if (!loading) {\n            setLoading(true);\n            const now = Date.now();\n            const newCustomer: CustomerType = {\n                name,\n                mobile,\n                city: {name: city?.name || 'Dummy City', id: city?.id},\n                debt: 0,\n                createdAt: now,\n                updatedAt: now,\n            };\n            api.customer.add(\n                newCustomer,\n                (id: string) => {\n                    setLoading(false);\n                    newCustomer.id = id;\n                    onAdd(newCustomer);\n                    close(true);\n                },\n                () => {\n                    setLoading(false);\n                    //ToDo failed to add data\n                }\n            );\n        }\n    };\n    return {\n        handleClick,\n        onNameChange,\n        onMobileChange,\n        city,\n        loading,\n        setCity,\n    };\n};\n\nexport default useCustomerModal;\n","import React from 'react';\nimport {Dialog, DialogTitle, FormControl, TextField, Grid} from '@material-ui/core';\nimport Button from '../../components/Button/Button';\nimport useCustomerModal from './useCustomerModal';\nimport CustomerType from '../../model/customer';\nimport CityType from '../../model/city';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\n\nexport interface CustomerModalType {\n    open: boolean;\n    close: (created: boolean) => void;\n    onAdd: (product: CustomerType) => void;\n    cities: CityType[];\n}\nconst CustomerModal = (props: CustomerModalType) => {\n    const {open, close, onAdd} = props;\n    const {handleClick, onNameChange, setCity, onMobileChange, loading, city} = useCustomerModal(\n        onAdd,\n        close\n    );\n    return (\n        <Dialog open={open}>\n            <DialogTitle>Add New Customer</DialogTitle>\n            <Grid container spacing={2} style={{padding: 24}}>\n                <Grid item xs={12}>\n                    <Grid container spacing={2}>\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                label=\"Customer Name\"\n                                onChange={(event) => {\n                                    onNameChange(event.target.value);\n                                }}\n                            />\n                        </Grid>\n\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                label=\"Mobile Number\"\n                                onChange={(event) => {\n                                    onMobileChange(event.target.value);\n                                }}\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <Autocomplete\n                                id=\"city-search\"\n                                options={props.cities}\n                                getOptionLabel={(option) => {\n                                    return option.name;\n                                }}\n                                // style={{width: 300}}\n                                renderInput={(params) => (\n                                    <TextField {...params} label=\"City\" variant=\"outlined\" />\n                                )}\n                                onChange={(event: any, value: CityType | null) => {\n                                    value && setCity(value);\n                                }}\n                            />\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid item xs={12}>\n                    <Grid container spacing={2} justify={'flex-end'}>\n                        <Grid item>\n                            <Button\n                                variant=\"text\"\n                                onClick={() => {\n                                    close(false);\n                                }}\n                            >\n                                Cancel\n                            </Button>\n                        </Grid>\n                        <Grid item>\n                            <Button onClick={handleClick} loading={loading}>\n                                Add Customer\n                            </Button>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </Dialog>\n    );\n};\n\nexport default CustomerModal;\n","import React from 'react';\nimport CustomersTable from '../../layouts/CustomersTable/CustomersTable';\nimport {Typography, Grid, TextField, FormControl, Button} from '@material-ui/core';\nimport useCustomersPage from './useCustomersPage';\nimport CustomerModal from '../../layouts/CustomerModal/CustomerModal';\nimport FloatingAlert from '../../components/FloatingAlert/FloatingAlert';\nimport CustomerType from '../../model/customer';\n\ninterface CustomersPageType {\n    numberOfCustomers: number;\n}\nconst CustomersPage = (props: CustomersPageType) => {\n    const {\n        openCustomerModal,\n        closeCustomerModal,\n        modalOpen,\n        showSuccessMessage,\n        hideSuccessMessage,\n        deleteCustomer,\n        loadMoreCustomers,\n        addCustomer,\n        deleting,\n        loading,\n        rows,\n        cities,\n        loadingCities,\n        addCity,\n    } = useCustomersPage();\n    return (\n        <>\n            <Grid container>\n                <Grid item xs={1}></Grid>\n                <Grid item xs={10}>\n                    <Typography variant=\"h4\">Customers</Typography>\n                    <Grid container alignItems=\"center\">\n                        <Grid item xs={6}>\n                            <FormControl fullWidth>\n                                <TextField variant=\"outlined\" placeholder=\"Search Customers\" />\n                            </FormControl>\n                        </Grid>\n\n                        <Grid item xs={6}>\n                            <Grid container justify=\"flex-end\">\n                                <Grid item>\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        onClick={openCustomerModal}\n                                        disabled={loadingCities}\n                                    >\n                                        Add New Customer\n                                    </Button>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                    <Typography variant=\"body1\">\n                        Showing {rows.length} out of {props.numberOfCustomers} customers\n                    </Typography>\n                    <CustomersTable\n                        rows={rows}\n                        onRowDelete={deleteCustomer}\n                        deleting={deleting}\n                        onLoadMore={loadMoreCustomers}\n                        allLoaded={rows.length === props.numberOfCustomers}\n                        loading={loading}\n                    />\n                </Grid>\n            </Grid>\n            <FloatingAlert\n                severity=\"success\"\n                open={showSuccessMessage}\n                onClose={hideSuccessMessage}\n                message=\"Customer added successfully\"\n            />\n            <CustomerModal\n                open={modalOpen}\n                close={closeCustomerModal}\n                aria-labelledby=\"customer_modal\"\n                onAdd={addCustomer}\n                cities={cities}\n            />\n        </>\n    );\n};\n\nexport default CustomersPage;\n","import {useState, useEffect} from 'react';\nimport api from '../../api';\nimport CityType from '../../model/city';\nlet cityDocs: any[] = [];\nconst useCitiesPage = () => {\n    const [showSuccessMessage, setShowSuccessMessage] = useState(false);\n    const [city, setCity] = useState('');\n    const [rows, setRows] = useState<CityType[]>([]);\n    const [deleting, setDeleting] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [adding, setAdding] = useState(false);\n\n    const hideSuccessMessage = () => {\n        setShowSuccessMessage(false);\n    };\n\n    const loadCities = () => {\n        setLoading(true);\n        api.city.get(\n            (result: any) => {\n                const items: any[] = [];\n                console.log('total', result.docs.length);\n                result.docs.forEach((doc: any) => {\n                    const item: any = doc.data();\n                    item.id = doc.id;\n                    items.push(item);\n                });\n                setRows(items);\n                setLoading(false);\n            },\n            () => {\n                setLoading(false);\n            }\n        );\n    };\n\n    const addCity = () => {\n        setAdding(true);\n        const now = Date.now();\n        const newCity: CityType = {\n            name: city,\n            createdAt: now,\n            updatedAt: now,\n        };\n        api.city.add(\n            newCity,\n            (id) => {\n                setAdding(false);\n                newCity.id = id;\n                setRows((oldRows) => oldRows.concat(newCity));\n                setCity('');\n            },\n            () => {\n                setAdding(false);\n            }\n        );\n    };\n\n    const deleteCity = (index: number) => {\n        setDeleting(true);\n        api.city.delete(\n            rows[index].id,\n            () => {\n                cityDocs.splice(index, 1);\n                const remaining = rows.filter((row, i) => i !== index);\n                setRows(remaining);\n                setDeleting(false);\n            },\n            () => {\n                setDeleting(false);\n            }\n        );\n    };\n\n    const editCity = () => {};\n\n    useEffect(() => {\n        loadCities();\n    }, []);\n\n    return {\n        showSuccessMessage,\n        hideSuccessMessage,\n        deleteCity,\n        addCity,\n        deleting,\n        loading,\n        adding,\n        rows,\n        setCity,\n        city,\n    };\n};\nexport default useCitiesPage;\n","import React from 'react';\nimport {\n    Typography,\n    Grid,\n    TextField,\n    FormControl,\n    List,\n    ListItem,\n    ListItemText,\n    CircularProgress,\n} from '@material-ui/core';\nimport useCitiesPage from './useCitiesPage';\nimport FloatingAlert from '../../components/FloatingAlert/FloatingAlert';\nimport CityType from '../../model/city';\nimport Button from '../../components/Button/Button';\n\ninterface CitiesPageType {\n    numberOfCities: number;\n}\nconst CitiesPage = (props: CitiesPageType) => {\n    const {\n        showSuccessMessage,\n        hideSuccessMessage,\n        deleteCity,\n        addCity,\n        deleting,\n        loading,\n        rows,\n        setCity,\n        adding,\n        city,\n    } = useCitiesPage();\n    return (\n        <>\n            <Grid container>\n                <Grid item>Cities</Grid>\n                <Grid container spacing={2}>\n                    <Grid item>\n                        <TextField\n                            value={city}\n                            label=\"New City Name\"\n                            onChange={(event) => {\n                                setCity(event.target.value);\n                            }}\n                        />\n                    </Grid>\n                    <Grid item>\n                        <Button onClick={addCity} loading={adding}>\n                            Add City\n                        </Button>\n                    </Grid>\n                </Grid>\n\n                <Grid container>\n                    {loading && <CircularProgress />}\n                    <List>\n                        {rows.map((city, index) => (\n                            <ListItem key={index}>\n                                <ListItemText>{city.name}</ListItemText>\n                            </ListItem>\n                        ))}\n                    </List>\n                </Grid>\n            </Grid>\n            {/* <FloatingAlert\n                severity=\"success\"\n                open={showSuccessMessage}\n                onClose={hideSuccessMessage}\n                message=\"City added successfully\"\n            /> */}\n        </>\n    );\n};\n\nexport default CitiesPage;\n","import React, {useState, useEffect} from 'react';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport {\n    Paper,\n    TableContainer,\n    Table,\n    TableHead,\n    TableRow,\n    TableCell,\n    TableSortLabel,\n    TableBody,\n    TablePagination,\n    makeStyles,\n    IconButton,\n} from '@material-ui/core';\nimport {firestore} from 'firebase';\nimport api from '../../api';\nimport ProductType from '../../model/product';\nimport Button from '../../components/Button/Button';\nimport VendorType from '../../model/vendor';\n\nconst createData = (\n    name: string,\n    averageRate: number,\n    quantity: number,\n    total: number,\n    details: string\n) => {\n    return {name, averageRate, quantity, total, details};\n};\n\nconst columns: string[] = ['Name', 'City', 'Mobile', 'Debt', 'Actions'];\n\nconst useStyles = makeStyles({\n    head: {\n        backgroundColor: '#ECEDEF',\n    },\n});\n\ninterface VendorsTableType {\n    rows: VendorType[];\n    onRowDelete: Function;\n    deleting: boolean;\n    loading?: boolean;\n    allLoaded: boolean;\n    onLoadMore: () => void;\n}\n\nconst VendorsTable = (props: VendorsTableType) => {\n    const classes = useStyles();\n    return (\n        <>\n            <Paper>\n                <TableContainer>\n                    <Table>\n                        <TableHead classes={{root: classes.head}}>\n                            <TableRow>\n                                {columns.map((column: string, index: number) => (\n                                    <TableCell key={index}>{column}</TableCell>\n                                ))}\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {props.rows.map((row, index) => (\n                                <TableRow\n                                    key={row.id}\n                                    onClick={() => {\n                                        console.log('clicked', index);\n                                    }}\n                                >\n                                    <TableCell>{row.name}</TableCell>\n                                    <TableCell>{row.city?.name}</TableCell>\n                                    <TableCell>{row.mobile}</TableCell>\n                                    <TableCell>{row.debt}</TableCell>\n                                    <TableCell>\n                                        <IconButton\n                                            onClick={() => {\n                                                props.onRowDelete(index);\n                                            }}\n                                            disabled={props.deleting}\n                                        >\n                                            <DeleteIcon />\n                                        </IconButton>\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                    <Button\n                        onClick={props.onLoadMore}\n                        disabled={props.allLoaded}\n                        loading={props.loading}\n                    >\n                        Load More\n                    </Button>\n                </TableContainer>\n            </Paper>\n        </>\n    );\n};\n\nexport default VendorsTable;\n","import {useState, useEffect} from 'react';\nimport api from '../../api';\nimport VendorType from '../../model/vendor';\nimport CityType from '../../model/city';\nlet vendorDocs: any[] = [];\nconst useVendorsPage = () => {\n    const [modalOpen, setModalOpen] = useState(false);\n    const [showSuccessMessage, setShowSuccessMessage] = useState(false);\n\n    const [rows, setRows] = useState<VendorType[]>([]);\n    const [cities, setCities] = useState<CityType[]>([]);\n    const [deleting, setDeleting] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [loadingCities, setLoadingCities] = useState(false);\n\n    const openVendorModal = () => {\n        setModalOpen(true);\n    };\n\n    const closeVendorModal = (created: boolean) => {\n        setModalOpen(false);\n        if (created) setShowSuccessMessage(true);\n    };\n\n    const hideSuccessMessage = () => {\n        setShowSuccessMessage(false);\n    };\n\n    const loadVendors = () => {\n        setLoading(true);\n        api.vendor.get(\n            (result: any) => {\n                vendorDocs = [];\n                const items: any[] = [];\n                result.docs.forEach((doc: any) => {\n                    vendorDocs.push(doc);\n                    const item: any = doc.data();\n                    item.id = doc.id;\n                    items.push(item);\n                });\n                setRows(items);\n                setLoading(false);\n            },\n            () => {\n                setLoading(false);\n            }\n        );\n    };\n\n    const loadCities = () => {\n        setLoadingCities(true);\n        api.city.get(\n            (result: any) => {\n                const items: any[] = [];\n                console.log('total', result.docs.length);\n                result.docs.forEach((doc: any) => {\n                    const item: any = doc.data();\n                    item.id = doc.id;\n                    items.push(item);\n                });\n                setCities(items);\n                setLoadingCities(false);\n            },\n            () => {\n                setLoadingCities(false);\n            }\n        );\n    };\n\n    const addCity = (name: string) => {\n        const now = Date.now();\n        const newCity: CityType = {\n            name,\n            createdAt: now,\n            updatedAt: now,\n        };\n\n        cities.push(newCity);\n        setCities(cities);\n    };\n\n    const loadMoreVendors = () => {\n        setLoading(true);\n        api.vendor.get(\n            (result: any) => {\n                const items: any[] = [];\n                result.docs.forEach((doc: any) => {\n                    vendorDocs.push(doc);\n                    const item: any = doc.data();\n                    item.id = doc.id;\n                    items.push(item);\n                });\n                setRows((prev) => prev.concat(items));\n                setLoading(false);\n            },\n            () => {\n                setLoading(false);\n            },\n            vendorDocs[vendorDocs.length - 1]\n        );\n    };\n\n    const addVendor = (newVendor: VendorType) => {\n        rows.push(newVendor);\n        rows.sort(\n            (a: VendorType, b: VendorType) =>\n                (b.createdAt ? b.createdAt : 0) - (a.createdAt ? a.createdAt : 0)\n        );\n        setRows(rows);\n    };\n\n    const deleteVendor = (index: number) => {\n        setDeleting(true);\n        api.vendor.delete(\n            rows[index].id,\n            () => {\n                vendorDocs.splice(index, 1);\n                const remaining = rows.filter((row, i) => i !== index);\n                setRows(remaining);\n                setDeleting(false);\n            },\n            () => {\n                setDeleting(false);\n            }\n        );\n    };\n\n    const editVendor = () => {};\n\n    useEffect(() => {\n        loadVendors();\n        loadCities();\n    }, []);\n\n    return {\n        openVendorModal,\n        closeVendorModal,\n        modalOpen,\n        showSuccessMessage,\n        hideSuccessMessage,\n        deleteVendor,\n        addVendor,\n        loadMoreVendors,\n        deleting,\n        loading,\n        rows,\n        cities,\n        loadingCities,\n        addCity,\n    };\n};\nexport default useVendorsPage;\n","import VendorType from '../../model/vendor';\nimport {useState} from 'react';\nimport api from '../../api';\nimport CityType from '../../model/city';\n\nconst useVendorModal = (onAdd: (vendor: VendorType) => void, close: (created: boolean) => void) => {\n    const [name, setName] = useState('');\n    const [mobile, setMobile] = useState('');\n    const [city, setCity] = useState<CityType>();\n    const [loading, setLoading] = useState(false);\n\n    const onNameChange = (value: string) => {\n        setName(value);\n    };\n\n    const onMobileChange = (value: string) => {\n        setMobile(value);\n    };\n\n    const handleClick = () => {\n        if (!loading) {\n            setLoading(true);\n            const now = Date.now();\n            const newVendor: VendorType = {\n                name,\n                mobile,\n                city: {name: city?.name || 'Dummy City', id: city?.id},\n                debt: 0,\n                createdAt: now,\n                updatedAt: now,\n            };\n            api.vendor.add(\n                newVendor,\n                (id: string) => {\n                    setLoading(false);\n                    newVendor.id = id;\n                    onAdd(newVendor);\n                    close(true);\n                },\n                () => {\n                    setLoading(false);\n                    //ToDo failed to add data\n                }\n            );\n        }\n    };\n    return {\n        handleClick,\n        onNameChange,\n        onMobileChange,\n        city,\n        loading,\n        setCity,\n    };\n};\n\nexport default useVendorModal;\n","import React from 'react';\nimport {Dialog, DialogTitle, FormControl, TextField, Grid} from '@material-ui/core';\nimport Button from '../../components/Button/Button';\nimport useVendorModal from './useVendorModal';\nimport VendorType from '../../model/vendor';\nimport CityType from '../../model/city';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\n\nexport interface VendorModalType {\n    open: boolean;\n    close: (created: boolean) => void;\n    onAdd: (product: VendorType) => void;\n    addCity: (name: string) => void;\n    cities: CityType[];\n}\nconst VendorModal = (props: VendorModalType) => {\n    const {open, close, onAdd} = props;\n    const {handleClick, onNameChange, setCity, onMobileChange, loading, city} = useVendorModal(\n        onAdd,\n        close\n    );\n    return (\n        <Dialog open={open}>\n            <DialogTitle>Add New Vendor</DialogTitle>\n            <Grid container spacing={2} style={{padding: 24}}>\n                <Grid item xs={12}>\n                    <Grid container spacing={2}>\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                label=\"Vendor Name\"\n                                onChange={(event) => {\n                                    onNameChange(event.target.value);\n                                }}\n                            />\n                        </Grid>\n\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                label=\"Mobile Number\"\n                                onChange={(event) => {\n                                    onMobileChange(event.target.value);\n                                }}\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <Autocomplete\n                                id=\"city-search\"\n                                options={props.cities}\n                                getOptionLabel={(option) => {\n                                    return option.name;\n                                }}\n                                // style={{width: 300}}\n                                renderInput={(params) => (\n                                    <TextField {...params} label=\"City\" variant=\"outlined\" />\n                                )}\n                                onChange={(event: any, value: CityType | null) => {\n                                    value && setCity(value);\n                                }}\n                            />\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid item xs={12}>\n                    <Grid container spacing={2} justify={'flex-end'}>\n                        <Grid item>\n                            <Button\n                                variant=\"text\"\n                                onClick={() => {\n                                    close(false);\n                                }}\n                            >\n                                Cancel\n                            </Button>\n                        </Grid>\n                        <Grid item>\n                            <Button onClick={handleClick} loading={loading}>\n                                Add Vendor\n                            </Button>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </Dialog>\n    );\n};\n\nexport default VendorModal;\n","import React from 'react';\nimport VendorsTable from '../../layouts/VendorsTable/VendorsTable';\nimport {Typography, Grid, TextField, FormControl, Button} from '@material-ui/core';\nimport useVendorsPage from './useVendorsPage';\nimport VendorModal from '../../layouts/VendorModal/VendorModal';\nimport FloatingAlert from '../../components/FloatingAlert/FloatingAlert';\nimport VendorType from '../../model/vendor';\n\ninterface VendorsPageType {\n    numberOfVendors: number;\n}\nconst VendorsPage = (props: VendorsPageType) => {\n    const {\n        openVendorModal,\n        closeVendorModal,\n        modalOpen,\n        showSuccessMessage,\n        hideSuccessMessage,\n        deleteVendor,\n        loadMoreVendors,\n        addVendor,\n        deleting,\n        loading,\n        rows,\n        cities,\n        loadingCities,\n        addCity,\n    } = useVendorsPage();\n    return (\n        <>\n            <Grid container>\n                <Grid item xs={1}></Grid>\n                <Grid item xs={10}>\n                    <Typography variant=\"h4\">Vendors</Typography>\n                    <Grid container alignItems=\"center\">\n                        <Grid item xs={6}>\n                            <FormControl fullWidth>\n                                <TextField variant=\"outlined\" placeholder=\"Search Vendors\" />\n                            </FormControl>\n                        </Grid>\n\n                        <Grid item xs={6}>\n                            <Grid container justify=\"flex-end\">\n                                <Grid item>\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        onClick={openVendorModal}\n                                        disabled={loadingCities}\n                                    >\n                                        Add New Vendor\n                                    </Button>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                    <Typography variant=\"body1\">\n                        Showing {rows.length} out of {props.numberOfVendors} vendors\n                    </Typography>\n                    <VendorsTable\n                        rows={rows}\n                        onRowDelete={deleteVendor}\n                        deleting={deleting}\n                        onLoadMore={loadMoreVendors}\n                        allLoaded={rows.length === props.numberOfVendors}\n                        loading={loading}\n                    />\n                </Grid>\n            </Grid>\n            <FloatingAlert\n                severity=\"success\"\n                open={showSuccessMessage}\n                onClose={hideSuccessMessage}\n                message=\"Vendor added successfully\"\n            />\n            <VendorModal\n                open={modalOpen}\n                close={closeVendorModal}\n                aria-labelledby=\"vendor_modal\"\n                onAdd={addVendor}\n                cities={cities}\n                addCity={addCity}\n            />\n        </>\n    );\n};\n\nexport default VendorsPage;\n","import React, {useState, useEffect} from 'react';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport {\n    Paper,\n    TableContainer,\n    Table,\n    TableHead,\n    TableRow,\n    TableCell,\n    TableSortLabel,\n    TableBody,\n    TablePagination,\n    makeStyles,\n    IconButton,\n} from '@material-ui/core';\nimport {firestore} from 'firebase';\nimport api from '../../api';\nimport AccountType from '../../model/account';\nimport Button from '../../components/Button/Button';\n\nconst columns: string[] = ['Name', 'Amount', 'Type', 'Details', 'Actions'];\n\nconst useStyles = makeStyles({\n    head: {\n        backgroundColor: '#ECEDEF',\n    },\n});\n\ninterface AccountsTableType {\n    rows: AccountType[];\n    onRowDelete: Function;\n    deleting: boolean;\n    loading?: boolean;\n    allLoaded: boolean;\n    onLoadMore: () => void;\n}\n\nconst AccountsTable = (props: AccountsTableType) => {\n    const classes = useStyles();\n    return (\n        <>\n            <Paper>\n                <TableContainer>\n                    <Table>\n                        <TableHead classes={{root: classes.head}}>\n                            <TableRow>\n                                {columns.map((column: string, index: number) => (\n                                    <TableCell key={index}>{column}</TableCell>\n                                ))}\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {props.rows.map((row, index) => (\n                                <TableRow\n                                    key={row.id}\n                                    onClick={() => {\n                                        console.log('clicked', index);\n                                    }}\n                                >\n                                    <TableCell>{row.name}</TableCell>\n                                    <TableCell>{row.amount}</TableCell>\n                                    <TableCell>{row.type}</TableCell>\n                                    <TableCell>{row.details}</TableCell>\n                                    <TableCell>\n                                        <IconButton\n                                            onClick={() => {\n                                                props.onRowDelete(index);\n                                            }}\n                                            disabled={props.deleting}\n                                        >\n                                            <DeleteIcon />\n                                        </IconButton>\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                    <Button\n                        onClick={props.onLoadMore}\n                        disabled={props.allLoaded}\n                        loading={props.loading}\n                    >\n                        Load More\n                    </Button>\n                </TableContainer>\n            </Paper>\n        </>\n    );\n};\n\nexport default AccountsTable;\n","import {useState, useEffect} from 'react';\nimport api from '../../api';\nimport AccountType from '../../model/account';\nlet accountDocs: any[] = [];\nconst useAccountsPage = () => {\n    const [modalOpen, setModalOpen] = useState(false);\n    const [showSuccessMessage, setShowSuccessMessage] = useState(false);\n\n    const [rows, setRows] = useState<AccountType[]>([]);\n    const [deleting, setDeleting] = useState(false);\n    const [loading, setLoading] = useState(false);\n\n    const openAccountModal = () => {\n        setModalOpen(true);\n    };\n\n    const closeAccountModal = (created: boolean) => {\n        setModalOpen(false);\n        if (created) setShowSuccessMessage(true);\n    };\n\n    const hideSuccessMessage = () => {\n        setShowSuccessMessage(false);\n    };\n\n    const loadAccounts = () => {\n        setLoading(true);\n        api.account.get(\n            (result: any) => {\n                accountDocs = [];\n                const items: any[] = [];\n                result.docs.forEach((doc: any) => {\n                    accountDocs.push(doc);\n                    const item: any = doc.data();\n                    item.id = doc.id;\n                    items.push(item);\n                });\n                setRows(items);\n                setLoading(false);\n            },\n            () => {\n                setLoading(false);\n            }\n        );\n    };\n\n    const loadMoreAccounts = () => {\n        setLoading(true);\n        api.account.get(\n            (result: any) => {\n                const items: any[] = [];\n                result.docs.forEach((doc: any) => {\n                    accountDocs.push(doc);\n                    const item: any = doc.data();\n                    item.id = doc.id;\n                    items.push(item);\n                });\n                setRows((prev) => prev.concat(items));\n                setLoading(false);\n            },\n            () => {\n                setLoading(false);\n            },\n            accountDocs[accountDocs.length - 1]\n        );\n    };\n\n    const addAccount = (newAccount: AccountType) => {\n        rows.push(newAccount);\n        rows.sort((a: AccountType, b: AccountType) => b.createdAt - a.createdAt);\n        setRows(rows);\n    };\n\n    const deleteAccount = (index: number) => {\n        setDeleting(true);\n        api.account.delete(\n            rows[index].id,\n            () => {\n                accountDocs.splice(index, 1);\n                const remaining = rows.filter((row, i) => i !== index);\n                setRows(remaining);\n                setDeleting(false);\n            },\n            () => {\n                setDeleting(false);\n            }\n        );\n    };\n\n    const editAccount = () => {};\n\n    useEffect(() => {\n        loadAccounts();\n    }, []);\n\n    return {\n        openAccountModal,\n        closeAccountModal,\n        modalOpen,\n        showSuccessMessage,\n        hideSuccessMessage,\n        deleteAccount,\n        addAccount,\n        loadMoreAccounts,\n        deleting,\n        loading,\n        rows,\n    };\n};\nexport default useAccountsPage;\n","import firebase from 'firebase';\nimport AccountType from '../../model/account';\nimport {useState} from 'react';\nimport api from '../../api';\n\nconst useAccountModal = (\n    onAdd: (account: AccountType) => void,\n    close: (created: boolean) => void\n) => {\n    const [name, setName] = useState('');\n    const [type, setType] = useState('');\n    const [amount, setAmount] = useState(0);\n    const [details, setDetails] = useState('');\n    const [loading, setLoading] = useState(false);\n\n    const onNameChange = (value: string) => {\n        setName(value);\n    };\n\n    const onDetailsChange = (value: string) => {\n        setDetails(value);\n    };\n\n    const onTypeChange = (value: string) => {\n        setType(value);\n    };\n\n    const onAmountChange = (value: number) => {\n        setAmount(value);\n    };\n\n    const handleClick = () => {\n        if (!loading) {\n            setLoading(true);\n            const now = Date.now();\n            const newAccount: AccountType = {\n                name,\n                details,\n                type,\n                amount,\n                createdAt: now,\n                updatedAt: now,\n            };\n            api.account.add(\n                newAccount,\n                (id: string) => {\n                    setLoading(false);\n                    newAccount.id = id;\n                    onAdd(newAccount);\n                    close(true);\n                },\n                () => {\n                    setLoading(false);\n                    //ToDo failed to add data\n                }\n            );\n        }\n    };\n    return {\n        handleClick,\n        onNameChange,\n        onDetailsChange,\n        onTypeChange,\n        onAmountChange,\n        loading,\n    };\n};\n\nexport default useAccountModal;\n","import React from 'react';\nimport {Dialog, DialogTitle, FormControl, TextField, Grid} from '@material-ui/core';\nimport Button from '../../components/Button/Button';\nimport useAccountModal from './useAccountModal';\nimport AccountType from '../../model/account';\n\nexport interface AccountModalType {\n    open: boolean;\n    close: (created: boolean) => void;\n    onAdd: (account: AccountType) => void;\n}\nconst AccountModal = (props: AccountModalType) => {\n    const {open, close, onAdd} = props;\n    const {\n        handleClick,\n        onNameChange,\n        onDetailsChange,\n        onTypeChange,\n        onAmountChange,\n        loading,\n    } = useAccountModal(onAdd, close);\n    return (\n        <Dialog open={open}>\n            <DialogTitle>Add New Account</DialogTitle>\n            <Grid container spacing={2} style={{padding: 24}}>\n                <Grid item xs={12}>\n                    <Grid container spacing={2}>\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                label=\"Account Name\"\n                                onChange={(event) => {\n                                    onNameChange(event.target.value);\n                                }}\n                            />\n                        </Grid>\n\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                label=\"Account Type\"\n                                onChange={(event) => {\n                                    onTypeChange(event.target.value);\n                                }}\n                            />\n                        </Grid>\n\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                label=\"Account Amount\"\n                                type=\"number\"\n                                onChange={(event) => {\n                                    onAmountChange(parseInt(event.target.value));\n                                }}\n                            />\n                        </Grid>\n\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                label=\"Details\"\n                                multiline\n                                rows={3}\n                                onChange={(event) => {\n                                    onDetailsChange(event.target.value);\n                                }}\n                            />\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid item xs={12}>\n                    <Grid container spacing={2} justify={'flex-end'}>\n                        <Grid item>\n                            <Button\n                                variant=\"text\"\n                                onClick={() => {\n                                    close(false);\n                                }}\n                            >\n                                Cancel\n                            </Button>\n                        </Grid>\n                        <Grid item>\n                            <Button onClick={handleClick} loading={loading}>\n                                Add Account\n                            </Button>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </Dialog>\n    );\n};\n\nexport default AccountModal;\n","import React from 'react';\nimport AccountsTable from '../../layouts/AccountsTable/AccountsTable';\nimport {Typography, Grid, TextField, FormControl, Button} from '@material-ui/core';\nimport useAccountsPage from './useAccountsPage';\nimport AccountModal from '../../layouts/AccountModal/AccountModal';\nimport FloatingAlert from '../../components/FloatingAlert/FloatingAlert';\nimport AccountType from '../../model/account';\n\ninterface AccountsPageType {\n    numberOfAccounts: number;\n}\nconst AccountsPage = (props: AccountsPageType) => {\n    const {\n        openAccountModal,\n        closeAccountModal,\n        modalOpen,\n        showSuccessMessage,\n        hideSuccessMessage,\n        deleteAccount,\n        loadMoreAccounts,\n        addAccount,\n        deleting,\n        loading,\n        rows,\n    } = useAccountsPage();\n    return (\n        <>\n            <Grid container>\n                <Grid item xs={1}></Grid>\n                <Grid item xs={10}>\n                    <Typography variant=\"h4\">Accounts</Typography>\n                    <Grid container alignItems=\"center\">\n                        <Grid item xs={6}>\n                            <FormControl fullWidth>\n                                <TextField variant=\"outlined\" placeholder=\"Search Accounts\" />\n                            </FormControl>\n                        </Grid>\n\n                        <Grid item xs={6}>\n                            <Grid container justify=\"flex-end\">\n                                <Grid item>\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        onClick={openAccountModal}\n                                    >\n                                        Add New Account\n                                    </Button>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                    <Typography variant=\"body1\">\n                        Showing {rows.length} out of {props.numberOfAccounts} accounts\n                    </Typography>\n                    <AccountsTable\n                        rows={rows}\n                        onRowDelete={deleteAccount}\n                        deleting={deleting}\n                        onLoadMore={loadMoreAccounts}\n                        allLoaded={rows.length === props.numberOfAccounts}\n                        loading={loading}\n                    />\n                </Grid>\n            </Grid>\n            <FloatingAlert\n                severity=\"success\"\n                open={showSuccessMessage}\n                onClose={hideSuccessMessage}\n                message=\"Account added successfully\"\n            />\n            <AccountModal\n                open={modalOpen}\n                close={closeAccountModal}\n                aria-labelledby=\"account_modal\"\n                onAdd={addAccount}\n            />\n        </>\n    );\n};\n\nexport default AccountsPage;\n","import React, {useState, useEffect} from 'react';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport {\n    Paper,\n    TableContainer,\n    Table,\n    TableHead,\n    TableRow,\n    TableCell,\n    TableSortLabel,\n    TableBody,\n    TablePagination,\n    makeStyles,\n    IconButton,\n} from '@material-ui/core';\nimport {firestore} from 'firebase';\nimport api from '../../api';\nimport ProductType from '../../model/product';\nimport Button from '../../components/Button/Button';\nimport PurchaseType from '../../model/purchase';\n\nconst createData = (\n    name: string,\n    averageRate: number,\n    quantity: number,\n    total: number,\n    details: string\n) => {\n    return {name, averageRate, quantity, total, details};\n};\n\nconst columns: string[] = ['Vendor', 'Product', 'Quantity', 'Rate', 'Total', 'Date', 'Actions'];\n\nconst useStyles = makeStyles({\n    head: {\n        backgroundColor: '#ECEDEF',\n    },\n});\n\ninterface PurchasesTableType {\n    rows: PurchaseType[];\n    onRowDelete: Function;\n    deleting: boolean;\n    loading?: boolean;\n    allLoaded: boolean;\n    onLoadMore: () => void;\n}\n\nconst PurchasesTable = (props: PurchasesTableType) => {\n    const classes = useStyles();\n    return (\n        <>\n            <Paper>\n                <TableContainer>\n                    <Table>\n                        <TableHead classes={{root: classes.head}}>\n                            <TableRow>\n                                {columns.map((column: string, index: number) => (\n                                    <TableCell key={index}>{column}</TableCell>\n                                ))}\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {props.rows.map((row, index) => (\n                                <TableRow\n                                    key={row.id}\n                                    onClick={() => {\n                                        console.log('clicked', index);\n                                    }}\n                                >\n                                    <TableCell>{row.vendor.name}</TableCell>\n                                    <TableCell>{row.product.name}</TableCell>\n                                    <TableCell>{row.quantity}</TableCell>\n                                    <TableCell>{row.rate}</TableCell>\n                                    <TableCell>{row.quantity * row.rate}</TableCell>\n                                    <TableCell>{row.createdAt}</TableCell>\n                                    <TableCell>\n                                        <IconButton\n                                            onClick={() => {\n                                                props.onRowDelete(index);\n                                            }}\n                                            disabled={props.deleting}\n                                        >\n                                            <DeleteIcon />\n                                        </IconButton>\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                    <Button\n                        onClick={props.onLoadMore}\n                        disabled={props.allLoaded}\n                        loading={props.loading}\n                    >\n                        Load More\n                    </Button>\n                </TableContainer>\n            </Paper>\n        </>\n    );\n};\n\nexport default PurchasesTable;\n","import {useState, useEffect} from 'react';\nimport api from '../../api';\nimport PurchaseType from '../../model/purchase';\nimport CityType from '../../model/city';\nimport ProductType from '../../model/product';\nimport VendorType from '../../model/vendor';\nlet purchaseDocs: any[] = [];\nconst usePurchasesPage = () => {\n    const [modalOpen, setModalOpen] = useState(false);\n    const [showSuccessMessage, setShowSuccessMessage] = useState(false);\n\n    const [rows, setRows] = useState<PurchaseType[]>([]);\n    const [products, setProducts] = useState<ProductType[]>([]);\n    const [vendors, setVendors] = useState<VendorType[]>([]);\n    const [deleting, setDeleting] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [loadingProducts, setLoadingProducts] = useState(false);\n    const [loadingVendors, setLoadingVendors] = useState(false);\n\n    const openPurchaseModal = () => {\n        setModalOpen(true);\n    };\n\n    const closePurchaseModal = (created: boolean) => {\n        setModalOpen(false);\n        if (created) setShowSuccessMessage(true);\n    };\n\n    const hideSuccessMessage = () => {\n        setShowSuccessMessage(false);\n    };\n\n    const loadPurchases = () => {\n        setLoading(true);\n        api.purchase.get(\n            (result: any) => {\n                purchaseDocs = [];\n                const items: any[] = [];\n                result.docs.forEach((doc: any) => {\n                    purchaseDocs.push(doc);\n                    const item: any = doc.data();\n                    item.id = doc.id;\n                    items.push(item);\n                });\n                setRows(items);\n                setLoading(false);\n            },\n            () => {\n                setLoading(false);\n            }\n        );\n    };\n\n    const loadProducts = () => {\n        setLoadingProducts(true);\n        api.product.get(\n            (result: any) => {\n                const items: any[] = [];\n                result.docs.forEach((doc: any) => {\n                    const item: any = doc.data();\n                    item.id = doc.id;\n                    items.push(item);\n                });\n                setProducts(items);\n                setLoadingProducts(false);\n            },\n            () => {\n                setLoadingProducts(false);\n            }\n        );\n    };\n\n    const loadVendors = () => {\n        setLoadingVendors(true);\n        api.vendor.get(\n            (result: any) => {\n                const items: any[] = [];\n                result.docs.forEach((doc: any) => {\n                    const item: any = doc.data();\n                    item.id = doc.id;\n                    items.push(item);\n                });\n                setVendors(items);\n                setLoadingVendors(false);\n            },\n            () => {\n                setLoadingVendors(false);\n            }\n        );\n    };\n\n    const loadMorePurchases = () => {\n        setLoading(true);\n        api.purchase.get(\n            (result: any) => {\n                const items: any[] = [];\n                result.docs.forEach((doc: any) => {\n                    purchaseDocs.push(doc);\n                    const item: any = doc.data();\n                    item.id = doc.id;\n                    items.push(item);\n                });\n                setRows((prev) => prev.concat(items));\n                setLoading(false);\n            },\n            () => {\n                setLoading(false);\n            },\n            purchaseDocs[purchaseDocs.length - 1]\n        );\n    };\n\n    const addPurchase = (newPurchase: PurchaseType) => {\n        rows.push(newPurchase);\n        rows.sort((a: PurchaseType, b: PurchaseType) => b.createdAt - a.createdAt);\n        setRows(rows);\n    };\n\n    const deletePurchase = (index: number) => {\n        setDeleting(true);\n        api.purchase.delete(\n            rows[index].id,\n            () => {\n                purchaseDocs.splice(index, 1);\n                const remaining = rows.filter((row, i) => i !== index);\n                setRows(remaining);\n                setDeleting(false);\n            },\n            () => {\n                setDeleting(false);\n            }\n        );\n    };\n\n    const editPurchase = () => {};\n\n    useEffect(() => {\n        loadPurchases();\n        loadProducts();\n        loadVendors();\n    }, []);\n\n    return {\n        openPurchaseModal,\n        closePurchaseModal,\n        modalOpen,\n        showSuccessMessage,\n        hideSuccessMessage,\n        deletePurchase,\n        addPurchase,\n        loadMorePurchases,\n        deleting,\n        loading,\n        rows,\n        products,\n        vendors,\n        loadingProducts,\n        loadingVendors,\n    };\n};\nexport default usePurchasesPage;\n","import PurchaseType from '../../model/purchase';\nimport {useState} from 'react';\nimport api from '../../api';\nimport CityType from '../../model/city';\nimport ProductType from '../../model/product';\nimport VendorType from '../../model/vendor';\n\nconst usePurchaseModal = (\n    onAdd: (purchase: PurchaseType) => void,\n    close: (created: boolean) => void\n) => {\n    const [product, setProduct] = useState<ProductType>();\n    const [vendor, setVendor] = useState<VendorType>();\n    const [quantity, setQuantity] = useState(0);\n    const [rate, setRate] = useState(0);\n\n    const [loading, setLoading] = useState(false);\n\n    const onQuantityChange = (value: number) => {\n        setQuantity(value);\n    };\n\n    const onRateChange = (value: number) => {\n        setRate(value);\n    };\n\n    const handleClick = () => {\n        if (!loading) {\n            setLoading(true);\n            const now = Date.now();\n            const newPurchase: PurchaseType = {\n                product: {id: product?.id, name: product?.name},\n                vendor: {id: vendor?.id, name: vendor?.name},\n                quantity: quantity,\n                rate: rate,\n                createdAt: now,\n                updatedAt: now,\n            };\n            api.purchase.add(\n                newPurchase,\n                (id: string) => {\n                    setLoading(false);\n                    newPurchase.id = id;\n                    onAdd(newPurchase);\n                    close(true);\n                },\n                () => {\n                    setLoading(false);\n                    //ToDo failed to add data\n                }\n            );\n        }\n    };\n    return {\n        handleClick,\n        onQuantityChange,\n        onRateChange,\n        setProduct,\n        setVendor,\n        loading,\n    };\n};\n\nexport default usePurchaseModal;\n","import React from 'react';\nimport {Dialog, DialogTitle, FormControl, TextField, Grid} from '@material-ui/core';\nimport Button from '../../components/Button/Button';\nimport usePurchaseModal from './usePurchaseModal';\nimport PurchaseType from '../../model/purchase';\nimport CityType from '../../model/city';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport VendorType from '../../model/vendor';\nimport ProductType from '../../model/product';\n\nexport interface PurchaseModalType {\n    open: boolean;\n    close: (created: boolean) => void;\n    onAdd: (product: PurchaseType) => void;\n    vendors: VendorType[];\n    products: ProductType[];\n}\nconst PurchaseModal = (props: PurchaseModalType) => {\n    const {open, close, onAdd} = props;\n    const {\n        handleClick,\n        onQuantityChange,\n        onRateChange,\n        loading,\n        setProduct,\n        setVendor,\n    } = usePurchaseModal(onAdd, close);\n    return (\n        <Dialog open={open}>\n            <DialogTitle>Add New Purchase</DialogTitle>\n            <Grid container spacing={2} style={{padding: 24}}>\n                <Grid item xs={12}>\n                    <Grid container spacing={2}>\n                        <Grid item xs={12}>\n                            <Autocomplete\n                                id=\"vendor-search\"\n                                options={props.vendors}\n                                getOptionLabel={(option) => {\n                                    return option.name || 'Dummy Vendor';\n                                }}\n                                renderInput={(params) => (\n                                    <TextField\n                                        {...params}\n                                        label=\"Search Vendor\"\n                                        variant=\"outlined\"\n                                    />\n                                )}\n                                onChange={(event: any, value: VendorType | null) => {\n                                    value && setVendor(value);\n                                }}\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <Autocomplete\n                                id=\"product-search\"\n                                options={props.products}\n                                getOptionLabel={(option) => {\n                                    return option.name || 'Dummy Product';\n                                }}\n                                renderInput={(params) => (\n                                    <TextField\n                                        {...params}\n                                        label=\"Search Product\"\n                                        variant=\"outlined\"\n                                    />\n                                )}\n                                onChange={(event: any, value: ProductType | null) => {\n                                    value && setProduct(value);\n                                }}\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                label=\"Quantity\"\n                                type=\"number\"\n                                onChange={(event) => {\n                                    onQuantityChange(parseInt(event.target.value));\n                                }}\n                            />\n                        </Grid>\n\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                label=\"Rate\"\n                                type=\"number\"\n                                onChange={(event) => {\n                                    onRateChange(parseInt(event.target.value));\n                                }}\n                            />\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid item xs={12}>\n                    <Grid container spacing={2} justify={'flex-end'}>\n                        <Grid item>\n                            <Button\n                                variant=\"text\"\n                                onClick={() => {\n                                    close(false);\n                                }}\n                            >\n                                Cancel\n                            </Button>\n                        </Grid>\n                        <Grid item>\n                            <Button onClick={handleClick} loading={loading}>\n                                Add Purchase\n                            </Button>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </Dialog>\n    );\n};\n\nexport default PurchaseModal;\n","import React from 'react';\nimport PurchasesTable from '../../layouts/PurchasesTable/PurchasesTable';\nimport {Typography, Grid, TextField, FormControl, Button} from '@material-ui/core';\nimport usePurchasesPage from './usePurchasesPage';\nimport PurchaseModal from '../../layouts/PurchaseModal/PurchaseModal';\nimport FloatingAlert from '../../components/FloatingAlert/FloatingAlert';\nimport PurchaseType from '../../model/purchase';\n\ninterface PurchasesPageType {\n    numberOfPurchases: number;\n}\nconst PurchasesPage = (props: PurchasesPageType) => {\n    const {\n        openPurchaseModal,\n        closePurchaseModal,\n        modalOpen,\n        showSuccessMessage,\n        hideSuccessMessage,\n        deletePurchase,\n        loadMorePurchases,\n        addPurchase,\n        deleting,\n        loading,\n        rows,\n        products,\n        loadingProducts,\n        vendors,\n        loadingVendors,\n    } = usePurchasesPage();\n    return (\n        <>\n            <Grid container>\n                <Grid item xs={1}></Grid>\n                <Grid item xs={10}>\n                    <Typography variant=\"h4\">Purchases</Typography>\n                    <Grid container alignItems=\"center\">\n                        <Grid item xs={6}>\n                            <FormControl fullWidth>\n                                <TextField variant=\"outlined\" placeholder=\"Search Purchases\" />\n                            </FormControl>\n                        </Grid>\n\n                        <Grid item xs={6}>\n                            <Grid container justify=\"flex-end\">\n                                <Grid item>\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        onClick={openPurchaseModal}\n                                        disabled={loadingProducts || loadingVendors}\n                                    >\n                                        Add New Purchase\n                                    </Button>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                    <Typography variant=\"body1\">\n                        Showing {rows.length} out of {props.numberOfPurchases} purchases\n                    </Typography>\n                    <PurchasesTable\n                        rows={rows}\n                        onRowDelete={deletePurchase}\n                        deleting={deleting}\n                        onLoadMore={loadMorePurchases}\n                        allLoaded={rows.length === props.numberOfPurchases}\n                        loading={loading}\n                    />\n                </Grid>\n            </Grid>\n            <FloatingAlert\n                severity=\"success\"\n                open={showSuccessMessage}\n                onClose={hideSuccessMessage}\n                message=\"Purchase added successfully\"\n            />\n            <PurchaseModal\n                open={modalOpen}\n                close={closePurchaseModal}\n                aria-labelledby=\"purchase_modal\"\n                onAdd={addPurchase}\n                products={products}\n                vendors={vendors}\n            />\n        </>\n    );\n};\n\nexport default PurchasesPage;\n","import React from 'react';\nimport {Route, Switch} from 'react-router-dom';\nimport {Typography} from '@material-ui/core';\nimport ProductsPage from '../views/Products/ProductsPage';\nimport CustomersPage from '../views/Customers/CustomersPage';\nimport CitiesPage from '../views/Cities/CitiesPage';\nimport VendorsPage from '../views/Vendors/VendorsPage';\nimport AccountsPage from '../views/Accounts/AccountsPage';\nimport PurchasesPage from '../views/Purchases/PurchasesPage';\n\ninterface RoutesType {\n    products: number;\n    purchases: number;\n    cities: number;\n    customers: number;\n    vendors: number;\n    accounts: number;\n}\nconst Routes = (props: RoutesType) => {\n    const routes = [\n        {\n            path: '/',\n            component: <ProductsPage numberOfProducts={props.products} />,\n        },\n        {\n            path: '/products',\n            component: <ProductsPage numberOfProducts={props.products} />,\n        },\n        {\n            path: '/purchases',\n            component: <PurchasesPage numberOfPurchases={props.purchases} />,\n        },\n        {\n            path: '/customers',\n            component: <CustomersPage numberOfCustomers={props.customers} />,\n        },\n        {\n            path: '/vendors',\n            component: <VendorsPage numberOfVendors={props.vendors} />,\n        },\n        {\n            path: '/accounts',\n            component: <AccountsPage numberOfAccounts={props.accounts} />,\n        },\n        {\n            path: '/cities',\n            component: <CitiesPage numberOfCities={props.cities} />,\n        },\n        {\n            path: '*',\n            component: <Typography variant=\"h3\">Some Page</Typography>,\n        },\n    ];\n\n    return (\n        <Switch>\n            {routes.map((route, index) => (\n                <Route exact path={route.path} key={index}>\n                    {route.component}\n                </Route>\n            ))}\n        </Switch>\n    );\n};\n\nexport default Routes;\n","import React from 'react';\nimport {Button} from '@material-ui/core';\nimport firebase from 'firebase';\n\nconst LogoutButton = () => {\n    const logout = () => {\n        firebase\n            .auth()\n            .signOut()\n            .then(() => {\n                console.log('succesfully signed out');\n            })\n            .catch((error) => {\n                console.log('error', error);\n            });\n    };\n    return (\n        <Button fullWidth variant=\"text\" color=\"primary\" onClick={logout}>\n            Logout\n        </Button>\n    );\n};\n\nexport default LogoutButton;\n","import {useEffect, useState} from 'react';\nimport api from '../../api';\n\nconst useWelcome = () => {\n    const [numberOfProducts, setNumberOfProducts] = useState(0);\n    const [numberOfCities, setNumberOfCities] = useState(0);\n    const [numberOfCustomers, setNumberOfCustomers] = useState(0);\n    const [numberOfVendors, setNumberOfVendors] = useState(0);\n    const [numberOfAccounts, setNumberOfAccounts] = useState(0);\n    const [numberOfPurchases, setNumberOfPurchases] = useState(0);\n\n    useEffect(() => {\n        api.counts.get((snapshot) => {\n            setNumberOfProducts(\n                snapshot.docs[0].data().products ? snapshot.docs[0].data().products : 0\n            );\n            setNumberOfCities(snapshot.docs[0].data().cities ? snapshot.docs[0].data().cities : 0);\n            setNumberOfCustomers(\n                snapshot.docs[0].data().customers ? snapshot.docs[0].data().customers : 0\n            );\n            setNumberOfVendors(\n                snapshot.docs[0].data().vendors ? snapshot.docs[0].data().vendors : 0\n            );\n            setNumberOfAccounts(\n                snapshot.docs[0].data().accounts ? snapshot.docs[0].data().accounts : 0\n            );\n            setNumberOfPurchases(\n                snapshot.docs[0].data().purchases ? snapshot.docs[0].data().purchases : 0\n            );\n        });\n    }, []);\n\n    return {\n        numberOfProducts,\n        numberOfCities,\n        numberOfCustomers,\n        numberOfVendors,\n        numberOfAccounts,\n        numberOfPurchases,\n    };\n};\n\nexport default useWelcome;\n","import React from 'react';\nimport {Grid, Typography} from '@material-ui/core';\nimport NavigationBarLayout from '../NavigationBarLayout/NavigationBarLayout';\nimport {BrowserRouter} from 'react-router-dom';\nimport Routes from '../../Routes/Routes';\nimport LogoutButton from '../../components/LogoutButton/LogoutButton';\nimport useWelcome from './useWelcome';\n\nconst Welcome = () => {\n    const {\n        numberOfProducts,\n        numberOfCities,\n        numberOfCustomers,\n        numberOfVendors,\n        numberOfAccounts,\n        numberOfPurchases,\n    } = useWelcome();\n    return (\n        <>\n            <Grid container style={{height: '100vh', backgroundColor: '#FFFFFF'}}>\n                <BrowserRouter basename=\"/bilalshop\">\n                    <Grid item xs={2}>\n                        <div style={{padding: 16}}>\n                            <Typography variant=\"h5\" align={'center'}>\n                                Bilal Shop\n                            </Typography>\n                            <LogoutButton />\n                        </div>\n\n                        <NavigationBarLayout\n                            products={numberOfProducts}\n                            cities={numberOfCities}\n                            customers={numberOfCustomers}\n                            vendors={numberOfVendors}\n                            accounts={numberOfAccounts}\n                            purchases={numberOfPurchases}\n                        />\n                    </Grid>\n                    <Grid item xs={10}>\n                        <Routes\n                            products={numberOfProducts}\n                            cities={numberOfCities}\n                            customers={numberOfCustomers}\n                            vendors={numberOfVendors}\n                            accounts={numberOfAccounts}\n                            purchases={numberOfPurchases}\n                        />\n                    </Grid>\n                </BrowserRouter>\n            </Grid>\n        </>\n    );\n};\n\nexport default Welcome;\n","import React, {useState, useEffect} from 'react';\nimport LoginComponent from './components/LoginComponent/LoginComponent';\nimport {CircularProgress} from '@material-ui/core';\nimport firebase from 'firebase';\nimport Welcome from './layouts/Welcome/Welcome';\n\nconst App = () => {\n    const [loading, setloading] = useState(true);\n    const [signedIn, setSignedIn] = useState(false);\n\n    useEffect(() => {\n        firebase.auth().onAuthStateChanged((user: any) => {\n            if (user) {\n                setSignedIn(true);\n            } else {\n                setSignedIn(false);\n            }\n            setloading(false);\n        });\n    }, []);\n\n    return loading ? <CircularProgress /> : signedIn ? <Welcome /> : <LoginComponent />;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {createMuiTheme, Theme} from '@material-ui/core/styles';\n\nconst primary: Theme = createMuiTheme({\n    props: {\n        MuiTextField: {\n            variant: 'outlined',\n        },\n        MuiButton: {\n            color: 'primary',\n            variant: 'contained',\n        },\n    },\n});\n\nexport default primary;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport firebase from 'firebase';\nimport {ThemeProvider} from '@material-ui/core';\nimport primary from './theme';\n\nconst config = {\n    apiKey: 'AIzaSyAN6y59cHMfZiXomgcBbIVh5p1m0yLQshI',\n    // authDomain: 'bilalshop-b7685.firebaseapp.com',\n    projectId: 'bilalshop-b7685',\n    // ...\n};\nfirebase.initializeApp(config);\n\nReactDOM.render(\n    <React.StrictMode>\n        <ThemeProvider theme={primary}>\n            <App />\n        </ThemeProvider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}