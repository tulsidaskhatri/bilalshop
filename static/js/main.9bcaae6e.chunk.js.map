{"version":3,"sources":["components/LoginComponent/LoginComponent.tsx","components/NavigationItem/NavigationItem.tsx","components/NavigationBar/NavigationBar.tsx","layouts/NavigationBarLayout/NavigationBarLayout.tsx","components/Button/Button.tsx","layouts/ProductsTable/ProductsTable.tsx","api.ts","views/Products/useProductsPage.ts","layouts/ProductModal/useProductModal.ts","layouts/ProductModal/ProductModal.tsx","components/FloatingAlert/FloatingAlert.tsx","views/Products/ProductsPage.tsx","layouts/CustomersTable/CustomersTable.tsx","views/Customers/useCustomersPage.ts","layouts/CustomerModal/useCustomerModal.ts","layouts/CustomerModal/CustomerModal.tsx","views/Customers/CustomersPage.tsx","views/Cities/useCitiesPage.ts","views/Cities/CitiesPage.tsx","Routes/Routes.tsx","components/LogoutButton/LogoutButton.tsx","layouts/Welcome/useWelcome.ts","layouts/Welcome/Welcome.tsx","App.tsx","serviceWorker.ts","theme.ts","index.tsx"],"names":["LoginComponent","useState","email","setEmail","password","setPassword","error","setError","Grid","container","justify","alignItems","direction","style","height","backgroundColor","item","md","sm","xs","Paper","padding","margin","spacing","Typography","variant","color","TextField","fullWidth","label","type","onChange","event","target","value","onClick","firebase","auth","signInWithEmailAndPassword","then","catch","NavigationItem","props","history","useHistory","ListItem","button","push","link","selected","divider","ListItemText","primary","text","NavigationBar","List","items","map","index","key","NavigationBarLayout","withRouter","navigationItems","products","location","pathname","customers","cities","Button","loading","disabled","others","startIcon","CircularProgress","size","children","columns","useStyles","makeStyles","head","ProductsTable","classes","TableContainer","Table","TableHead","root","TableRow","column","TableCell","TableBody","rows","row","id","console","log","name","rate","quantity","details","IconButton","onRowDelete","deleting","onLoadMore","allLoaded","api","product","get","successCallback","errorCallback","startAfter","query","firestore","collection","limit","orderBy","result","add","data","success","newProductDoc","delete","productId","doc","customer","newCustomerDoc","customerId","city","newCityDoc","cityId","counts","getSnapshot","onSnapshot","snapshot","productDocs","useProductsPage","modalOpen","setModalOpen","showSuccessMessage","setShowSuccessMessage","setRows","setDeleting","setLoading","useEffect","docs","forEach","openProductModal","closeProductModal","created","hideSuccessMessage","deleteProduct","splice","remaining","filter","i","addProduct","newProduct","sort","a","b","createdAt","loadMoreProducts","prev","concat","length","useProductModal","onAdd","close","setName","setDetails","handleClick","now","Date","updatedAt","onNameChange","onDetailsChange","ProductModal","open","Dialog","DialogTitle","multiline","FloatingAlert","Snackbar","autoHideDuration","onClose","reason","anchorOrigin","vertical","horizontal","severity","message","ProductsPage","FormControl","placeholder","numberOfProducts","aria-labelledby","CustomersTable","mobile","debt","customerDocs","useCustomersPage","setCities","loadingCities","setLoadingCities","openCustomerModal","closeCustomerModal","deleteCustomer","addCustomer","newCustomer","loadMoreCustomers","addCity","newCity","useCustomerModal","setMobile","setCity","onMobileChange","CustomerModal","Autocomplete","options","getOptionLabel","option","renderInput","params","CustomersPage","numberOfCustomers","cityDocs","useCitiesPage","adding","setAdding","deleteCity","oldRows","CitiesPage","Routes","routes","path","component","numberOfCities","route","exact","LogoutButton","signOut","useWelcome","setNumberOfProducts","setNumberOfCities","setNumberOfCustomers","Welcome","basename","align","App","setloading","signedIn","setSignedIn","onAuthStateChanged","user","Boolean","window","hostname","match","createMuiTheme","MuiTextField","MuiButton","initializeApp","apiKey","projectId","ReactDOM","render","StrictMode","ThemeProvider","theme","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9bcaae6e.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport {\n    FormControl,\n    Button,\n    TextField,\n    makeStyles,\n    Grid,\n    Typography,\n    Paper,\n} from '@material-ui/core';\nimport firebase from 'firebase';\n\nconst LoginComponent = () => {\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const [error, setError] = useState('');\n\n    const handleClick = () => {\n        setError('');\n        firebase\n            .auth()\n            .signInWithEmailAndPassword(email, password)\n            .then(() => {})\n            .catch(function (error) {\n                setError('Invalid User');\n            });\n    };\n\n    return (\n        <Grid\n            container\n            justify=\"center\"\n            alignItems=\"center\"\n            direction=\"row\"\n            style={{height: '100vh', backgroundColor: 'lightBlue'}}\n        >\n            <Grid item md={4} sm={8} xs={12}>\n                <Paper style={{padding: 32, margin: 16}}>\n                    <Grid container spacing={2}>\n                        <Grid item xs={12}>\n                            <Typography variant=\"h6\" color=\"error\">\n                                {error}\n                            </Typography>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                variant=\"outlined\"\n                                label=\"Email\"\n                                type=\"email\"\n                                onChange={(event) => {\n                                    setEmail(event.target.value);\n                                }}\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                variant=\"outlined\"\n                                type=\"password\"\n                                label=\"Password\"\n                                onChange={(event) => {\n                                    setPassword(event.target.value);\n                                }}\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <Button fullWidth variant=\"contained\" onClick={handleClick}>\n                                Login\n                            </Button>\n                        </Grid>\n                    </Grid>\n                </Paper>\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default LoginComponent;\n","import React from 'react';\nimport { Link, ListItem, ListItemText } from '@material-ui/core';\nimport { useHistory } from 'react-router-dom';\n\nexport interface NavigationItemProps {\n    text: string;\n    link: string;\n    selected: boolean;\n}\nconst NavigationItem = (props: NavigationItemProps) => {\n    const history = useHistory();\n    return (\n    <ListItem button onClick={()=>{history.push(props.link)}} selected={props.selected} divider>\n        <ListItemText primary={props.text}/>\n   </ListItem>\n    );\n}\n    \n\n\nexport default NavigationItem;","import React from 'react';\nimport NavigationItem, {NavigationItemProps} from '../NavigationItem/NavigationItem';\nimport { List } from '@material-ui/core';\n\ninterface NavigationBarProps {\n    items: NavigationItemProps[];\n}\n\nconst NavigationBar = (props: NavigationBarProps) => \n    <List>\n        {props.items.map((item:NavigationItemProps, index:number)=> (\n            <NavigationItem key={index} {...item}/>\n        ))}\n    </List>\n    \n\n\nexport default NavigationBar;","import React from 'react';\nimport TestComponent from '../../components/TestComponent/TestComponent';\nimport LoginComponent from '../../components/LoginComponent/LoginComponent';\nimport {Grid} from '@material-ui/core';\nimport NavigationBar from '../../components/NavigationBar/NavigationBar';\nimport {NavigationItemProps} from '../../components/NavigationItem/NavigationItem';\nimport {withRouter, RouteComponentProps} from 'react-router-dom';\n\ninterface NavigationBarLayoutType extends RouteComponentProps {\n    products: number;\n    cities: number;\n    customers: number;\n}\n\nconst NavigationBarLayout = withRouter(({history, ...props}: NavigationBarLayoutType) => {\n    const navigationItems: NavigationItemProps[] = [\n        {\n            text: `Products (${props.products})`,\n            link: '/products',\n            selected:\n                history.location.pathname === '/products' || history.location.pathname === '/',\n        },\n        {\n            text: 'Purchases',\n            link: '/purchases',\n            selected: history.location.pathname === '/purchases',\n        },\n        {\n            text: 'Sales',\n            link: '/sales',\n            selected: history.location.pathname === '/sales',\n        },\n        {\n            text: 'Vendors',\n            link: '/vendors',\n            selected: history.location.pathname === '/vendors',\n        },\n        {\n            text: `Customers (${props.customers})`,\n            link: '/customers',\n            selected: history.location.pathname === '/customers',\n        },\n        {\n            text: 'Employees',\n            link: '/employees',\n            selected: history.location.pathname === '/employees',\n        },\n        {\n            text: 'Accounts',\n            link: '/accounts',\n            selected: history.location.pathname === '/accounts',\n        },\n        {\n            text: 'Loans',\n            link: '/loans',\n            selected: history.location.pathname === '/loans',\n        },\n        {\n            text: 'Expenses',\n            link: '/expenses',\n            selected: history.location.pathname === '/expenses',\n        },\n        {\n            text: 'Vendor Payments',\n            link: '/vendorpayments',\n            selected: history.location.pathname === '/vendorpayments',\n        },\n        {\n            text: 'Customer Payments',\n            link: '/customerpayments',\n            selected: history.location.pathname === '/customerpayments',\n        },\n        {\n            text: 'Invoices',\n            link: '/invoices',\n            selected: history.location.pathname === '/invoices',\n        },\n        {\n            text: `Cities (${props.cities})`,\n            link: '/cities',\n            selected: history.location.pathname === '/cities',\n        },\n    ];\n    return <NavigationBar items={navigationItems} />;\n});\n\nexport default NavigationBarLayout;\n","import React from 'react';\nimport {\n    Button as MuiButton,\n    ButtonProps as MuiButtonProps,\n    CircularProgress,\n} from '@material-ui/core';\n\ninterface ButtonProps extends MuiButtonProps {\n    loading?: boolean;\n}\nconst Button = (props: ButtonProps) => {\n    const {loading, disabled, ...others} = {...props};\n    return (\n        <MuiButton\n            {...others}\n            disabled={loading || disabled}\n            startIcon={loading ? <CircularProgress style={{color: 'white'}} size={'1rem'} /> : ''}\n        >\n            {props.children}\n        </MuiButton>\n    );\n};\n\nexport default Button;\n","import React, {useState, useEffect} from 'react';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport {\n    Paper,\n    TableContainer,\n    Table,\n    TableHead,\n    TableRow,\n    TableCell,\n    TableSortLabel,\n    TableBody,\n    TablePagination,\n    makeStyles,\n    IconButton,\n} from '@material-ui/core';\nimport {firestore} from 'firebase';\nimport api from '../../api';\nimport ProductType from '../../model/product';\nimport Button from '../../components/Button/Button';\n\nconst columns: string[] = ['Name', 'Average Rate', 'Quantity', 'Total', 'Details', 'Actions'];\n\nconst useStyles = makeStyles({\n    head: {\n        backgroundColor: '#ECEDEF',\n    },\n});\n\ninterface ProductsTableType {\n    rows: ProductType[];\n    onRowDelete: Function;\n    deleting: boolean;\n    loading?: boolean;\n    allLoaded: boolean;\n    onLoadMore: () => void;\n}\n\nconst ProductsTable = (props: ProductsTableType) => {\n    const classes = useStyles();\n    return (\n        <>\n            <Paper>\n                <TableContainer>\n                    <Table>\n                        <TableHead classes={{root: classes.head}}>\n                            <TableRow>\n                                {columns.map((column: string, index: number) => (\n                                    <TableCell key={index}>{column}</TableCell>\n                                ))}\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {props.rows.map((row, index) => (\n                                <TableRow\n                                    key={row.id}\n                                    onClick={() => {\n                                        console.log('clicked', index);\n                                    }}\n                                >\n                                    <TableCell>{row.name}</TableCell>\n                                    <TableCell>{row.rate}</TableCell>\n                                    <TableCell>{row.quantity}</TableCell>\n                                    <TableCell>{row.rate * row.quantity}</TableCell>\n                                    <TableCell>{row.details}</TableCell>\n                                    <TableCell>\n                                        <IconButton\n                                            onClick={() => {\n                                                props.onRowDelete(index);\n                                            }}\n                                            disabled={props.deleting}\n                                        >\n                                            <DeleteIcon />\n                                        </IconButton>\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                    <Button\n                        onClick={props.onLoadMore}\n                        disabled={props.allLoaded}\n                        loading={props.loading}\n                    >\n                        Load More\n                    </Button>\n                </TableContainer>\n            </Paper>\n        </>\n    );\n};\n\nexport default ProductsTable;\n","import ProductType from './model/product';\nimport CountsType from './model/counts';\nimport {firestore} from 'firebase';\nimport {Dispatch, SetStateAction} from 'react';\nimport CustomerType from './model/customer';\nimport CityType from './model/city';\n\nconst api = {\n    product: {\n        get: (successCallback?: Function, errorCallback?: Function, startAfter?: any) => {\n            let query = firestore().collection('products').limit(5).orderBy('createdAt', 'desc');\n            if (startAfter) {\n                query = query.startAfter(startAfter);\n            }\n            query\n                .get()\n                .then((result) => {\n                    successCallback && successCallback(result);\n                })\n                .catch((error) => {\n                    errorCallback && errorCallback(error);\n                });\n        },\n        add: (data: ProductType, success: (id: string) => void, error: () => void) => {\n            firestore()\n                .collection('products')\n                .add(data)\n                .then((newProductDoc) => {\n                    success(newProductDoc.id);\n                })\n                .catch(() => {\n                    error();\n                });\n        },\n        delete: (productId?: string, success?: () => void, error?: () => void) => {\n            firestore()\n                .collection('products')\n                .doc(productId)\n                .delete()\n                .then(() => {\n                    success && success();\n                })\n                .catch((error) => {\n                    error && error();\n                });\n        },\n    },\n    customer: {\n        get: (successCallback?: Function, errorCallback?: Function, startAfter?: any) => {\n            let query = firestore().collection('customers').limit(5).orderBy('createdAt', 'desc');\n            if (startAfter) {\n                query = query.startAfter(startAfter);\n            }\n            query\n                .get()\n                .then((result) => {\n                    successCallback && successCallback(result);\n                })\n                .catch((error) => {\n                    errorCallback && errorCallback(error);\n                });\n        },\n        add: (data: CustomerType, success: (id: string) => void, error: () => void) => {\n            firestore()\n                .collection('customers')\n                .add(data)\n                .then((newCustomerDoc) => {\n                    success(newCustomerDoc.id);\n                })\n                .catch(() => {\n                    error();\n                });\n        },\n        delete: (customerId?: string, success?: () => void, error?: () => void) => {\n            firestore()\n                .collection('customers')\n                .doc(customerId)\n                .delete()\n                .then(() => {\n                    success && success();\n                })\n                .catch((error) => {\n                    error && error();\n                });\n        },\n    },\n    city: {\n        get: (successCallback?: Function, errorCallback?: Function, startAfter?: any) => {\n            let query = firestore().collection('cities').orderBy('name');\n            query\n                .get()\n                .then((result) => {\n                    successCallback && successCallback(result);\n                })\n                .catch((error) => {\n                    errorCallback && errorCallback(error);\n                });\n        },\n        add: (data: CityType, success: (id: string) => void, error: () => void) => {\n            firestore()\n                .collection('cities')\n                .add(data)\n                .then((newCityDoc) => {\n                    success(newCityDoc.id);\n                })\n                .catch(() => {\n                    error();\n                });\n        },\n        delete: (cityId?: string, success?: () => void, error?: () => void) => {\n            firestore()\n                .collection('cities')\n                .doc(cityId)\n                .delete()\n                .then(() => {\n                    success && success();\n                })\n                .catch((error) => {\n                    error && error();\n                });\n        },\n    },\n    counts: {\n        get: (getSnapshot: (snapshot: firestore.QuerySnapshot<firestore.DocumentData>) => void) => {\n            firestore()\n                .collection('counts')\n                .limit(1)\n                .onSnapshot((snapshot) => {\n                    getSnapshot(snapshot);\n                });\n        },\n    },\n};\n\nexport default api;\n","import {useState, useEffect} from 'react';\nimport api from '../../api';\nimport ProductType from '../../model/product';\nlet productDocs: any[] = [];\nconst useProductsPage = () => {\n    const [modalOpen, setModalOpen] = useState(false);\n    const [showSuccessMessage, setShowSuccessMessage] = useState(false);\n\n    const [rows, setRows] = useState<ProductType[]>([]);\n    const [deleting, setDeleting] = useState(false);\n    const [loading, setLoading] = useState(false);\n\n    const openProductModal = () => {\n        setModalOpen(true);\n    };\n\n    const closeProductModal = (created: boolean) => {\n        setModalOpen(false);\n        if (created) setShowSuccessMessage(true);\n    };\n\n    const hideSuccessMessage = () => {\n        setShowSuccessMessage(false);\n    };\n\n    const loadProducts = () => {\n        setLoading(true);\n        api.product.get(\n            (result: any) => {\n                productDocs = [];\n                const items: any[] = [];\n                result.docs.forEach((doc: any) => {\n                    productDocs.push(doc);\n                    const item: any = doc.data();\n                    item.id = doc.id;\n                    items.push(item);\n                });\n                setRows(items);\n                setLoading(false);\n            },\n            () => {\n                setLoading(false);\n            }\n        );\n    };\n\n    const loadMoreProducts = () => {\n        setLoading(true);\n        api.product.get(\n            (result: any) => {\n                const items: any[] = [];\n                result.docs.forEach((doc: any) => {\n                    productDocs.push(doc);\n                    const item: any = doc.data();\n                    item.id = doc.id;\n                    items.push(item);\n                });\n                setRows((prev) => prev.concat(items));\n                setLoading(false);\n            },\n            () => {\n                setLoading(false);\n            },\n            productDocs[productDocs.length - 1]\n        );\n    };\n\n    const addProduct = (newProduct: ProductType) => {\n        rows.push(newProduct);\n        rows.sort((a: ProductType, b: ProductType) => b.createdAt - a.createdAt);\n        setRows(rows);\n    };\n\n    const deleteProduct = (index: number) => {\n        setDeleting(true);\n        api.product.delete(\n            rows[index].id,\n            () => {\n                productDocs.splice(index, 1);\n                const remaining = rows.filter((row, i) => i !== index);\n                setRows(remaining);\n                setDeleting(false);\n            },\n            () => {\n                setDeleting(false);\n            }\n        );\n    };\n\n    const editProduct = () => {};\n\n    useEffect(() => {\n        loadProducts();\n    }, []);\n\n    return {\n        openProductModal,\n        closeProductModal,\n        modalOpen,\n        showSuccessMessage,\n        hideSuccessMessage,\n        deleteProduct,\n        addProduct,\n        loadMoreProducts,\n        deleting,\n        loading,\n        rows,\n    };\n};\nexport default useProductsPage;\n","import firebase from 'firebase';\nimport ProductType from '../../model/product';\nimport {useState} from 'react';\nimport api from '../../api';\n\nconst useProductModal = (\n    onAdd: (product: ProductType) => void,\n    close: (created: boolean) => void\n) => {\n    const [name, setName] = useState('');\n    const [details, setDetails] = useState('');\n    const [loading, setLoading] = useState(false);\n\n    const onNameChange = (value: string) => {\n        setName(value);\n    };\n\n    const onDetailsChange = (value: string) => {\n        setDetails(value);\n    };\n\n    const handleClick = () => {\n        if (!loading) {\n            setLoading(true);\n            const now = Date.now();\n            const newProduct: ProductType = {\n                name,\n                details,\n                quantity: 0,\n                rate: 0,\n                createdAt: now,\n                updatedAt: now,\n            };\n            api.product.add(\n                newProduct,\n                (id: string) => {\n                    setLoading(false);\n                    newProduct.id = id;\n                    onAdd(newProduct);\n                    close(true);\n                },\n                () => {\n                    setLoading(false);\n                    //ToDo failed to add data\n                }\n            );\n        }\n    };\n    return {\n        handleClick,\n        onNameChange,\n        onDetailsChange,\n        loading,\n    };\n};\n\nexport default useProductModal;\n","import React from 'react';\nimport {Dialog, DialogTitle, FormControl, TextField, Grid} from '@material-ui/core';\nimport Button from '../../components/Button/Button';\nimport useProductModal from './useProductModal';\nimport ProductType from '../../model/product';\n\nexport interface ProductModalType {\n    open: boolean;\n    close: (created: boolean) => void;\n    onAdd: (product: ProductType) => void;\n}\nconst ProductModal = (props: ProductModalType) => {\n    const {open, close, onAdd} = props;\n    const {handleClick, onNameChange, onDetailsChange, loading} = useProductModal(onAdd, close);\n    return (\n        <Dialog open={open}>\n            <DialogTitle>Add New Product</DialogTitle>\n            <Grid container spacing={2} style={{padding: 24}}>\n                <Grid item xs={12}>\n                    <Grid container spacing={2}>\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                label=\"Product Name\"\n                                onChange={(event) => {\n                                    onNameChange(event.target.value);\n                                }}\n                            />\n                        </Grid>\n\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                label=\"Details\"\n                                multiline\n                                rows={3}\n                                onChange={(event) => {\n                                    onDetailsChange(event.target.value);\n                                }}\n                            />\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid item xs={12}>\n                    <Grid container spacing={2} justify={'flex-end'}>\n                        <Grid item>\n                            <Button\n                                variant=\"text\"\n                                onClick={() => {\n                                    close(false);\n                                }}\n                            >\n                                Cancel\n                            </Button>\n                        </Grid>\n                        <Grid item>\n                            <Button onClick={handleClick} loading={loading}>\n                                Add Product\n                            </Button>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </Dialog>\n    );\n};\n\nexport default ProductModal;\n","import React from 'react';\nimport {Snackbar, SnackbarCloseReason} from '@material-ui/core';\nimport MuiAlert from '@material-ui/lab/Alert';\n\ninterface FloatingAlertProps {\n    message: string;\n    open: boolean;\n    severity: 'success' | 'info' | 'warning' | 'error';\n    onClose: () => void;\n}\nconst FloatingAlert = (props: FloatingAlertProps) => {\n    const onClose = (event: React.SyntheticEvent<any, Event>, reason: SnackbarCloseReason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        props.onClose();\n    };\n    return (\n        <Snackbar\n            open={props.open}\n            autoHideDuration={1000}\n            onClose={onClose}\n            anchorOrigin={{vertical: 'top', horizontal: 'right'}}\n        >\n            <MuiAlert variant=\"filled\" severity={props.severity}>\n                {props.message}\n            </MuiAlert>\n        </Snackbar>\n    );\n};\n\nexport default FloatingAlert;\n","import React from 'react';\nimport ProductsTable from '../../layouts/ProductsTable/ProductsTable';\nimport {Typography, Grid, TextField, FormControl, Button} from '@material-ui/core';\nimport useProductsPage from './useProductsPage';\nimport ProductModal from '../../layouts/ProductModal/ProductModal';\nimport FloatingAlert from '../../components/FloatingAlert/FloatingAlert';\nimport ProductType from '../../model/product';\n\ninterface ProductsPageType {\n    numberOfProducts: number;\n}\nconst ProductsPage = (props: ProductsPageType) => {\n    const {\n        openProductModal,\n        closeProductModal,\n        modalOpen,\n        showSuccessMessage,\n        hideSuccessMessage,\n        deleteProduct,\n        loadMoreProducts,\n        addProduct,\n        deleting,\n        loading,\n        rows,\n    } = useProductsPage();\n    return (\n        <>\n            <Grid container>\n                <Grid item xs={1}></Grid>\n                <Grid item xs={10}>\n                    <Typography variant=\"h4\">Products</Typography>\n                    <Grid container alignItems=\"center\">\n                        <Grid item xs={6}>\n                            <FormControl fullWidth>\n                                <TextField variant=\"outlined\" placeholder=\"Search Products\" />\n                            </FormControl>\n                        </Grid>\n\n                        <Grid item xs={6}>\n                            <Grid container justify=\"flex-end\">\n                                <Grid item>\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        onClick={openProductModal}\n                                    >\n                                        Add New Product\n                                    </Button>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                    <Typography variant=\"body1\">\n                        Showing {rows.length} out of {props.numberOfProducts} products\n                    </Typography>\n                    <ProductsTable\n                        rows={rows}\n                        onRowDelete={deleteProduct}\n                        deleting={deleting}\n                        onLoadMore={loadMoreProducts}\n                        allLoaded={rows.length === props.numberOfProducts}\n                        loading={loading}\n                    />\n                </Grid>\n            </Grid>\n            <FloatingAlert\n                severity=\"success\"\n                open={showSuccessMessage}\n                onClose={hideSuccessMessage}\n                message=\"Product added successfully\"\n            />\n            <ProductModal\n                open={modalOpen}\n                close={closeProductModal}\n                aria-labelledby=\"product_modal\"\n                onAdd={addProduct}\n            />\n        </>\n    );\n};\n\nexport default ProductsPage;\n","import React, {useState, useEffect} from 'react';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport {\n    Paper,\n    TableContainer,\n    Table,\n    TableHead,\n    TableRow,\n    TableCell,\n    TableSortLabel,\n    TableBody,\n    TablePagination,\n    makeStyles,\n    IconButton,\n} from '@material-ui/core';\nimport {firestore} from 'firebase';\nimport api from '../../api';\nimport ProductType from '../../model/product';\nimport Button from '../../components/Button/Button';\nimport CustomerType from '../../model/customer';\n\nconst createData = (\n    name: string,\n    averageRate: number,\n    quantity: number,\n    total: number,\n    details: string\n) => {\n    return {name, averageRate, quantity, total, details};\n};\n\nconst columns: string[] = ['Name', 'City', 'Mobile', 'Debt', 'Actions'];\n\nconst useStyles = makeStyles({\n    head: {\n        backgroundColor: '#ECEDEF',\n    },\n});\n\ninterface CustomersTableType {\n    rows: CustomerType[];\n    onRowDelete: Function;\n    deleting: boolean;\n    loading?: boolean;\n    allLoaded: boolean;\n    onLoadMore: () => void;\n}\n\nconst CustomersTable = (props: CustomersTableType) => {\n    const classes = useStyles();\n    return (\n        <>\n            <Paper>\n                <TableContainer>\n                    <Table>\n                        <TableHead classes={{root: classes.head}}>\n                            <TableRow>\n                                {columns.map((column: string, index: number) => (\n                                    <TableCell key={index}>{column}</TableCell>\n                                ))}\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {props.rows.map((row, index) => (\n                                <TableRow\n                                    key={row.id}\n                                    onClick={() => {\n                                        console.log('clicked', index);\n                                    }}\n                                >\n                                    <TableCell>{row.name}</TableCell>\n                                    <TableCell>{row.city.name}</TableCell>\n                                    <TableCell>{row.mobile}</TableCell>\n                                    <TableCell>{row.debt}</TableCell>\n                                    <TableCell>\n                                        <IconButton\n                                            onClick={() => {\n                                                props.onRowDelete(index);\n                                            }}\n                                            disabled={props.deleting}\n                                        >\n                                            <DeleteIcon />\n                                        </IconButton>\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                    <Button\n                        onClick={props.onLoadMore}\n                        disabled={props.allLoaded}\n                        loading={props.loading}\n                    >\n                        Load More\n                    </Button>\n                </TableContainer>\n            </Paper>\n        </>\n    );\n};\n\nexport default CustomersTable;\n","import {useState, useEffect} from 'react';\nimport api from '../../api';\nimport CustomerType from '../../model/customer';\nimport CityType from '../../model/city';\nlet customerDocs: any[] = [];\nconst useCustomersPage = () => {\n    const [modalOpen, setModalOpen] = useState(false);\n    const [showSuccessMessage, setShowSuccessMessage] = useState(false);\n\n    const [rows, setRows] = useState<CustomerType[]>([]);\n    const [cities, setCities] = useState<CityType[]>([]);\n    const [deleting, setDeleting] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [loadingCities, setLoadingCities] = useState(false);\n\n    const openCustomerModal = () => {\n        setModalOpen(true);\n    };\n\n    const closeCustomerModal = (created: boolean) => {\n        setModalOpen(false);\n        if (created) setShowSuccessMessage(true);\n    };\n\n    const hideSuccessMessage = () => {\n        setShowSuccessMessage(false);\n    };\n\n    const loadCustomers = () => {\n        setLoading(true);\n        api.customer.get(\n            (result: any) => {\n                customerDocs = [];\n                const items: any[] = [];\n                result.docs.forEach((doc: any) => {\n                    customerDocs.push(doc);\n                    const item: any = doc.data();\n                    item.id = doc.id;\n                    items.push(item);\n                });\n                setRows(items);\n                setLoading(false);\n            },\n            () => {\n                setLoading(false);\n            }\n        );\n    };\n\n    const loadCities = () => {\n        setLoadingCities(true);\n        api.city.get(\n            (result: any) => {\n                const items: any[] = [];\n                console.log('total', result.docs.length);\n                result.docs.forEach((doc: any) => {\n                    const item: any = doc.data();\n                    item.id = doc.id;\n                    items.push(item);\n                });\n                setCities(items);\n                setLoadingCities(false);\n            },\n            () => {\n                setLoadingCities(false);\n            }\n        );\n    };\n\n    const addCity = (name: string) => {\n        const now = Date.now();\n        const newCity: CityType = {\n            name,\n            createdAt: now,\n            updatedAt: now,\n        };\n\n        cities.push(newCity);\n        setCities(cities);\n    };\n\n    const loadMoreCustomers = () => {\n        setLoading(true);\n        api.customer.get(\n            (result: any) => {\n                const items: any[] = [];\n                result.docs.forEach((doc: any) => {\n                    customerDocs.push(doc);\n                    const item: any = doc.data();\n                    item.id = doc.id;\n                    items.push(item);\n                });\n                setRows((prev) => prev.concat(items));\n                setLoading(false);\n            },\n            () => {\n                setLoading(false);\n            },\n            customerDocs[customerDocs.length - 1]\n        );\n    };\n\n    const addCustomer = (newCustomer: CustomerType) => {\n        rows.push(newCustomer);\n        rows.sort((a: CustomerType, b: CustomerType) => b.createdAt - a.createdAt);\n        setRows(rows);\n    };\n\n    const deleteCustomer = (index: number) => {\n        setDeleting(true);\n        api.customer.delete(\n            rows[index].id,\n            () => {\n                customerDocs.splice(index, 1);\n                const remaining = rows.filter((row, i) => i !== index);\n                setRows(remaining);\n                setDeleting(false);\n            },\n            () => {\n                setDeleting(false);\n            }\n        );\n    };\n\n    const editCustomer = () => {};\n\n    useEffect(() => {\n        loadCustomers();\n        loadCities();\n    }, []);\n\n    return {\n        openCustomerModal,\n        closeCustomerModal,\n        modalOpen,\n        showSuccessMessage,\n        hideSuccessMessage,\n        deleteCustomer,\n        addCustomer,\n        loadMoreCustomers,\n        deleting,\n        loading,\n        rows,\n        cities,\n        loadingCities,\n        addCity,\n    };\n};\nexport default useCustomersPage;\n","import CustomerType from '../../model/customer';\nimport {useState} from 'react';\nimport api from '../../api';\nimport CityType from '../../model/city';\n\nconst useCustomerModal = (\n    onAdd: (customer: CustomerType) => void,\n    close: (created: boolean) => void\n) => {\n    const [name, setName] = useState('');\n    const [mobile, setMobile] = useState('');\n    const [city, setCity] = useState<CityType>();\n    const [loading, setLoading] = useState(false);\n\n    const onNameChange = (value: string) => {\n        setName(value);\n    };\n\n    const onMobileChange = (value: string) => {\n        setMobile(value);\n    };\n\n    const handleClick = () => {\n        if (!loading) {\n            setLoading(true);\n            const now = Date.now();\n            const newCustomer: CustomerType = {\n                name,\n                mobile,\n                city: {name: city?.name || 'Dummy City', id: city?.id},\n                debt: 0,\n                createdAt: now,\n                updatedAt: now,\n            };\n            api.customer.add(\n                newCustomer,\n                (id: string) => {\n                    setLoading(false);\n                    newCustomer.id = id;\n                    onAdd(newCustomer);\n                    close(true);\n                },\n                () => {\n                    setLoading(false);\n                    //ToDo failed to add data\n                }\n            );\n        }\n    };\n    return {\n        handleClick,\n        onNameChange,\n        onMobileChange,\n        city,\n        loading,\n        setCity,\n    };\n};\n\nexport default useCustomerModal;\n","import React from 'react';\nimport {Dialog, DialogTitle, FormControl, TextField, Grid} from '@material-ui/core';\nimport Button from '../../components/Button/Button';\nimport useCustomerModal from './useCustomerModal';\nimport CustomerType from '../../model/customer';\nimport CityType from '../../model/city';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\n\nexport interface CustomerModalType {\n    open: boolean;\n    close: (created: boolean) => void;\n    onAdd: (product: CustomerType) => void;\n    addCity: (name: string) => void;\n    cities: CityType[];\n}\nconst CustomerModal = (props: CustomerModalType) => {\n    const {open, close, onAdd} = props;\n    const {handleClick, onNameChange, setCity, onMobileChange, loading, city} = useCustomerModal(\n        onAdd,\n        close\n    );\n    return (\n        <Dialog open={open}>\n            <DialogTitle>Add New Customer</DialogTitle>\n            <Grid container spacing={2} style={{padding: 24}}>\n                <Grid item xs={12}>\n                    <Grid container spacing={2}>\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                label=\"Customer Name\"\n                                onChange={(event) => {\n                                    onNameChange(event.target.value);\n                                }}\n                            />\n                        </Grid>\n\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                label=\"Mobile Number\"\n                                onChange={(event) => {\n                                    onMobileChange(event.target.value);\n                                }}\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <Autocomplete\n                                id=\"city-search\"\n                                options={props.cities}\n                                getOptionLabel={(option) => {\n                                    return option.name;\n                                }}\n                                // style={{width: 300}}\n                                renderInput={(params) => (\n                                    <TextField {...params} label=\"City\" variant=\"outlined\" />\n                                )}\n                                onChange={(event: any, value: CityType | null) => {\n                                    value && setCity(value);\n                                }}\n                            />\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid item xs={12}>\n                    <Grid container spacing={2} justify={'flex-end'}>\n                        <Grid item>\n                            <Button\n                                variant=\"text\"\n                                onClick={() => {\n                                    close(false);\n                                }}\n                            >\n                                Cancel\n                            </Button>\n                        </Grid>\n                        <Grid item>\n                            <Button onClick={handleClick} loading={loading}>\n                                Add Customer\n                            </Button>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </Dialog>\n    );\n};\n\nexport default CustomerModal;\n","import React from 'react';\nimport CustomersTable from '../../layouts/CustomersTable/CustomersTable';\nimport {Typography, Grid, TextField, FormControl, Button} from '@material-ui/core';\nimport useCustomersPage from './useCustomersPage';\nimport CustomerModal from '../../layouts/CustomerModal/CustomerModal';\nimport FloatingAlert from '../../components/FloatingAlert/FloatingAlert';\nimport CustomerType from '../../model/customer';\n\ninterface CustomersPageType {\n    numberOfCustomers: number;\n}\nconst CustomersPage = (props: CustomersPageType) => {\n    const {\n        openCustomerModal,\n        closeCustomerModal,\n        modalOpen,\n        showSuccessMessage,\n        hideSuccessMessage,\n        deleteCustomer,\n        loadMoreCustomers,\n        addCustomer,\n        deleting,\n        loading,\n        rows,\n        cities,\n        loadingCities,\n        addCity,\n    } = useCustomersPage();\n    return (\n        <>\n            <Grid container>\n                <Grid item xs={1}></Grid>\n                <Grid item xs={10}>\n                    <Typography variant=\"h4\">Customers</Typography>\n                    <Grid container alignItems=\"center\">\n                        <Grid item xs={6}>\n                            <FormControl fullWidth>\n                                <TextField variant=\"outlined\" placeholder=\"Search Customers\" />\n                            </FormControl>\n                        </Grid>\n\n                        <Grid item xs={6}>\n                            <Grid container justify=\"flex-end\">\n                                <Grid item>\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        onClick={openCustomerModal}\n                                        disabled={loadingCities}\n                                    >\n                                        Add New Customer\n                                    </Button>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                    <Typography variant=\"body1\">\n                        Showing {rows.length} out of {props.numberOfCustomers} customers\n                    </Typography>\n                    <CustomersTable\n                        rows={rows}\n                        onRowDelete={deleteCustomer}\n                        deleting={deleting}\n                        onLoadMore={loadMoreCustomers}\n                        allLoaded={rows.length === props.numberOfCustomers}\n                        loading={loading}\n                    />\n                </Grid>\n            </Grid>\n            <FloatingAlert\n                severity=\"success\"\n                open={showSuccessMessage}\n                onClose={hideSuccessMessage}\n                message=\"Customer added successfully\"\n            />\n            <CustomerModal\n                open={modalOpen}\n                close={closeCustomerModal}\n                aria-labelledby=\"customer_modal\"\n                onAdd={addCustomer}\n                cities={cities}\n                addCity={addCity}\n            />\n        </>\n    );\n};\n\nexport default CustomersPage;\n","import {useState, useEffect} from 'react';\nimport api from '../../api';\nimport CityType from '../../model/city';\nlet cityDocs: any[] = [];\nconst useCitiesPage = () => {\n    const [showSuccessMessage, setShowSuccessMessage] = useState(false);\n    const [city, setCity] = useState('');\n    const [rows, setRows] = useState<CityType[]>([]);\n    const [deleting, setDeleting] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [adding, setAdding] = useState(false);\n\n    const hideSuccessMessage = () => {\n        setShowSuccessMessage(false);\n    };\n\n    const loadCities = () => {\n        setLoading(true);\n        api.city.get(\n            (result: any) => {\n                const items: any[] = [];\n                console.log('total', result.docs.length);\n                result.docs.forEach((doc: any) => {\n                    const item: any = doc.data();\n                    item.id = doc.id;\n                    items.push(item);\n                });\n                setRows(items);\n                setLoading(false);\n            },\n            () => {\n                setLoading(false);\n            }\n        );\n    };\n\n    const addCity = () => {\n        setAdding(true);\n        const now = Date.now();\n        const newCity: CityType = {\n            name: city,\n            createdAt: now,\n            updatedAt: now,\n        };\n        api.city.add(\n            newCity,\n            (id) => {\n                setAdding(false);\n                newCity.id = id;\n                setRows((oldRows) => oldRows.concat(newCity));\n                setCity('');\n            },\n            () => {\n                setAdding(false);\n            }\n        );\n    };\n\n    const deleteCity = (index: number) => {\n        setDeleting(true);\n        api.city.delete(\n            rows[index].id,\n            () => {\n                cityDocs.splice(index, 1);\n                const remaining = rows.filter((row, i) => i !== index);\n                setRows(remaining);\n                setDeleting(false);\n            },\n            () => {\n                setDeleting(false);\n            }\n        );\n    };\n\n    const editCity = () => {};\n\n    useEffect(() => {\n        loadCities();\n    }, []);\n\n    return {\n        showSuccessMessage,\n        hideSuccessMessage,\n        deleteCity,\n        addCity,\n        deleting,\n        loading,\n        adding,\n        rows,\n        setCity,\n        city,\n    };\n};\nexport default useCitiesPage;\n","import React from 'react';\nimport {\n    Typography,\n    Grid,\n    TextField,\n    FormControl,\n    List,\n    ListItem,\n    ListItemText,\n    CircularProgress,\n} from '@material-ui/core';\nimport useCitiesPage from './useCitiesPage';\nimport FloatingAlert from '../../components/FloatingAlert/FloatingAlert';\nimport CityType from '../../model/city';\nimport Button from '../../components/Button/Button';\n\ninterface CitiesPageType {\n    numberOfCities: number;\n}\nconst CitiesPage = (props: CitiesPageType) => {\n    const {\n        showSuccessMessage,\n        hideSuccessMessage,\n        deleteCity,\n        addCity,\n        deleting,\n        loading,\n        rows,\n        setCity,\n        adding,\n        city,\n    } = useCitiesPage();\n    return (\n        <>\n            <Grid container>\n                <Grid item>Cities</Grid>\n                <Grid container spacing={2}>\n                    <Grid item>\n                        <TextField\n                            value={city}\n                            label=\"New City Name\"\n                            onChange={(event) => {\n                                setCity(event.target.value);\n                            }}\n                        />\n                    </Grid>\n                    <Grid item>\n                        <Button onClick={addCity} loading={adding}>\n                            Add City\n                        </Button>\n                    </Grid>\n                </Grid>\n\n                <Grid container>\n                    {loading && <CircularProgress />}\n                    <List>\n                        {rows.map((city, index) => (\n                            <ListItem key={index}>\n                                <ListItemText>{city.name}</ListItemText>\n                            </ListItem>\n                        ))}\n                    </List>\n                </Grid>\n            </Grid>\n            {/* <FloatingAlert\n                severity=\"success\"\n                open={showSuccessMessage}\n                onClose={hideSuccessMessage}\n                message=\"City added successfully\"\n            /> */}\n        </>\n    );\n};\n\nexport default CitiesPage;\n","import React from 'react';\nimport {Route, Switch} from 'react-router-dom';\nimport {Typography} from '@material-ui/core';\nimport ProductsPage from '../views/Products/ProductsPage';\nimport CustomersPage from '../views/Customers/CustomersPage';\nimport CitiesPage from '../views/Cities/CitiesPage';\n\ninterface RoutesType {\n    products: number;\n    cities: number;\n    customers: number;\n}\nconst Routes = (props: RoutesType) => {\n    const routes = [\n        {\n            path: '/',\n            component: <ProductsPage numberOfProducts={props.products} />,\n        },\n        {\n            path: '/products',\n            component: <ProductsPage numberOfProducts={props.products} />,\n        },\n        {\n            path: '/customers',\n            component: <CustomersPage numberOfCustomers={props.customers} />,\n        },\n        {\n            path: '/cities',\n            component: <CitiesPage numberOfCities={props.cities} />,\n        },\n        {\n            path: '*',\n            component: <Typography variant=\"h3\">Some Page</Typography>,\n        },\n    ];\n\n    return (\n        <Switch>\n            {routes.map((route, index) => (\n                <Route exact path={route.path} key={index}>\n                    {route.component}\n                </Route>\n            ))}\n        </Switch>\n    );\n};\n\nexport default Routes;\n","import React from 'react';\nimport {Button} from '@material-ui/core';\nimport firebase from 'firebase';\n\nconst LogoutButton = () => {\n    const logout = () => {\n        firebase\n            .auth()\n            .signOut()\n            .then(() => {\n                console.log('succesfully signed out');\n            })\n            .catch((error) => {\n                console.log('error', error);\n            });\n    };\n    return (\n        <Button fullWidth variant=\"text\" color=\"primary\" onClick={logout}>\n            Logout\n        </Button>\n    );\n};\n\nexport default LogoutButton;\n","import {useEffect, useState} from 'react';\nimport api from '../../api';\n\nconst useWelcome = () => {\n    const [numberOfProducts, setNumberOfProducts] = useState(0);\n    const [numberOfCities, setNumberOfCities] = useState(0);\n    const [numberOfCustomers, setNumberOfCustomers] = useState(0);\n\n    useEffect(() => {\n        api.counts.get((snapshot) => {\n            setNumberOfProducts(\n                snapshot.docs[0].data().products ? snapshot.docs[0].data().products : 0\n            );\n            setNumberOfCities(snapshot.docs[0].data().cities ? snapshot.docs[0].data().cities : 0);\n            setNumberOfCustomers(\n                snapshot.docs[0].data().customers ? snapshot.docs[0].data().customers : 0\n            );\n        });\n    }, []);\n\n    return {\n        numberOfProducts,\n        numberOfCities,\n        numberOfCustomers,\n    };\n};\n\nexport default useWelcome;\n","import React from 'react';\nimport {Grid, Typography} from '@material-ui/core';\nimport NavigationBarLayout from '../NavigationBarLayout/NavigationBarLayout';\nimport {BrowserRouter} from 'react-router-dom';\nimport Routes from '../../Routes/Routes';\nimport LogoutButton from '../../components/LogoutButton/LogoutButton';\nimport useWelcome from './useWelcome';\n\nconst Welcome = () => {\n    const {numberOfProducts, numberOfCities, numberOfCustomers} = useWelcome();\n    return (\n        <>\n            <Grid container style={{height: '100vh', backgroundColor: '#FFFFFF'}}>\n                <BrowserRouter basename=\"/bilalshop\">\n                    <Grid item xs={2}>\n                        <div style={{padding: 16}}>\n                            <Typography variant=\"h5\" align={'center'}>\n                                Bilal Shop\n                            </Typography>\n                            <LogoutButton />\n                        </div>\n\n                        <NavigationBarLayout\n                            products={numberOfProducts}\n                            cities={numberOfCities}\n                            customers={numberOfCustomers}\n                        />\n                    </Grid>\n                    <Grid item xs={10}>\n                        <Routes\n                            products={numberOfProducts}\n                            cities={numberOfCities}\n                            customers={numberOfCustomers}\n                        />\n                    </Grid>\n                </BrowserRouter>\n            </Grid>\n        </>\n    );\n};\n\nexport default Welcome;\n","import React, {useState, useEffect} from 'react';\nimport LoginComponent from './components/LoginComponent/LoginComponent';\nimport {CircularProgress} from '@material-ui/core';\nimport firebase from 'firebase';\nimport Welcome from './layouts/Welcome/Welcome';\n\nconst App = () => {\n    const [loading, setloading] = useState(true);\n    const [signedIn, setSignedIn] = useState(false);\n\n    useEffect(() => {\n        firebase.auth().onAuthStateChanged((user: any) => {\n            if (user) {\n                setSignedIn(true);\n            } else {\n                setSignedIn(false);\n            }\n            setloading(false);\n        });\n    }, []);\n\n    return loading ? <CircularProgress /> : signedIn ? <Welcome /> : <LoginComponent />;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {createMuiTheme, Theme} from '@material-ui/core/styles';\n\nconst primary: Theme = createMuiTheme({\n    props: {\n        MuiTextField: {\n            variant: 'outlined',\n        },\n        MuiButton: {\n            color: 'primary',\n            variant: 'contained',\n        },\n    },\n});\n\nexport default primary;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport firebase from 'firebase';\nimport {ThemeProvider} from '@material-ui/core';\nimport primary from './theme';\n\nconst config = {\n    apiKey: 'AIzaSyAN6y59cHMfZiXomgcBbIVh5p1m0yLQshI',\n    // authDomain: 'bilalshop-b7685.firebaseapp.com',\n    projectId: 'bilalshop-b7685',\n    // ...\n};\nfirebase.initializeApp(config);\n\nReactDOM.render(\n    <React.StrictMode>\n        <ThemeProvider theme={primary}>\n            <App />\n        </ThemeProvider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}