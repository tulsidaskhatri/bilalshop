{"version":3,"sources":["poco.ts","pages/Login/Login.tsx","components/NavigationItem/NavigationItem.tsx","components/NavigationBar/NavigationBar.tsx","layouts/NavigationBarLayout/NavigationBarLayout.tsx","views/Products/useProductsPage.ts","components/Button/Button.tsx","validate.ts","layouts/ProductModal/useProductModal.ts","layouts/ProductModal/ProductModal.tsx","components/FloatingAlert/FloatingAlert.tsx","colors.ts","theme.ts","components/Typography/Typography.tsx","layouts/ProductsList/ProductsList.tsx","components/PageContainer/PageContainer.tsx","views/Products/ProductsPage.tsx","views/Customers/useCustomersPage.ts","layouts/CustomerModal/useCustomerModal.ts","CityContext.tsx","layouts/CustomerModal/CustomerModal.tsx","layouts/CustomersList/CustomersList.tsx","views/Customers/CustomersPage.tsx","views/Cities/useCitiesPage.ts","layouts/CityModal/useCityModal.ts","layouts/CityModal/CityModal.tsx","views/Cities/CitiesPage.tsx","views/Vendors/useVendorsPage.ts","layouts/VendorModal/useVendorModal.ts","layouts/VendorModal/VendorModal.tsx","layouts/VendorsList/VendorsList.tsx","views/Vendors/VendorsPage.tsx","views/Accounts/useAccountsPage.ts","layouts/AccountModal/useAccountModal.ts","layouts/AccountModal/AccountModal.tsx","layouts/AccountsList/AccountsList.tsx","views/Accounts/AccountsPage.tsx","views/Purchases/usePurchasesPage.ts","layouts/PurchaseModal/usePurchaseModal.ts","layouts/PurchaseModal/PurchaseModal.tsx","layouts/PurchasesList/PurchasesList.tsx","views/Purchases/PurchasesPage.tsx","views/Invoices/useInvoicesPage.ts","layouts/InvoiceModal/useInvoiceModal.ts","layouts/InvoiceModal/InvoiceModal.tsx","layouts/InvoicesList/InvoicesList.tsx","components/CenterSpinner/CenterSpinner.tsx","layouts/SalesModal/SalesModal.tsx","views/Invoices/InvoicesPage.tsx","views/VendorPayments/useVendorPaymentsPage.ts","layouts/VendorPaymentModal/useVendorPaymentModal.ts","layouts/VendorPaymentModal/VendorPaymentModal.tsx","layouts/VendorPaymentsList/VendorPaymentsList.tsx","views/VendorPayments/VendorPaymentsPage.tsx","views/CustomerPaymentsPage/useCustomerPaymentsPage.ts","layouts/CustomerPaymentModal/useCustomerPaymentModal.ts","layouts/CustomerPaymentModal/CustomerPaymentModal.tsx","layouts/CustomerPaymentsList/CustomerPaymentsList.tsx","views/CustomerPaymentsPage/CustomerPaymentsPage.tsx","api.ts","views/Employees/useEmployeesPage.ts","layouts/EmployeeModal/useEmployeeModal.ts","layouts/EmployeeModal/EmployeeModal.tsx","layouts/EmployeesList/EmployeesList.tsx","views/Employees/EmployeesPage.tsx","Routes/Routes.tsx","layouts/Welcome/useWelcome.ts","components/LogoutButton/LogoutButton.tsx","components/AppBar/AppBar.tsx","layouts/Welcome/Welcome.tsx","components/Authenticator/Authenticator.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["BASE_URL","memData","postCall","url","data","success","failure","method","fetch","headers","Authorization","localStorage","getItem","body","JSON","stringify","then","response","a","status","json","catch","error","unauthorized","window","location","href","getCall","redirect","api","authenticate","user","login","email","password","setItem","accessToken","register","name","logout","product","list","offset","query","create","delete","id","update","account","city","customer","vendor","purchase","vendorPayment","payment","customerPayment","invoice","sales","case","getNext","bodyParts","all","subitems","Login","useState","setEmail","setPassword","setError","Grid","container","justify","alignItems","direction","style","height","backgroundColor","item","md","sm","xs","Paper","padding","margin","spacing","Typography","variant","color","TextField","fullWidth","label","type","onChange","event","target","value","onClick","reload","message","statusText","NavigationItem","props","history","useHistory","ListItem","button","push","link","close","selected","divider","ListItemText","primary","text","NavigationBar","theme","useTheme","isMobile","useMediaQuery","breakpoints","down","Drawer","anchor","open","showNav","onClose","toggleNavigation","List","items","map","index","key","NavigationBarLayout","withRouter","navigationItems","pathname","useProductsPage","modalOpen","setModalOpen","showSuccessMessage","setShowSuccessMessage","rows","setRows","deleting","setDeleting","loading","setLoading","totalRows","setTotalRows","currentProduct","setCurrentProduct","closeProductModal","created","loadProducts","clear","length","poco","concat","count","useEffect","showNewProductModal","undefined","hideSuccessMessage","deleteProduct","remaining","filter","row","i","prev","showEditProductModal","addProduct","newProduct","productResponse","unshift","updateProduct","foundIndex","findIndex","onChangeSearch","Button","disabled","others","startIcon","CircularProgress","size","children","exists","isNotANumber","isNaN","Number","validateMobileFormat","mobile","test","useProductModal","onSubmit","existingProduct","setName","details","setDetails","quantity","setQuantity","rate","setRate","toString","errorMessage","setErrorMessage","hasErrorName","setHasErrorName","hasErrorQuantity","setHasErrorQuantity","hasErrorRate","setHasErrorRate","resetErrors","handleClick","valid","isValid","cancel","onNameChange","onDetailsChange","onQuantityChange","onRateChange","ProductModal","Dialog","fullScreen","DialogTitle","paddingLeft","defaultValue","multiline","FloatingAlert","Snackbar","autoHideDuration","reason","anchorOrigin","vertical","horizontal","severity","colors","blue","light","base","interaction","dark","pink","green","darkBlue","secondary","system","red","orange","grayscale","colorPalette","warning","createMuiTheme","palette","main","MuiTextField","MuiButton","H3","SH2","fontWeight","Body","Caption","useStyles","makeStyles","head","ProductsList","classes","className","borderBottom","paddingTop","paddingBottom","fontSize","borderLeft","paddingRight","IconButton","aria-label","onEditProduct","onRowDelete","onLoadMore","allLoaded","wrapper","content","overflowY","header","PageWrapper","PageContent","PageHeader","FormControl","placeholder","loadedRows","openModal","ProductsPage","aria-labelledby","useCustomersPage","currentCustomer","setCurrentCustomer","closeCustomerModal","loadCustomers","showNewCustomerModal","showEditCustomerModal","deleteCustomer","addCustomer","newCustomer","customerResponse","updateCustomer","useCustomerModal","cityContext","existingCustomer","setMobile","debt","setDebt","setCity","hasErrorMobile","setHasErrorMobile","hasErrorCity","setHasErrorCity","hasErrorDebt","setHasErrorDebt","cityId","cities","find","onMobileChange","onDebtChange","CityContext","React","createContext","setCities","CityContextProvider","loadCities","Provider","CustomerModal","useContext","Autocomplete","options","getOptionLabel","option","renderInput","params","CustomersList","onEditCustomer","CustomersPage","Consumer","useCitiesPage","currentCity","setCurrentCity","closeCityModal","showNewCityModal","showEditCityModal","deleteCity","addCity","newCity","console","log","cityResponse","updateCity","loadMoreCities","useCityModal","existingCity","CityModal","CitiesPage","useVendorsPage","currentVendor","setCurrentVendor","closeVendorModal","loadVendors","showNewVendorModal","showEditVendorModal","deleteVendor","addVendor","newVendor","vendorResponse","updateVendor","useVendorModal","existingVendor","VendorModal","VendorsList","onEditVendor","VendorsPage","useAccountsPage","currentAccount","setCurrentAccount","closeAccountModal","loadAccounts","showNewAccountModal","deleteAccount","showEditAccountModal","addAccount","newAccount","accountResponse","updateAccount","useAccountModal","existingAccount","setType","amount","setAmount","hasErrorType","setHasErrorType","hasErrorAmount","setHasErrorAmount","onTypeChange","onAmountChange","AccountModal","InputLabel","Select","labelId","MenuItem","AccountsList","Chip","onEditAccount","AccountsPage","usePurchasesPage","currentPurchase","setCurrentPurchase","closePurchaseModal","loadPurchases","showNewPurchaseModal","deletePurchase","showEditPurchaseModal","addPurchase","newPurchase","purchaseResponse","updatePurchase","usePurchaseModal","existingPurchase","productsList","setProductsList","vendorsList","setVendorsList","setProduct","setVendor","loadingProducts","setLoadingProducts","loadingVendors","setLoadingVendors","hasErrorProduct","setHasErrorProduct","hasErrorVendor","setHasErrorVendor","vendorId","vendorName","productId","productName","PurchaseModal","PurchasesList","PurchasesPage","useInvoicesPage","openSalesModal","setOpenSalesModal","loadingSales","setLoadingSales","detailedInvoice","setDetailedInvoice","currentInvoice","setCurrentInvoice","closeInvoiceModal","loadInvoices","showNewInvoiceModal","deleteInvoice","showEditInvoiceModal","addInvoice","newInvoice","invoiceResponse","bill","totalSales","updateInvoice","loadInvoiceSales","closeInvoiceSales","useInvoiceModal","existingInvoice","setCustomer","setSales","customersList","setCustomersList","loadingCustomers","setLoadingCustomers","customerId","customerName","addSale","newSales","InvoiceModal","sale","InvoicesList","onRowView","CenterSpinner","alignContent","SalesModal","Table","TableHead","TableRow","TableCell","TableBody","InvoicesPage","useVendorPaymentsPage","currentVendorPayment","setCurrentVendorPayment","closeVendorPaymentModal","loadVendorPayments","showNewVendorPaymentModal","deleteVendorPayment","showEditVendorPaymentModal","addVendorPayment","newVendorPayment","vendorPaymentResponse","updateVendorPayment","useVendorPaymentModal","existingVendorPayment","accountsList","setAccountsList","setAccount","hasErrorAccount","setHasErrorAccount","loadingAccounts","setLoadingAccounts","accountId","accountName","VendorPaymentModal","VendorPaymentsList","VendorPaymentsPage","useCustomerPaymentsPage","currentCustomerPayment","setCurrentCustomerPayment","closeCustomerPaymentModal","loadCustomerPayments","showNewCustomerPaymentModal","deleteCustomerPayment","showEditCustomerPaymentModal","addCustomerPayment","newCustomerPayment","customerPaymentResponse","updateCustomerPayment","useCustomerPaymentModal","existingCustomerPayment","hasErrorCustomer","setHasErrorCustomer","CustomerPaymentModal","CustomerPaymentsList","CustomerPaymentsPage","get","successCallback","errorCallback","startAfter","firestore","collection","limit","orderBy","result","add","newProductDoc","doc","newCustomerDoc","newPurchaseDoc","purchaseId","newInvoiceDoc","invoiceId","newCityDoc","newVendorPaymentDoc","vendorPaymentId","newCustomerPaymentDoc","customerPaymentId","employee","newEmployeeDoc","employeeId","counts","getSnapshot","onSnapshot","snapshot","employeeDocs","useEmployeesPage","docs","forEach","openEmployeeModal","closeEmployeeModal","deleteEmployee","splice","addEmployee","newEmployee","sort","b","createdAt","loadMoreEmployees","useEmployeeModal","onAdd","salary","setSalary","designation","setDesignation","cnic","setCnic","now","Date","updatedAt","onSalaryChange","onDesignationChange","onCnicChange","EmployeeModal","EmployeesList","EmployeesPage","Routes","routes","path","component","route","exact","useWelcome","setShowNav","toggleDrawer","LogoutButton","removeItem","root","flexGrow","menuButton","marginRight","title","TopAppBar","AppBar","position","Toolbar","edge","substring","toUpperCase","replace","getTitle","welcome","Welcome","basename","lg","Authenticator","loggedIn","setLoggedIn","App","Boolean","hostname","match","firebase","initializeApp","apiKey","projectId","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4033232d.chunk.js","sourcesContent":["import {LoginResponse} from './types/responses';\nimport ProductType from './model/product';\nimport AccountType from './model/account';\nimport CityType from './model/city';\nimport CustomerType from './model/customer';\nimport PurchaseType from './model/purchase';\nimport VendorType from './model/vendor';\nimport InvoiceType from './model/invoice';\nimport VendorPaymentType from './model/vendorPayment';\nimport CustomerPaymentType from './model/customerPayment';\n\nconst BASE_URL = 'http://ec2-18-191-136-200.us-east-2.compute.amazonaws.com:7000';\nexport const memData: any = {};\nconst postCall = (\n    url: string,\n    data: Object,\n    success?: Function,\n    failure?: Function,\n    method: string = 'POST'\n) => {\n    fetch(BASE_URL + url, {\n        method: method,\n        headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${localStorage.getItem('token')}`,\n        },\n        body: JSON.stringify(data),\n    })\n        .then(async (response) => {\n            if (response.status == 200) {\n                success && success(await response.json());\n            } else {\n                failure && failure(response);\n            }\n        })\n        .catch((error) => {\n            failure && failure(error);\n        });\n};\n\nconst unauthorized = () => {\n    window.location.href = '/login';\n};\n\nconst getCall = (url: string, success?: Function, failure?: Function, redirect: boolean = true) => {\n    fetch(BASE_URL + url, {\n        headers: {\n            Authorization: `Bearer ${localStorage.getItem('token')}`,\n        },\n    })\n        .then((response) => {\n            if (response.status === 401 || response.status === 403) {\n                if (redirect) {\n                    unauthorized();\n                } else {\n                    failure && failure({status: 'Failure'});\n                }\n            }\n            return response.json();\n        })\n        .then((response) => {\n            success && success(response);\n        })\n        .catch((error) => {\n            failure && failure(error);\n        });\n};\n\nconst api = {\n    authenticate: (success: Function, failure: Function) => {\n        getCall('/user/authenticate', success, failure, false);\n    },\n    user: {\n        login: (email: string, password: string, success: Function, failure?: Function) => {\n            postCall(\n                '/user/login',\n                {email: email, password: password},\n                (response: LoginResponse) => {\n                    localStorage.setItem('token', response.data.accessToken);\n                    success(response);\n                },\n                failure\n            );\n        },\n        register: (\n            name: string,\n            email: string,\n            password: string,\n            success?: Function,\n            failure?: Function\n        ) => {\n            postCall(\n                '/user/register',\n                {name: name, email: email, password: password},\n                success,\n                failure\n            );\n        },\n        logout: (success: Function, failure: Function) => {\n            postCall('/user/logout', {}, success, failure, 'DELETE');\n        },\n    },\n    product: {\n        list: (\n            offset: number | null,\n            query: string | null,\n            success: Function,\n            failure: Function\n        ) => {\n            getCall(`/product/list?offset=${offset}&query=${query}`, success, failure, false);\n        },\n        create: (product: ProductType, success: Function, failure: Function) => {\n            postCall('/product/create', product, success, failure);\n        },\n        delete: (id: number, success: Function, failure: Function) => {\n            postCall('/product/delete', {id: id}, success, failure, 'DELETE');\n        },\n        update: (product: ProductType, success: Function, failure: Function) => {\n            postCall('/product/update', product, success, failure, 'PUT');\n        },\n    },\n    account: {\n        list: (\n            offset: number | null,\n            query: string | null,\n            success: Function,\n            failure: Function\n        ) => {\n            getCall(`/account/list?offset=${offset}&query=${query}`, success, failure, false);\n        },\n        create: (account: AccountType, success: Function, failure: Function) => {\n            postCall('/account/create', account, success, failure);\n        },\n        delete: (id: number, success: Function, failure: Function) => {\n            postCall('/account/delete', {id: id}, success, failure, 'DELETE');\n        },\n        update: (account: AccountType, success: Function, failure: Function) => {\n            postCall('/account/update', account, success, failure, 'PUT');\n        },\n    },\n    city: {\n        list: (success: Function, failure: Function) => {\n            getCall('/city/list', success, failure, false);\n        },\n        create: (city: CityType, success: Function, failure: Function) => {\n            postCall('/city/create', city, success, failure);\n        },\n        delete: (id: number, success: Function, failure: Function) => {\n            postCall('/city/delete', {id: id}, success, failure, 'DELETE');\n        },\n        update: (city: CityType, success: Function, failure: Function) => {\n            postCall('/city/update', city, success, failure, 'PUT');\n        },\n    },\n    customer: {\n        list: (\n            offset: number | null,\n            query: string | null,\n            success: Function,\n            failure: Function\n        ) => {\n            getCall(`/customer/list?offset=${offset}&query=${query}`, success, failure, false);\n        },\n        create: (customer: CustomerType, success: Function, failure: Function) => {\n            postCall('/customer/create', customer, success, failure);\n        },\n        delete: (id: number, success: Function, failure: Function) => {\n            postCall('/customer/delete', {id: id}, success, failure, 'DELETE');\n        },\n        update: (product: CustomerType, success: Function, failure: Function) => {\n            postCall('/customer/update', product, success, failure, 'PUT');\n        },\n    },\n    vendor: {\n        list: (\n            offset: number | null,\n            query: string | null,\n            success: Function,\n            failure: Function\n        ) => {\n            getCall(`/vendor/list?offset=${offset}&query=${query}`, success, failure, false);\n        },\n        create: (vendor: VendorType, success: Function, failure: Function) => {\n            postCall('/vendor/create', vendor, success, failure);\n        },\n        delete: (id: number, success: Function, failure: Function) => {\n            postCall('/vendor/delete', {id: id}, success, failure, 'DELETE');\n        },\n        update: (product: VendorType, success: Function, failure: Function) => {\n            postCall('/vendor/update', product, success, failure, 'PUT');\n        },\n    },\n    purchase: {\n        list: (\n            offset: number | null,\n            query: string | null,\n            success: Function,\n            failure: Function\n        ) => {\n            getCall(`/purchase/list?offset=${offset}&query=${query}`, success, failure, false);\n        },\n        create: (purchase: PurchaseType, success: Function, failure: Function) => {\n            postCall('/purchase/create', purchase, success, failure);\n        },\n        delete: (id: number, success: Function, failure: Function) => {\n            postCall('/purchase/delete', {id: id}, success, failure, 'DELETE');\n        },\n        update: (product: PurchaseType, success: Function, failure: Function) => {\n            postCall('/purchase/update', product, success, failure, 'PUT');\n        },\n    },\n    vendorPayment: {\n        list: (\n            offset: number | null,\n            query: string | null,\n            success: Function,\n            failure: Function\n        ) => {\n            getCall(\n                `/vendor/payment/list?offset=${offset}&query=${query}`,\n                success,\n                failure,\n                false\n            );\n        },\n        create: (payment: VendorPaymentType, success: Function, failure: Function) => {\n            postCall('/vendor/payment/create', payment, success, failure);\n        },\n        delete: (id: number, success: Function, failure: Function) => {\n            postCall('/vendor/payment/delete', {id: id}, success, failure, 'DELETE');\n        },\n        update: (payment: VendorPaymentType, success: Function, failure: Function) => {\n            postCall('/vendor/payment/update', payment, success, failure, 'PUT');\n        },\n    },\n    customerPayment: {\n        list: (\n            offset: number | null,\n            query: string | null,\n            success: Function,\n            failure: Function\n        ) => {\n            getCall(\n                `/customer/payment/list?offset=${offset}&query=${query}`,\n                success,\n                failure,\n                false\n            );\n        },\n        create: (payment: CustomerPaymentType, success: Function, failure: Function) => {\n            postCall('/customer/payment/create', payment, success, failure);\n        },\n        delete: (id: number, success: Function, failure: Function) => {\n            postCall('/customer/payment/delete', {id: id}, success, failure, 'DELETE');\n        },\n        update: (payment: CustomerPaymentType, success: Function, failure: Function) => {\n            postCall('/customer/payment/update', payment, success, failure, 'PUT');\n        },\n    },\n    invoice: {\n        list: (\n            offset: number | null,\n            query: string | null,\n            success: Function,\n            failure: Function\n        ) => {\n            getCall(`/invoice/list?offset=${offset}&query=${query}`, success, failure, false);\n        },\n        sales: (id: number, success: Function, failure: Function) => {\n            getCall(`/invoice/${id}`, success, failure, false);\n        },\n        create: (invoice: InvoiceType, success: Function, failure: Function) => {\n            postCall('/invoice/create', invoice, success, failure);\n        },\n        delete: (id: number, success: Function, failure: Function) => {\n            postCall('/invoice/delete', {id: id}, success, failure, 'DELETE');\n        },\n        update: (invoice: InvoiceType, success: Function, failure: Function) => {\n            postCall('/invoice/update', invoice, success, failure, 'PUT');\n        },\n    },\n    case: {\n        getNext: (success: Function, failure: Function) => {\n            getCall('/case/next', success, failure, false);\n        },\n    },\n    bodyParts: {\n        all: (success: Function, failure: Function) => {\n            getCall('/bodypart/all', success, failure, false);\n        },\n    },\n    subitems: {\n        all: (success: Function, failure: Function) => {\n            getCall('/subitem/all', success, failure, false);\n        },\n    },\n};\n\nexport default api;\n","import React, {useState} from 'react';\nimport {\n    FormControl,\n    Button,\n    TextField,\n    makeStyles,\n    Grid,\n    Typography,\n    Paper,\n    Link,\n} from '@material-ui/core';\nimport api, {memData} from '../../poco';\nimport {useHistory} from 'react-router-dom';\nimport {LoginResponse} from '../../types/responses';\n\nconst Login = () => {\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const [error, setError] = useState('');\n\n    const handleClick = () => {\n        setError('');\n        api.user.login(\n            email,\n            password,\n            (response: LoginResponse) => {\n                if (response.success) {\n                    window.location.reload();\n                } else {\n                    setError(response.message);\n                }\n            },\n            (error: any) => {\n                setError(error.statusText);\n            }\n        );\n    };\n\n    return (\n        <Grid\n            container\n            justify=\"center\"\n            alignItems=\"center\"\n            direction=\"row\"\n            style={{height: '100vh', backgroundColor: 'lightBlue'}}\n        >\n            <Grid item md={4} sm={8} xs={12}>\n                <Paper style={{padding: 32, margin: 16}}>\n                    <Grid container spacing={2}>\n                        <Grid item xs={12}>\n                            <Typography variant=\"h6\" color=\"error\">\n                                {error}\n                            </Typography>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                variant=\"outlined\"\n                                label=\"Email\"\n                                type=\"email\"\n                                onChange={(event) => {\n                                    setEmail(event.target.value);\n                                }}\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                variant=\"outlined\"\n                                type=\"password\"\n                                label=\"Password\"\n                                onChange={(event) => {\n                                    setPassword(event.target.value);\n                                }}\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <Button fullWidth variant=\"contained\" onClick={handleClick}>\n                                Login\n                            </Button>\n                        </Grid>\n                    </Grid>\n                </Paper>\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default Login;\n","import React from 'react';\nimport {Link, ListItem, ListItemText} from '@material-ui/core';\nimport {useHistory} from 'react-router-dom';\n\nexport interface NavigationItemProps {\n    text: string;\n    link: string;\n    selected: boolean;\n}\n\ninterface CloseProps extends NavigationItemProps {\n    close: () => void;\n}\n\nconst NavigationItem = (props: CloseProps) => {\n    const history = useHistory();\n    return (\n        <ListItem\n            button\n            onClick={() => {\n                history.push(props.link);\n                props.close();\n            }}\n            selected={props.selected}\n            divider\n        >\n            <ListItemText primary={props.text} />\n        </ListItem>\n    );\n};\n\nexport default NavigationItem;\n","import React from 'react';\nimport NavigationItem, {NavigationItemProps} from '../NavigationItem/NavigationItem';\nimport {List, Drawer, useTheme, useMediaQuery} from '@material-ui/core';\n\ninterface NavigationBarProps {\n    items: NavigationItemProps[];\n    showNav: boolean;\n    toggleNavigation: () => void;\n}\n\nconst NavigationBar = (props: NavigationBarProps) => {\n    const theme = useTheme();\n    const isMobile = useMediaQuery(theme.breakpoints.down('sm'));\n    return (\n        <>\n            {isMobile && (\n                <Drawer anchor={'left'} open={props.showNav} onClose={props.toggleNavigation}>\n                    <List>\n                        {props.items.map((item: NavigationItemProps, index: number) => (\n                            <NavigationItem key={index} {...item} close={props.toggleNavigation} />\n                        ))}\n                    </List>\n                </Drawer>\n            )}\n\n            {!isMobile && (\n                <List>\n                    {props.items.map((item: NavigationItemProps, index: number) => (\n                        <NavigationItem key={index} {...item} close={props.toggleNavigation} />\n                    ))}\n                </List>\n            )}\n        </>\n    );\n};\n\nexport default NavigationBar;\n","import React from 'react';\nimport TestComponent from '../../components/TestComponent/TestComponent';\nimport LoginComponent from '../../components/LoginComponent/LoginComponent';\nimport {Grid} from '@material-ui/core';\nimport NavigationBar from '../../components/NavigationBar/NavigationBar';\nimport {NavigationItemProps} from '../../components/NavigationItem/NavigationItem';\nimport {withRouter, RouteComponentProps} from 'react-router-dom';\n\ninterface NavigationBarLayoutType extends RouteComponentProps {\n    showNav: boolean;\n    toggleNavigation: () => void;\n}\n\nconst NavigationBarLayout = withRouter(({history, ...props}: NavigationBarLayoutType) => {\n    const navigationItems: NavigationItemProps[] = [\n        {\n            text: `Products`,\n            link: '/products',\n            selected:\n                history.location.pathname === '/products' || history.location.pathname === '/',\n        },\n        {\n            text: `Purchases`,\n            link: '/purchases',\n            selected: history.location.pathname === '/purchases',\n        },\n        {\n            text: `Vendors`,\n            link: '/vendors',\n            selected: history.location.pathname === '/vendors',\n        },\n        {\n            text: `Customers`,\n            link: '/customers',\n            selected: history.location.pathname === '/customers',\n        },\n        // {\n        //     text: `Employees`,\n        //     link: '/employees',\n        //     selected: history.location.pathname === '/employees',\n        // },\n        {\n            text: `Accounts`,\n            link: '/accounts',\n            selected: history.location.pathname === '/accounts',\n        },\n        // {\n        //     text: 'Loans',\n        //     link: '/loans',\n        //     selected: history.location.pathname === '/loans',\n        // },\n        {\n            text: 'Expenses',\n            link: '/expenses',\n            selected: history.location.pathname === '/expenses',\n        },\n        {\n            text: `Vendor Payments`,\n            link: '/payments/vendors',\n            selected: history.location.pathname === '/payments/vendors',\n        },\n        {\n            text: `Customer Payments`,\n            link: '/payments/customers',\n            selected: history.location.pathname === '/payments/customer',\n        },\n        {\n            text: `Invoices`,\n            link: '/invoices',\n            selected: history.location.pathname === '/invoices',\n        },\n        {\n            text: `Cities`,\n            link: '/cities',\n            selected: history.location.pathname === '/cities',\n        },\n    ];\n    return (\n        <NavigationBar\n            items={navigationItems}\n            showNav={props.showNav}\n            toggleNavigation={props.toggleNavigation}\n        />\n    );\n});\n\nexport default NavigationBarLayout;\n","import {useState, useEffect, ChangeEvent} from 'react';\nimport poco from '../../poco';\nimport ProductType from '../../model/product';\nimport {ProductListResponse, Response, ProductResponse} from '../../types/responses';\n\nconst useProductsPage = () => {\n    const [modalOpen, setModalOpen] = useState(false);\n    const [showSuccessMessage, setShowSuccessMessage] = useState(false);\n\n    const [rows, setRows] = useState<ProductType[]>([]);\n    const [deleting, setDeleting] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [offset, setOffset] = useState(0);\n    const [query, setQuery] = useState();\n    const [totalRows, setTotalRows] = useState(0);\n\n    const [currentProduct, setCurrentProduct] = useState<ProductType>();\n\n    const showNewProductModal = () => {\n        setCurrentProduct(undefined);\n        setModalOpen(true);\n    };\n\n    const closeProductModal = (created: boolean) => {\n        setModalOpen(false);\n        if (created) setShowSuccessMessage(true);\n    };\n\n    const showEditProductModal = (index: number) => {\n        setCurrentProduct(rows[index]);\n        setModalOpen(true);\n    };\n\n    const hideSuccessMessage = () => {\n        setShowSuccessMessage(false);\n    };\n\n    const onChangeSearch = (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        loadProducts(true, event.target.value);\n    };\n\n    const loadProducts = (clear: boolean = false, query: string = '') => {\n        if (loading) return;\n        let offset = rows.length;\n        if (clear === true) {\n            setRows([]);\n            offset = 0;\n        }\n        setLoading(true);\n        poco.product.list(\n            offset,\n            query,\n            (response: ProductListResponse) => {\n                setLoading(false);\n                setRows((rows) => rows.concat(response.data.rows));\n                setTotalRows(response.data.count);\n            },\n            () => {\n                setLoading(false);\n            }\n        );\n    };\n\n    const addProduct = (newProduct: ProductType) => {\n        setLoading(true);\n        poco.product.create(\n            newProduct,\n            (productResponse: ProductResponse) => {\n                setLoading(false);\n                if (productResponse.success) {\n                    rows.unshift(productResponse.data);\n                    setRows(rows);\n                    setTotalRows(prev => prev + 1);\n                    closeProductModal(true);\n                } else {\n                    //TODO: Failure\n                }\n            },\n            () => {\n                //TODO: Failure\n                setLoading(false);\n                //ToDo failed to add data\n            }\n        );\n    };\n\n    const deleteProduct = (index: number) => {\n        setDeleting(true);\n        poco.product.delete(\n            rows[index].id!,\n            (response: Response) => {\n                if (response.success) {\n                    const remaining = rows.filter((row, i) => i !== index);\n                    setRows(remaining);\n                    setTotalRows(prev => prev - 1);\n                } else {\n                    //TODO: Handle error\n                }\n                setDeleting(false);\n            },\n            () => {\n                //TODO: Handle error\n                setDeleting(false);\n            }\n        );\n    };\n\n    const updateProduct = (newProduct: ProductType) => {\n        setLoading(true);\n        poco.product.update(\n            newProduct,\n            (productResponse: ProductResponse) => {\n                setLoading(false);\n                if (productResponse.success) {\n                    var foundIndex = rows.findIndex(\n                        (product) => product.id == productResponse.data.id\n                    );\n                    rows[foundIndex] = productResponse.data;\n                    setCurrentProduct(undefined);\n                    closeProductModal(true);\n                } else {\n                    //TODO: Failure\n                }\n            },\n            () => {\n                //TODO: Failure\n                setLoading(false);\n                //ToDo failed to add data\n            }\n        );\n    };\n\n    useEffect(() => {\n        loadProducts(true);\n    }, []);\n\n    return {\n        showNewProductModal,\n        closeProductModal,\n        modalOpen,\n        showSuccessMessage,\n        hideSuccessMessage,\n        deleteProduct,\n        showEditProductModal,\n        addProduct,\n        updateProduct,\n        onChangeSearch,\n        loadProducts,\n        deleting,\n        loading,\n        rows,\n        currentProduct,\n        totalRows,\n    };\n};\nexport default useProductsPage;\n","import React from 'react';\nimport {\n    Button as MuiButton,\n    ButtonProps as MuiButtonProps,\n    CircularProgress,\n    makeStyles,\n} from '@material-ui/core';\nimport {colorPalette} from '../../theme';\n\ninterface ButtonProps extends MuiButtonProps {\n    loading?: boolean;\n}\n\nconst Button = (props: ButtonProps) => {\n    const {loading, disabled, ...others} = {...props};\n    return (\n        <MuiButton\n            {...others}\n            disabled={loading || disabled}\n            startIcon={loading ? <CircularProgress size={'1rem'} /> : ''}\n        >\n            {props.children}\n        </MuiButton>\n    );\n};\n\nexport default Button;\n","export const exists = (value?: string):boolean =>  {\n    if(value && value.length > 0) return true;\n    return false;\n}\n\nexport const isNotANumber = (value?: string):boolean =>  {\n    if(exists(value) && isNaN(Number(value!))) return true\n    return false;\n}\n\nexport const validateMobileFormat = (mobile: string): boolean => {\n    return /^[+]\\d{12,15}$/.test(mobile);\n };\n \n","import firebase from 'firebase';\nimport ProductType from '../../model/product';\nimport {useState, useEffect} from 'react';\nimport {ProductResponse} from '../../types/responses';\nimport {exists, isNotANumber} from '../../validate';\n\nconst useProductModal = (\n    onSubmit: (product: ProductType) => void,\n    close: (created: boolean) => void,\n    loading: boolean,\n    existingProduct?: ProductType\n) => {\n    const [name, setName] = useState('');\n    const [details, setDetails] = useState('');\n    const [quantity, setQuantity] = useState('');\n    const [rate, setRate] = useState('');\n\n    useEffect(() => {\n        setName(existingProduct?.name || '');\n        setDetails(existingProduct?.details || '');\n        setQuantity(existingProduct?.quantity?.toString() || '');\n        setRate(existingProduct?.rate?.toString() || '');\n    }, [existingProduct]);\n\n    const [errorMessage, setErrorMessage] = useState('');\n\n    const [hasErrorName, setHasErrorName] = useState(false);\n    const [hasErrorQuantity, setHasErrorQuantity] = useState(false);\n    const [hasErrorRate, setHasErrorRate] = useState(false);\n\n    const onNameChange = (value: string) => {\n        if (hasErrorName) {\n            setErrorMessage('');\n            setHasErrorName(false);\n        }\n        setName(value);\n    };\n\n    const onDetailsChange = (value: string) => {\n        setDetails(value);\n    };\n\n    const onQuantityChange = (value: string) => {\n        if (hasErrorQuantity) {\n            setErrorMessage('');\n            setHasErrorQuantity(false);\n        }\n        setQuantity(value);\n    };\n\n    const onRateChange = (value: string) => {\n        if (hasErrorRate) {\n            setErrorMessage('');\n            setHasErrorRate(false);\n        }\n        setRate(value);\n    };\n\n    const isValid = (): boolean => {\n        resetErrors();\n        let valid = true;\n        if (!exists(name)) {\n            valid = false;\n            setHasErrorName(true);\n            setErrorMessage('Please give some name to your product.');\n        } else if (isNotANumber(rate)) {\n            valid = false;\n            setHasErrorRate(true);\n            setErrorMessage('Rate can only be digits');\n        } else if (isNotANumber(quantity)) {\n            valid = false;\n            setHasErrorQuantity(true);\n            setErrorMessage('Quantity can only be digits');\n        }\n\n        return valid;\n    };\n\n    const resetErrors = () => {\n        setErrorMessage('');\n        setHasErrorName(false);\n        setHasErrorRate(false);\n        setHasErrorQuantity(false);\n    };\n\n    const handleClick = () => {\n        if (!loading && isValid()) {\n            const newProduct: ProductType = {\n                id: existingProduct?.id,\n                name,\n                details,\n                quantity: Number(quantity) || 0,\n                rate: Number(rate) || 0,\n            };\n            onSubmit(newProduct);\n        }\n    };\n\n    const cancel = () => {\n        resetErrors();\n        close(false);\n    };\n\n    return {\n        handleClick,\n        cancel,\n        onNameChange,\n        onDetailsChange,\n        onQuantityChange,\n        onRateChange,\n        errorMessage,\n        hasErrorName,\n        hasErrorQuantity,\n        hasErrorRate,\n    };\n};\n\nexport default useProductModal;\n","import React from 'react';\nimport {Dialog, DialogTitle, FormControl, TextField, Grid, Typography} from '@material-ui/core';\nimport Button from '../../components/Button/Button';\nimport useProductModal from './useProductModal';\nimport ProductType from '../../model/product';\n\nexport interface ProductModalType {\n    open: boolean;\n    loading: boolean;\n    existingProduct?: ProductType;\n    close: (created: boolean) => void;\n    onSubmit: (product: ProductType) => void;\n}\nconst ProductModal = (props: ProductModalType) => {\n    const {open, close, onSubmit, existingProduct, loading} = props;\n    const {\n        handleClick,\n        onNameChange,\n        onDetailsChange,\n        onQuantityChange,\n        onRateChange,\n        errorMessage,\n        hasErrorName,\n        hasErrorQuantity,\n        hasErrorRate,\n        cancel,\n    } = useProductModal(onSubmit, close, loading, existingProduct);\n    return (\n        <Dialog fullScreen open={open}>\n            <DialogTitle>{existingProduct ? 'Update Your Product' : 'Add New Product'}</DialogTitle>\n            {errorMessage.length > 0 && (\n                <div style={{paddingLeft: 24}}>\n                    <Typography variant=\"body1\" color=\"error\">\n                        {errorMessage}\n                    </Typography>\n                </div>\n            )}\n            <Grid container spacing={2} style={{padding: 24}}>\n                <Grid item xs={12}>\n                    <Grid container spacing={2}>\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                defaultValue={existingProduct?.name}\n                                error={hasErrorName}\n                                label=\"Product Name\"\n                                onChange={(event) => {\n                                    onNameChange(event.target.value);\n                                }}\n                            />\n                        </Grid>\n\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                defaultValue={existingProduct?.details}\n                                label=\"Details\"\n                                multiline\n                                rows={3}\n                                onChange={(event) => {\n                                    onDetailsChange(event.target.value);\n                                }}\n                            />\n                        </Grid>\n                        <Grid item xs={6}>\n                            <TextField\n                                fullWidth\n                                defaultValue={existingProduct?.quantity}\n                                error={hasErrorQuantity}\n                                label=\"Quantity\"\n                                onChange={(event) => {\n                                    onQuantityChange(event.target.value);\n                                }}\n                            />\n                        </Grid>\n                        <Grid item xs={6}>\n                            <TextField\n                                fullWidth\n                                defaultValue={existingProduct?.rate}\n                                error={hasErrorRate}\n                                label=\"Rate\"\n                                onChange={(event) => {\n                                    onRateChange(event.target.value);\n                                }}\n                            />\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid item xs={12}>\n                    <Grid container spacing={2} justify={'flex-end'}>\n                        <Grid item>\n                            <Button\n                                variant=\"text\"\n                                onClick={() => {\n                                    cancel();\n                                }}\n                            >\n                                Cancel\n                            </Button>\n                        </Grid>\n                        <Grid item>\n                            <Button onClick={handleClick} loading={loading}>\n                                {existingProduct ? 'Update Product' : 'Add Product'}\n                            </Button>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </Dialog>\n    );\n};\n\nexport default ProductModal;\n","import React from 'react';\nimport {Snackbar, SnackbarCloseReason} from '@material-ui/core';\nimport MuiAlert from '@material-ui/lab/Alert';\n\ninterface FloatingAlertProps {\n    message: string;\n    open: boolean;\n    severity: 'success' | 'info' | 'warning' | 'error';\n    onClose: () => void;\n}\nconst FloatingAlert = (props: FloatingAlertProps) => {\n    const onClose = (event: React.SyntheticEvent<any, Event>, reason: SnackbarCloseReason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        props.onClose();\n    };\n    return (\n        <Snackbar\n            open={props.open}\n            autoHideDuration={1000}\n            onClose={onClose}\n            anchorOrigin={{vertical: 'top', horizontal: 'right'}}\n        >\n            <MuiAlert variant=\"filled\" severity={props.severity}>\n                {props.message}\n            </MuiAlert>\n        </Snackbar>\n    );\n};\n\nexport default FloatingAlert;\n","export const colors = {\n    primary: {\n        blue: {\n            light: '#F0F8FF',\n            base: '#0066CC',\n            interaction: '#006BF0',\n            dark: '#003C66',\n        },\n        pink: {\n            light: '#FFF0F3',\n            base: '#FF4B73',\n            interaction: '#FF4B73',\n            dark: '#660016',\n        },\n        green: {\n            light: '#F2FFF0',\n            base: '#6ECC5A',\n            interaction: '#38A321',\n            dark: '#136600',\n        },\n        darkBlue: {\n            light: '#F0F4FF',\n            base: '#001E6E',\n            interaction: '#001E6E',\n            dark: '#000B29',\n        },\n    },\n    secondary: {\n        blue: {\n            light: '#1DCEFF',\n            dark: '#004EC9',\n        },\n        pink: {\n            light: '#FFAFB9',\n            dark: '#A61B56',\n        },\n        green: {\n            light: '#29A900',\n            dark: '#007600',\n        },\n    },\n    system: {\n        red: {\n            light: '#FFF5F8',\n            base: '#DC0043',\n            dark: '#66001F',\n        },\n        orange: {\n            light: '#FFF7F5',\n            base: '#D43500',\n            dark: '#661A00',\n        },\n        green: {\n            light: '#F0FFF0',\n            base: '#00814B',\n            dark: '#064D00',\n        },\n    },\n    grayscale: [\n        '#FFFFFF',\n        '#FCFCFC',\n        '#F5F5F5',\n        '#E1E1E1',\n        '#C8C8C8',\n        '#AFAFAF',\n        '#686868',\n        '#4B4B4B',\n        '#141414',\n    ],\n};\n","import {createMuiTheme, Theme} from '@material-ui/core/styles';\nimport {colors} from './colors';\n\nexport const colorPalette = {\n    primary: [\n        colors.primary.blue,\n        colors.primary.pink,\n        colors.primary.green,\n        colors.primary.darkBlue,\n    ],\n    secondary: [colors.secondary.blue, colors.secondary.pink, colors.secondary.green],\n    system: {\n        error: colors.system.red,\n        warning: colors.system.orange,\n        success: colors.system.green,\n    },\n    grayscale: colors.grayscale,\n};\n\nconst primary: Theme = createMuiTheme({\n    palette: {\n        primary: {\n            main: colorPalette.primary[0].interaction,\n        },\n    },\n    props: {\n        MuiTextField: {\n            variant: 'outlined',\n        },\n        MuiButton: {\n            color: 'primary',\n            variant: 'contained',\n        },\n    },\n});\n\nexport default primary;\n","import React from 'react';\n\nimport {Typography} from '@material-ui/core';\nimport {colorPalette} from '../../theme';\n\ninterface TypographyType {\n    color?: string;\n    children?: React.ReactNode;\n}\n\nexport const H2 = (props: TypographyType) => (\n    <Typography variant=\"h5\" style={{color: props.color ? props.color : colorPalette.grayscale[8]}}>\n        {props.children}\n    </Typography>\n);\n\nexport const H3 = (props: TypographyType) => (\n    <Typography variant=\"h6\" style={{color: props.color ? props.color : colorPalette.grayscale[8]}}>\n        {props.children}\n    </Typography>\n);\n\nexport const SH2 = (props: TypographyType) => (\n    <Typography\n        variant=\"h5\"\n        style={{color: props.color ? props.color : colorPalette.grayscale[8], fontWeight: 'bold'}}\n    >\n        {props.children}\n    </Typography>\n);\n\nexport const SH3 = (props: TypographyType) => (\n    <Typography\n        variant=\"h6\"\n        style={{color: props.color ? props.color : colorPalette.grayscale[8], fontWeight: 'bold'}}\n    >\n        {props.children}\n    </Typography>\n);\n\nexport const Body = (props: TypographyType) => (\n    <Typography\n        variant=\"body1\"\n        style={{color: props.color ? props.color : colorPalette.grayscale[8]}}\n    >\n        {props.children}\n    </Typography>\n);\n\nexport const Caption = (props: TypographyType) => (\n    <Typography\n        variant=\"caption\"\n        style={{color: props.color ? props.color : colorPalette.grayscale[8]}}\n    >\n        {props.children}\n    </Typography>\n);\n","import React, {useState, useEffect} from 'react';\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\nimport EditIcon from '@material-ui/icons/Edit';\nimport {\n    Paper,\n    TableContainer,\n    Table,\n    TableHead,\n    TableRow,\n    TableCell,\n    TableSortLabel,\n    TableBody,\n    TablePagination,\n    makeStyles,\n    IconButton,\n    Card,\n    Typography,\n    Grid,\n} from '@material-ui/core';\nimport {firestore} from 'firebase';\nimport api from '../../api';\nimport ProductType from '../../model/product';\nimport Button from '../../components/Button/Button';\nimport {H3, Body} from '../../components/Typography/Typography';\nimport {colorPalette} from '../../theme';\nimport InboxIcon from '@material-ui/icons/Inbox';\nimport MoreButton from '../../components/MoreButton/MoreButton';\n\nconst columns: string[] = ['Name', 'Average Rate', 'Quantity', 'Total', 'Details', 'Actions'];\n\nconst useStyles = makeStyles({\n    head: {},\n});\n\ninterface ProductsListType {\n    rows: ProductType[];\n    onRowDelete: Function;\n    onEditProduct: (index: number) => void;\n    deleting: boolean;\n    loading?: boolean;\n    allLoaded: boolean;\n    onLoadMore: () => void;\n}\n\nconst ProductsList = (props: ProductsListType) => {\n    const classes = useStyles();\n    return (\n        <div className={classes.head}>\n            {props.rows.map((item: ProductType, index) => (\n                <div\n                    style={{\n                        padding: 8,\n                        borderBottom: `1px solid ${colorPalette.grayscale[4]}`,\n                    }}\n                    key={index}\n                >\n                    <Grid container>\n                        <Grid item xs={1} style={{paddingTop: 8, paddingBottom: 8}}>\n                            <H3>\n                                <InboxIcon fontSize=\"small\" />\n                            </H3>\n                        </Grid>\n                        <Grid item xs={6} style={{paddingTop: 8, paddingBottom: 8}}>\n                            <H3>{item.name}</H3>\n                            <div style={{paddingTop: 4}}>\n                                <Body color={colorPalette.grayscale[7]}>{item.details}</Body>\n                            </div>\n                        </Grid>\n                        <Grid\n                            item\n                            style={{\n                                borderLeft: `1px solid ${colorPalette.grayscale[3]}`,\n                                paddingLeft: 16,\n                                paddingRight: 8,\n                                paddingTop: 16,\n                                paddingBottom: 16,\n                            }}\n                        >\n                            <Body color={colorPalette.grayscale[7]}>Rs.</Body>\n                            <Body color={colorPalette.grayscale[7]}>Qt.</Body>\n                            <Body color={colorPalette.primary[0].base}>Tl.</Body>\n                        </Grid>\n                        <Grid\n                            item\n                            xs={2}\n                            style={{\n                                paddingTop: 16,\n                                paddingBottom: 16,\n                            }}\n                        >\n                            <Body color={colorPalette.grayscale[7]}>{item.rate}</Body>\n                            <Body color={colorPalette.grayscale[7]}>{item.quantity}</Body>\n                            <Body color={colorPalette.primary[0].base}>\n                                {(item.quantity || 0) * (item.rate || 0)}\n                            </Body>\n                        </Grid>\n                        <Grid item xs={1}>\n                            <IconButton\n                                aria-label=\"edit\"\n                                onClick={() => {\n                                    props.onEditProduct(index);\n                                }}\n                            >\n                                <EditIcon fontSize=\"small\" />\n                            </IconButton>\n                            <IconButton\n                                aria-label=\"delete\"\n                                onClick={() => {\n                                    props.onRowDelete(index);\n                                }}\n                                disabled={props.deleting}\n                            >\n                                <DeleteOutlineIcon fontSize=\"small\" />\n                            </IconButton>\n                        </Grid>\n                    </Grid>\n                </div>\n            ))}\n            <Button\n                onClick={props.onLoadMore}\n                disabled={props.allLoaded}\n                loading={props.loading}\n                fullWidth\n                variant=\"text\"\n            >\n                Load More\n            </Button>\n        </div>\n    );\n};\n\nexport default ProductsList;\n","import React, {ChangeEvent} from 'react';\nimport {\n    Button as MuiButton,\n    ButtonProps as MuiButtonProps,\n    CircularProgress,\n    makeStyles,\n    FormControl,\n    TextField,\n    Typography,\n    IconButton,\n} from '@material-ui/core';\nimport {colorPalette} from '../../theme';\nimport AddCircleRoundedIcon from '@material-ui/icons/AddCircleRounded';\nimport {Body} from '../Typography/Typography';\n\nconst useStyles = makeStyles({\n    wrapper: {\n        height: '100vh',\n    },\n    content: {\n        overflowY: 'scroll',\n        height: 'calc(100vh - 96px - 56px - 16px)',\n    },\n    header: {\n        height: 96,\n        backgroundColor: colorPalette.primary[0].light,\n        borderBottom: `1px solid ${colorPalette.primary[0].base}`,\n        padding: 8,\n    },\n});\n\ninterface PageContainerProps {\n    children?: React.ReactNode;\n}\n\nexport const PageWrapper = (props: PageContainerProps) => {\n    const classes = useStyles();\n    return <div className={classes.wrapper}>{props.children}</div>;\n};\n\nexport const PageContent = (props: PageContainerProps) => {\n    const classes = useStyles();\n    return <div className={classes.content}>{props.children}</div>;\n};\n\ninterface PageHeaderProps {\n    openModal: () => void;\n    onChange?: (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => void;\n    loadedRows: Number;\n    totalRows: Number;\n    placeholder: string;\n    label: string;\n}\n\nexport const PageHeader = (props: PageHeaderProps) => {\n    const classes = useStyles();\n    return (\n        <div className={classes.header}>\n            <FormControl fullWidth>\n                <TextField\n                    variant=\"outlined\"\n                    placeholder={props.placeholder}\n                    style={{backgroundColor: 'white'}}\n                    onChange={props.onChange}\n                />\n            </FormControl>\n            <Body>\n                Showing {props.loadedRows} out of {props.totalRows} {props.label}\n                <IconButton onClick={props.openModal}>\n                    <AddCircleRoundedIcon color=\"primary\" />\n                </IconButton>\n            </Body>\n        </div>\n    );\n};\n","import React from 'react';\nimport ProductsTable from '../../layouts/ProductsTable/ProductsTable';\nimport {Typography, Grid, TextField, FormControl, makeStyles, IconButton} from '@material-ui/core';\nimport useProductsPage from './useProductsPage';\nimport ProductModal from '../../layouts/ProductModal/ProductModal';\nimport FloatingAlert from '../../components/FloatingAlert/FloatingAlert';\nimport ProductType from '../../model/product';\nimport ProductsList from '../../layouts/ProductsList/ProductsList';\nimport Button from '../../components/Button/Button';\nimport {colorPalette} from '../../theme';\nimport AddCircleRoundedIcon from '@material-ui/icons/AddCircleRounded';\nimport {PageWrapper, PageContent, PageHeader} from '../../components/PageContainer/PageContainer';\n\nconst useStyles = makeStyles({\n    wrapper: {\n        height: '100vh',\n    },\n    content: {\n        overflowY: 'scroll',\n        height: 'calc(100vh - 110px - 56px - 16px)',\n    },\n});\n\nconst ProductsPage = () => {\n    const {\n        showNewProductModal,\n        closeProductModal,\n        modalOpen,\n        showSuccessMessage,\n        hideSuccessMessage,\n        deleteProduct,\n        showEditProductModal,\n        loadProducts,\n        addProduct,\n        updateProduct,\n        deleting,\n        loading,\n        rows,\n        currentProduct,\n        totalRows,\n        onChangeSearch,\n    } = useProductsPage();\n\n    const classes = useStyles();\n\n    return (\n        <>\n            <PageWrapper>\n                <PageHeader\n                    placeholder=\"Search Products\"\n                    loadedRows={rows.length}\n                    totalRows={totalRows}\n                    openModal={showNewProductModal}\n                    onChange={onChangeSearch}\n                    label=\"products\"\n                />\n                <PageContent>\n                    <ProductsList\n                        rows={rows}\n                        onRowDelete={deleteProduct}\n                        onEditProduct={showEditProductModal}\n                        deleting={deleting}\n                        onLoadMore={loadProducts}\n                        allLoaded={rows.length == totalRows} //ToDo: pagination\n                        loading={loading}\n                    />\n                </PageContent>\n            </PageWrapper>\n            <FloatingAlert\n                severity=\"success\"\n                open={showSuccessMessage}\n                onClose={hideSuccessMessage}\n                message=\"Product added successfully\"\n            />\n            <ProductModal\n                open={modalOpen}\n                loading={loading}\n                existingProduct={currentProduct}\n                close={closeProductModal}\n                aria-labelledby=\"product_modal\"\n                onSubmit={currentProduct ? updateProduct : addProduct}\n            />\n        </>\n    );\n};\n\nexport default ProductsPage;\n","import {useState, useEffect, ChangeEvent} from 'react';\nimport poco from '../../poco';\nimport CustomerType from '../../model/customer';\nimport {\n    CustomerListResponse,\n    Response,\n    CustomerResponse,\n    CityListResponse,\n} from '../../types/responses';\n\nconst useCustomersPage = () => {\n    const [modalOpen, setModalOpen] = useState(false);\n    const [showSuccessMessage, setShowSuccessMessage] = useState(false);\n\n    const [rows, setRows] = useState<CustomerType[]>([]);\n    const [deleting, setDeleting] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [totalRows, setTotalRows] = useState(0);\n\n    const [currentCustomer, setCurrentCustomer] = useState<CustomerType>();\n\n    const showNewCustomerModal = () => {\n        setCurrentCustomer(undefined);\n        setModalOpen(true);\n    };\n\n    const closeCustomerModal = (created: boolean) => {\n        setModalOpen(false);\n        if (created) setShowSuccessMessage(true);\n    };\n\n    const showEditCustomerModal = (index: number) => {\n        setCurrentCustomer(rows[index]);\n        setModalOpen(true);\n    };\n\n    const hideSuccessMessage = () => {\n        setShowSuccessMessage(false);\n    };\n\n    const loadCustomers = (clear: boolean = false, query: string = '') => {\n        if (loading) return;\n        let offset = rows.length;\n        if (clear === true) {\n            setRows([]);\n            offset = 0;\n        }\n        setLoading(true);\n        poco.customer.list(\n            offset,\n            query,\n            (response: CustomerListResponse) => {\n                setLoading(false);\n                setRows((rows) => rows.concat(response.data.rows));\n                setTotalRows(response.data.count);\n            },\n            () => {\n                setLoading(false);\n            }\n        );\n    };\n\n    const addCustomer = (newCustomer: CustomerType) => {\n        setLoading(true);\n        poco.customer.create(\n            newCustomer,\n            (customerResponse: CustomerResponse) => {\n                setLoading(false);\n                if (customerResponse.success) {\n                    rows.unshift(customerResponse.data);\n                    setRows(rows);\n                    setTotalRows(prev => prev+1);\n                    closeCustomerModal(true);\n                } else {\n                    //TODO: Failure\n                }\n            },\n            () => {\n                //TODO: Failure\n                setLoading(false);\n                //ToDo failed to add data\n            }\n        );\n    };\n\n    const updateCustomer = (newCustomer: CustomerType) => {\n        setLoading(true);\n        poco.customer.update(\n            newCustomer,\n            (customerResponse: CustomerResponse) => {\n                setLoading(false);\n                if (customerResponse.success) {\n                    var foundIndex = rows.findIndex(\n                        (customer) => customer.id == customerResponse.data.id\n                    );\n                    rows[foundIndex] = customerResponse.data;\n                    setCurrentCustomer(undefined);\n                    closeCustomerModal(true);\n                } else {\n                    //TODO: Failure\n                }\n            },\n            () => {\n                //TODO: Failure\n                setLoading(false);\n                //ToDo failed to add data\n            }\n        );\n    };\n\n    const deleteCustomer = (index: number) => {\n        setDeleting(true);\n        poco.customer.delete(\n            rows[index].id!,\n            (response: Response) => {\n                if (response.success) {\n                    const remaining = rows.filter((row, i) => i !== index);\n                    setRows(remaining);\n                } else {\n                    //TODO: Handle error\n                }\n                setDeleting(false);\n            },\n            () => {\n                //TODO: Handle error\n                setDeleting(false);\n            }\n        );\n    };\n\n    useEffect(() => {\n        loadCustomers(true);\n    }, []);\n\n    const onChangeSearch = (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        loadCustomers(true, event.target.value);\n    };\n\n    return {\n        showNewCustomerModal,\n        showEditCustomerModal,\n        closeCustomerModal,\n        modalOpen,\n        showSuccessMessage,\n        hideSuccessMessage,\n        deleteCustomer,\n        addCustomer,\n        updateCustomer,\n        loadCustomers,\n        deleting,\n        loading,\n        totalRows,\n        onChangeSearch,\n        rows,\n        currentCustomer,\n    };\n};\nexport default useCustomersPage;\n","import CustomerType from '../../model/customer';\nimport {useState, useEffect} from 'react';\nimport CityType from '../../model/city';\nimport {exists, isNotANumber, validateMobileFormat} from '../../validate';\nimport {CityContextType} from '../../CityContext';\n\nconst useCustomerModal = (\n    onSubmit: (customer: CustomerType) => void,\n    close: (created: boolean) => void,\n    loading: boolean,\n    cityContext: CityContextType,\n    existingCustomer?: CustomerType\n) => {\n    const [name, setName] = useState('');\n    const [mobile, setMobile] = useState('');\n    const [debt, setDebt] = useState('');\n    const [city, setCity] = useState<CityType>();\n\n    const [errorMessage, setErrorMessage] = useState('');\n\n    const [hasErrorName, setHasErrorName] = useState(false);\n    const [hasErrorMobile, setHasErrorMobile] = useState(false);\n    const [hasErrorCity, setHasErrorCity] = useState(false);\n    const [hasErrorDebt, setHasErrorDebt] = useState(false);\n\n    useEffect(() => {\n        setName(existingCustomer?.name || '');\n        setMobile(existingCustomer?.mobile || '');\n        if (existingCustomer?.cityId) {\n            setCity(cityContext.cities.find((city) => city.id == existingCustomer?.cityId));\n        }\n        setDebt(existingCustomer?.debt?.toString() || '');\n    }, [existingCustomer]);\n\n    const onNameChange = (value: string) => {\n        setName(value);\n    };\n\n    const onMobileChange = (value: string) => {\n        setMobile(value);\n    };\n\n    const onDebtChange = (value: string) => {\n        setDebt(value);\n    };\n\n    const isValid = (): boolean => {\n        resetErrors();\n        let valid = true;\n        if (!exists(name)) {\n            valid = false;\n            setHasErrorName(true);\n            setErrorMessage('Please give some name to your customer.');\n        } else if (validateMobileFormat(mobile)) {\n            valid = false;\n            setHasErrorMobile(true);\n            setErrorMessage('Please give a valid mobile number');\n        } else if (city == undefined) {\n            valid = false;\n            setHasErrorCity(true);\n            setErrorMessage('Please select a city from the list');\n        } else if (isNotANumber(debt)) {\n            valid = false;\n            setHasErrorDebt(true);\n            setErrorMessage('Please put a valid number for debt');\n        }\n\n        return valid;\n    };\n\n    const resetErrors = () => {\n        setErrorMessage('');\n        setHasErrorName(false);\n        setHasErrorMobile(false);\n        setHasErrorCity(false);\n        setHasErrorDebt(false);\n    };\n\n    const handleClick = () => {\n        if (!loading && isValid()) {\n            const newCustomer: CustomerType = {\n                id: existingCustomer?.id,\n                name,\n                mobile,\n                cityId: city!.id,\n                debt: Number(debt) || 0,\n            };\n            onSubmit(newCustomer);\n        }\n    };\n\n    const cancel = () => {\n        resetErrors();\n        close(false);\n    };\n\n    return {\n        handleClick,\n        cancel,\n        onNameChange,\n        onMobileChange,\n        onDebtChange,\n        city,\n        setCity,\n        errorMessage,\n        hasErrorName,\n        hasErrorMobile,\n        hasErrorCity,\n        hasErrorDebt,\n    };\n};\n\nexport default useCustomerModal;\n","import CityType from './model/city';\nimport React, {useEffect, useState} from 'react';\nimport poco from './poco';\nimport {CityListResponse, Response} from './types/responses';\n\nexport interface CityContextType {\n    loading: boolean;\n    cities: CityType[];\n    setCities: (cities: CityType[]) => void;\n}\n\nexport const CityContext = React.createContext<CityContextType>({\n    loading: true,\n    cities: [],\n    setCities: () => {},\n});\n\ninterface CityContextProviderProps {\n    children: React.ReactNode;\n}\n\nexport const CityContextProvider = (props: CityContextProviderProps) => {\n    const [cities, setCities] = useState<CityType[]>([]);\n    const [loading, setLoading] = useState(false);\n    // const [deleting, setDeleting] = useState(false);\n\n    useEffect(() => {\n        loadCities();\n    }, []);\n\n    const loadCities = () => {\n        setLoading(true);\n        poco.city.list(\n            (response: CityListResponse) => {\n                setLoading(false);\n                setCities(response.data);\n            },\n            () => {\n                //TODO: Error handling\n                setLoading(false);\n            }\n        );\n    };\n    return (\n        <CityContext.Provider value={{loading, cities, setCities}}>\n            {props.children}\n        </CityContext.Provider>\n    );\n};\n","import React, {useContext} from 'react';\nimport {Dialog, DialogTitle, FormControl, TextField, Grid, Typography} from '@material-ui/core';\nimport Button from '../../components/Button/Button';\nimport useCustomerModal from './useCustomerModal';\nimport CustomerType from '../../model/customer';\nimport CityType from '../../model/city';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport {CityContext} from '../../CityContext';\n\nexport interface CustomerModalType {\n    open: boolean;\n    loading: boolean;\n    close: (created: boolean) => void;\n    onSubmit: (product: CustomerType) => void;\n    existingCustomer?: CustomerType;\n}\nconst CustomerModal = (props: CustomerModalType) => {\n    const {open, onSubmit, loading, close, existingCustomer} = props;\n    const cityContext = useContext(CityContext);\n    const {\n        handleClick,\n        cancel,\n        onNameChange,\n        setCity,\n        onMobileChange,\n        onDebtChange,\n        city,\n        errorMessage,\n        hasErrorName,\n        hasErrorMobile,\n        hasErrorCity,\n        hasErrorDebt,\n    } = useCustomerModal(onSubmit, close, loading, cityContext, existingCustomer);\n    return (\n        <Dialog fullScreen open={open}>\n            <DialogTitle>\n                {existingCustomer ? 'Update Your Customer' : 'Add New Customer'}\n            </DialogTitle>\n            {errorMessage.length > 0 && (\n                <div style={{paddingLeft: 24}}>\n                    <Typography variant=\"body1\" color=\"error\">\n                        {errorMessage}\n                    </Typography>\n                </div>\n            )}\n            <Grid container spacing={2} style={{padding: 24}}>\n                <Grid item xs={12}>\n                    <Grid container spacing={2}>\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                error={hasErrorName}\n                                label=\"Customer Name\"\n                                defaultValue={existingCustomer?.name}\n                                onChange={(event) => {\n                                    onNameChange(event.target.value);\n                                }}\n                            />\n                        </Grid>\n\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                error={hasErrorMobile}\n                                defaultValue={existingCustomer?.mobile}\n                                label=\"Mobile Number\"\n                                onChange={(event) => {\n                                    onMobileChange(event.target.value);\n                                }}\n                            />\n                        </Grid>\n                        <Grid item xs={8}>\n                            <Autocomplete\n                                id=\"city-search\"\n                                options={cityContext.cities}\n                                defaultValue={cityContext.cities.find(\n                                    (city) => city.id == existingCustomer?.cityId\n                                )}\n                                getOptionLabel={(option) => {\n                                    return option.name;\n                                }}\n                                // style={{width: 300}}\n                                renderInput={(params) => (\n                                    <TextField\n                                        {...params}\n                                        error={hasErrorCity}\n                                        label=\"City\"\n                                        variant=\"outlined\"\n                                    />\n                                )}\n                                onChange={(event: any, value: CityType | null) => {\n                                    value && setCity(value);\n                                }}\n                            />\n                        </Grid>\n                        <Grid item xs={4}>\n                            <TextField\n                                fullWidth\n                                error={hasErrorDebt}\n                                defaultValue={existingCustomer?.debt}\n                                label=\"Debt\"\n                                onChange={(event) => {\n                                    onDebtChange(event.target.value);\n                                }}\n                            />\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid item xs={12}>\n                    <Grid container spacing={2} justify={'flex-end'}>\n                        <Grid item>\n                            <Button\n                                variant=\"text\"\n                                onClick={() => {\n                                    cancel();\n                                }}\n                            >\n                                Cancel\n                            </Button>\n                        </Grid>\n                        <Grid item>\n                            <Button onClick={handleClick} loading={loading}>\n                                {existingCustomer ? 'Update Customer' : 'Add Customer'}\n                            </Button>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </Dialog>\n    );\n};\n\nexport default CustomerModal;\n","import React, {useState, useEffect, useContext} from 'react';\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\nimport EditIcon from '@material-ui/icons/Edit';\nimport {\n    Paper,\n    TableContainer,\n    Table,\n    TableHead,\n    TableRow,\n    TableCell,\n    TableSortLabel,\n    TableBody,\n    TablePagination,\n    makeStyles,\n    IconButton,\n    Card,\n    Typography,\n    Grid,\n} from '@material-ui/core';\nimport {firestore} from 'firebase';\nimport api from '../../api';\nimport CustomerType from '../../model/customer';\nimport Button from '../../components/Button/Button';\nimport {H3, Body, SH2, SH3, Caption} from '../../components/Typography/Typography';\nimport {colorPalette} from '../../theme';\nimport InboxIcon from '@material-ui/icons/Inbox';\nimport CallRoundedIcon from '@material-ui/icons/CallRounded';\nimport PinDropRoundedIcon from '@material-ui/icons/PinDropRounded';\nimport {CityContext} from '../../CityContext';\n\nconst columns: string[] = ['Name', 'Average Rate', 'Quantity', 'Total', 'Details', 'Actions'];\n\ninterface CustomersListType {\n    rows: CustomerType[];\n    onRowDelete: Function;\n    onEditCustomer: (index: number) => void;\n    deleting: boolean;\n    loading?: boolean;\n    allLoaded: boolean;\n    onLoadMore: () => void;\n}\n\nconst CustomersList = (props: CustomersListType) => {\n    const cityContext = useContext(CityContext);\n    return (\n        <div>\n            {props.rows.map((item: CustomerType, index) => (\n                <div\n                    style={{\n                        padding: 8,\n                        borderBottom: `1px solid ${colorPalette.grayscale[4]}`,\n                    }}\n                    key={index}\n                >\n                    <Grid container>\n                        <Grid item xs={1} style={{paddingTop: 8, paddingBottom: 8}}>\n                            <H3>\n                                <InboxIcon fontSize=\"small\" />\n                            </H3>\n                        </Grid>\n                        <Grid item xs={9} style={{paddingTop: 8, paddingBottom: 8}}>\n                            <H3>{item.name}</H3>\n                            <div style={{paddingTop: 4}}>\n                                <Grid container alignItems=\"baseline\" spacing={1}>\n                                    <Grid item>\n                                        <Caption>Debt:</Caption>\n                                    </Grid>\n                                    <Grid item>\n                                        <SH2 color={colorPalette.primary[2].interaction}>\n                                            {item.debt}\n                                        </SH2>\n                                    </Grid>\n                                </Grid>\n                            </div>\n                        </Grid>\n\n                        <Grid item xs={2}>\n                            <IconButton\n                                aria-label=\"edit\"\n                                onClick={() => {\n                                    props.onEditCustomer(index);\n                                }}\n                            >\n                                <EditIcon fontSize=\"small\" />\n                            </IconButton>\n                            <IconButton\n                                aria-label=\"delete\"\n                                onClick={() => {\n                                    props.onRowDelete(index);\n                                }}\n                                disabled={props.deleting}\n                            >\n                                <DeleteOutlineIcon fontSize=\"small\" />\n                            </IconButton>\n                        </Grid>\n                    </Grid>\n                    <Grid container>\n                        <Grid item xs={6}>\n                            <Grid container justify=\"center\" spacing={1}>\n                                <Grid item>\n                                    <CallRoundedIcon\n                                        fontSize=\"small\"\n                                        style={{color: colorPalette.grayscale[7]}}\n                                    />\n                                </Grid>\n                                <Grid item>\n                                    <Body color={colorPalette.grayscale[7]}>{item.mobile}</Body>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <Grid container justify=\"center\" spacing={1}>\n                                <Grid item>\n                                    <PinDropRoundedIcon\n                                        fontSize=\"small\"\n                                        style={{color: colorPalette.grayscale[7]}}\n                                    />\n                                </Grid>\n                                <Grid item>\n                                    <Body color={colorPalette.grayscale[7]}>\n                                        {\n                                            cityContext.cities.find(\n                                                (city) => city.id == item.cityId\n                                            )?.name\n                                        }\n                                    </Body>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                </div>\n            ))}\n            <Button\n                onClick={props.onLoadMore}\n                disabled={props.allLoaded}\n                loading={props.loading}\n                fullWidth\n                variant=\"text\"\n            >\n                Load More\n            </Button>\n        </div>\n    );\n};\n\nexport default CustomersList;\n","import React from 'react';\nimport CustomersTable from '../../layouts/CustomersTable/CustomersTable';\nimport {Typography, Grid, TextField, FormControl, makeStyles, IconButton} from '@material-ui/core';\nimport useCustomersPage from './useCustomersPage';\nimport CustomerModal from '../../layouts/CustomerModal/CustomerModal';\nimport FloatingAlert from '../../components/FloatingAlert/FloatingAlert';\nimport CustomerType from '../../model/customer';\nimport CustomersList from '../../layouts/CustomersList/CustomersList';\nimport Button from '../../components/Button/Button';\nimport {colorPalette} from '../../theme';\nimport AddCircleRoundedIcon from '@material-ui/icons/AddCircleRounded';\nimport {PageWrapper, PageContent, PageHeader} from '../../components/PageContainer/PageContainer';\nimport {CityContext} from '../../CityContext';\n\nconst useStyles = makeStyles({\n    wrapper: {\n        height: '100vh',\n    },\n    content: {\n        overflowY: 'scroll',\n        height: 'calc(100vh - 110px - 56px - 16px)',\n    },\n});\n\nconst CustomersPage = () => {\n    const {\n        showNewCustomerModal,\n        showEditCustomerModal,\n        closeCustomerModal,\n        modalOpen,\n        showSuccessMessage,\n        hideSuccessMessage,\n        deleteCustomer,\n        loadCustomers,\n        addCustomer,\n        updateCustomer,\n        deleting,\n        loading,\n        rows,\n        totalRows,\n        onChangeSearch,\n        currentCustomer,\n    } = useCustomersPage();\n\n    const classes = useStyles();\n\n    return (\n        <CityContext.Consumer>\n            {({cities}) => (\n                <>\n                    <PageWrapper>\n                        <PageHeader\n                            placeholder=\"Search Customers\"\n                            loadedRows={rows.length}\n                            totalRows={totalRows}\n                            openModal={showNewCustomerModal}\n                            onChange={onChangeSearch}\n                            label=\"customers\"\n                        />\n                        <PageContent>\n                            <CustomersList\n                                rows={rows}\n                                onRowDelete={deleteCustomer}\n                                onEditCustomer={showEditCustomerModal}\n                                deleting={deleting}\n                                onLoadMore={loadCustomers}\n                                allLoaded={rows.length === totalRows} //ToDo: pagination\n                                loading={loading}\n                            />\n                        </PageContent>\n                    </PageWrapper>\n                    <FloatingAlert\n                        severity=\"success\"\n                        open={showSuccessMessage}\n                        onClose={hideSuccessMessage}\n                        message=\"Customer added successfully\"\n                    />\n                    <CustomerModal\n                        open={modalOpen}\n                        close={closeCustomerModal}\n                        aria-labelledby=\"customer_modal\"\n                        onSubmit={currentCustomer ? updateCustomer : addCustomer}\n                        existingCustomer={currentCustomer}\n                        loading={loading}\n                    />\n                </>\n            )}\n        </CityContext.Consumer>\n    );\n};\n\nexport default CustomersPage;\n","import {useState, useEffect} from 'react';\nimport api from '../../api';\nimport poco from '../../poco';\nimport CityType from '../../model/city';\nimport {CityListResponse, Response, CityResponse} from '../../types/responses';\nimport {CityContextType} from '../../CityContext';\n\nconst useCitiesPage = (cityContext: CityContextType) => {\n    const [modalOpen, setModalOpen] = useState(false);\n    const [showSuccessMessage, setShowSuccessMessage] = useState(false);\n    const [deleting, setDeleting] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [currentCity, setCurrentCity] = useState<CityType>();\n\n    const showNewCityModal = () => {\n        setCurrentCity(undefined);\n        setModalOpen(true);\n    };\n\n    const closeCityModal = (created: boolean) => {\n        setModalOpen(false);\n        if (created) setShowSuccessMessage(true);\n    };\n\n    const showEditCityModal = (index: number) => {\n        setCurrentCity(cityContext.cities[index]);\n        setModalOpen(true);\n    };\n\n    const hideSuccessMessage = () => {\n        setShowSuccessMessage(false);\n    };\n\n    // const loadCities = () => {\n    //     setLoading(true);\n    //     poco.city.list(\n    //         (response: CityListResponse) => {\n    //             setLoading(false);\n    //             setRows(response.data);\n    //         },\n    //         () => {\n    //             setLoading(false);\n    //         }\n    //     );\n    // };\n\n    const loadMoreCities = () => {};\n\n    const addCity = (newCity: CityType) => {\n        console.log('add city');\n        setLoading(true);\n        poco.city.create(\n            newCity,\n            (cityResponse: CityResponse) => {\n                setLoading(false);\n                if (cityResponse.success) {\n                    cityContext.cities.unshift(cityResponse.data);\n                    cityContext.setCities(cityContext.cities);\n                    closeCityModal(true);\n                } else {\n                    //TODO: Failure\n                }\n            },\n            () => {\n                //TODO: Failure\n                setLoading(false);\n                //ToDo failed to add data\n            }\n        );\n    };\n\n    const updateCity = (newCity: CityType) => {\n        setLoading(true);\n        poco.city.update(\n            newCity,\n            (cityResponse: CityResponse) => {\n                setLoading(false);\n                if (cityResponse.success) {\n                    var foundIndex = cityContext.cities.findIndex(\n                        (city) => city.id == cityResponse.data.id\n                    );\n                    cityContext.cities[foundIndex] = cityResponse.data;\n                    setCurrentCity(undefined);\n                    closeCityModal(true);\n                } else {\n                    //TODO: Failure\n                }\n            },\n            () => {\n                //TODO: Failure\n                setLoading(false);\n                //ToDo failed to add data\n            }\n        );\n    };\n\n    const deleteCity = (index: number) => {\n        setDeleting(true);\n        poco.city.delete(\n            cityContext.cities[index].id!,\n            (response: Response) => {\n                if (response.success) {\n                    const remaining = cityContext.cities.filter((row, i) => i !== index);\n                    cityContext.setCities(remaining);\n                } else {\n                    //TODO: Handle error\n                }\n                setDeleting(false);\n            },\n            () => {\n                //TODO: Handle error\n                setDeleting(false);\n            }\n        );\n    };\n\n    // useEffect(() => {\n    //     loadCities();\n    // }, []);\n\n    return {\n        showNewCityModal,\n        showEditCityModal,\n        currentCity,\n        closeCityModal,\n        modalOpen,\n        showSuccessMessage,\n        hideSuccessMessage,\n        deleteCity,\n        addCity,\n        updateCity,\n        loadMoreCities,\n        deleting,\n        loading,\n    };\n};\nexport default useCitiesPage;\n","import firebase from 'firebase';\nimport CityType from '../../model/city';\nimport {useState, useEffect} from 'react';\nimport api from '../../poco';\nimport {CityResponse} from '../../types/responses';\nimport {exists} from '../../validate';\n\nconst useCityModal = (\n    onSubmit: (city: CityType) => void,\n    close: (created: boolean) => void,\n    existingCity?: CityType\n) => {\n    const [name, setName] = useState('');\n    const [loading, setLoading] = useState(false);\n\n    const [errorMessage, setErrorMessage] = useState('');\n\n    const [hasErrorName, setHasErrorName] = useState(false);\n\n    useEffect(() => {\n        setName(existingCity?.name || '');\n    }, [existingCity]);\n\n    const onNameChange = (value: string) => {\n        setName(value);\n    };\n\n    const handleClick = () => {\n        if (!loading && isValid()) {\n            const newCity: CityType = {\n                id: existingCity?.id,\n                name,\n            };\n            onSubmit(newCity);\n        }\n    };\n\n    // const handleClick = () => {\n    //     if (!loading) {\n    //         setLoading(true);\n    //         const now = Date.now();\n    //         const newCity: CityType = {\n    //             name,\n    //         };\n    //         api.city.create(\n    //             newCity,\n    //             (cityResponse: CityResponse) => {\n    //                 setLoading(false);\n    //                 if (cityResponse.success) {\n    //                     onSubmit(cityResponse.data);\n    //                 } else {\n    //                     //TODO: Failure\n    //                 }\n    //                 close(true);\n    //             },\n    //             () => {\n    //                 //TODO: Failure\n    //                 setLoading(false);\n    //                 //ToDo failed to add data\n    //             }\n    //         );\n    //     }\n    // };\n\n    const isValid = (): boolean => {\n        resetErrors();\n        let valid = true;\n        if (!exists(name)) {\n            valid = false;\n            setHasErrorName(true);\n            setErrorMessage('Please give some name to your city.');\n        }\n        return valid;\n    };\n\n    const resetErrors = () => {\n        setErrorMessage('');\n        setHasErrorName(false);\n    };\n\n    return {\n        handleClick,\n        onNameChange,\n        loading,\n        errorMessage,\n        hasErrorName,\n    };\n};\n\nexport default useCityModal;\n","import React from 'react';\nimport {Dialog, DialogTitle, Typography, TextField, Grid} from '@material-ui/core';\nimport Button from '../../components/Button/Button';\nimport useCityModal from './useCityModal';\nimport CityType from '../../model/city';\n\nexport interface CityModalType {\n    open: boolean;\n    close: (created: boolean) => void;\n    existingCity?: CityType;\n    onSubmit: (city: CityType) => void;\n}\nconst CityModal = (props: CityModalType) => {\n    const {open, close, onSubmit, existingCity} = props;\n    const {handleClick, onNameChange, loading, hasErrorName, errorMessage} = useCityModal(\n        onSubmit,\n        close,\n        existingCity\n    );\n    return (\n        <Dialog fullScreen open={open}>\n            <DialogTitle>{existingCity ? 'Update Your City' : 'Add New City'}</DialogTitle>\n            {errorMessage.length > 0 && (\n                <div style={{paddingLeft: 24}}>\n                    <Typography variant=\"body1\" color=\"error\">\n                        {errorMessage}\n                    </Typography>\n                </div>\n            )}\n            <Grid container spacing={2} style={{padding: 24}}>\n                <Grid item xs={12}>\n                    <Grid container spacing={2}>\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                defaultValue={existingCity?.name}\n                                label=\"City Name\"\n                                error={hasErrorName}\n                                onChange={(event) => {\n                                    onNameChange(event.target.value);\n                                }}\n                            />\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid item xs={12}>\n                    <Grid container spacing={2} justify={'flex-end'}>\n                        <Grid item>\n                            <Button\n                                variant=\"text\"\n                                onClick={() => {\n                                    close(false);\n                                }}\n                            >\n                                Cancel\n                            </Button>\n                        </Grid>\n                        <Grid item>\n                            <Button onClick={handleClick} loading={loading}>\n                                {existingCity ? 'Update City' : 'Add City'}\n                            </Button>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </Dialog>\n    );\n};\n\nexport default CityModal;\n","import React, {useContext} from 'react';\nimport {\n    Typography,\n    Grid,\n    TextField,\n    FormControl,\n    List,\n    ListItem,\n    ListItemText,\n    CircularProgress,\n    IconButton,\n} from '@material-ui/core';\nimport useCitiesPage from './useCitiesPage';\nimport FloatingAlert from '../../components/FloatingAlert/FloatingAlert';\nimport CityType from '../../model/city';\nimport Button from '../../components/Button/Button';\nimport {PageWrapper, PageHeader, PageContent} from '../../components/PageContainer/PageContainer';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\nimport CityModal from '../../layouts/CityModal/CityModal';\nimport {CityContext} from '../../CityContext';\n\nconst CitiesPage = () => {\n    const cityContext = useContext(CityContext);\n    const {\n        showSuccessMessage,\n        hideSuccessMessage,\n        modalOpen,\n        currentCity,\n        showNewCityModal,\n        showEditCityModal,\n        closeCityModal,\n        deleteCity,\n        addCity,\n        updateCity,\n    } = useCitiesPage(cityContext);\n    return (\n        <>\n            <PageWrapper>\n                <PageHeader\n                    placeholder=\"Search Cities\"\n                    loadedRows={cityContext.cities.length}\n                    totalRows={cityContext.cities.length}\n                    openModal={showNewCityModal}\n                    label=\"cities\"\n                />\n                <PageContent>\n                    <>\n                        {cityContext.loading && <CircularProgress />}\n                        <List>\n                            {cityContext.cities.map((city, index) => (\n                                <ListItem key={index}>\n                                    <Grid container alignItems=\"center\">\n                                        <Grid item xs={8}>\n                                            <ListItemText>{city.name}</ListItemText>\n                                        </Grid>\n                                        <Grid item xs={2}>\n                                            <IconButton\n                                                onClick={() => {\n                                                    showEditCityModal(index);\n                                                }}\n                                            >\n                                                <EditIcon />\n                                            </IconButton>\n                                        </Grid>\n                                        <Grid item xs={2}>\n                                            <IconButton\n                                                onClick={() => {\n                                                    deleteCity(index);\n                                                }}\n                                            >\n                                                <DeleteOutlineIcon />\n                                            </IconButton>\n                                        </Grid>\n                                    </Grid>\n                                </ListItem>\n                            ))}\n                        </List>\n                    </>\n                </PageContent>\n            </PageWrapper>\n\n            {/* <FloatingAlert\n                severity=\"success\"\n                open={showSuccessMessage}\n                onClose={hideSuccessMessage}\n                message=\"City added successfully\"\n                /> */}\n\n            <CityModal\n                open={modalOpen}\n                close={closeCityModal}\n                existingCity={currentCity}\n                aria-labelledby=\"city_modal\"\n                onSubmit={currentCity ? updateCity : addCity}\n            />\n        </>\n    );\n};\n\nexport default CitiesPage;\n","import {useState, useEffect, ChangeEvent} from 'react';\nimport poco from '../../poco';\nimport VendorType from '../../model/vendor';\nimport {\n    VendorListResponse,\n    Response,\n    VendorResponse,\n    CityListResponse,\n} from '../../types/responses';\n\nconst useVendorsPage = () => {\n    const [modalOpen, setModalOpen] = useState(false);\n    const [showSuccessMessage, setShowSuccessMessage] = useState(false);\n\n    const [rows, setRows] = useState<VendorType[]>([]);\n    const [deleting, setDeleting] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [totalRows, setTotalRows] = useState(0);\n\n    const [currentVendor, setCurrentVendor] = useState<VendorType>();\n\n    const showNewVendorModal = () => {\n        setCurrentVendor(undefined);\n        setModalOpen(true);\n    };\n\n    const closeVendorModal = (created: boolean) => {\n        setModalOpen(false);\n        if (created) setShowSuccessMessage(true);\n    };\n\n    const showEditVendorModal = (index: number) => {\n        setCurrentVendor(rows[index]);\n        setModalOpen(true);\n    };\n\n    const hideSuccessMessage = () => {\n        setShowSuccessMessage(false);\n    };\n\n    const loadVendors = (clear: boolean = false, query: string = '') => {\n        if (loading) return;\n        let offset = rows.length;\n        if (clear === true) {\n            setRows([]);\n            offset = 0;\n        }\n        setLoading(true);\n        poco.vendor.list(\n            offset,\n            query,\n            (response: VendorListResponse) => {\n                console.log('respoinse', response);\n                setLoading(false);\n                setRows((rows) => rows.concat(response.data.rows));\n                setTotalRows(response.data.count);\n            },\n            () => {\n                setLoading(false);\n            }\n        );\n    };\n\n    const addVendor = (newVendor: VendorType) => {\n        setLoading(true);\n        poco.vendor.create(\n            newVendor,\n            (vendorResponse: VendorResponse) => {\n                setLoading(false);\n                if (vendorResponse.success) {\n                    rows.unshift(vendorResponse.data);\n                    setRows(rows);\n                    setTotalRows(prev => prev+1);\n                    closeVendorModal(true);\n                } else {\n                    //TODO: Failure\n                }\n            },\n            () => {\n                //TODO: Failure\n                setLoading(false);\n                //ToDo failed to add data\n            }\n        );\n    };\n\n    const updateVendor = (newVendor: VendorType) => {\n        setLoading(true);\n        poco.vendor.update(\n            newVendor,\n            (vendorResponse: VendorResponse) => {\n                setLoading(false);\n                if (vendorResponse.success) {\n                    var foundIndex = rows.findIndex(\n                        (vendor) => vendor.id == vendorResponse.data.id\n                    );\n                    rows[foundIndex] = vendorResponse.data;\n                    setCurrentVendor(undefined);\n                    closeVendorModal(true);\n                } else {\n                    //TODO: Failure\n                }\n            },\n            () => {\n                //TODO: Failure\n                setLoading(false);\n                //ToDo failed to add data\n            }\n        );\n    };\n\n    const deleteVendor = (index: number) => {\n        setDeleting(true);\n        poco.vendor.delete(\n            rows[index].id!,\n            (response: Response) => {\n                if (response.success) {\n                    const remaining = rows.filter((row, i) => i !== index);\n                    setRows(remaining);\n                } else {\n                    //TODO: Handle error\n                }\n                setDeleting(false);\n            },\n            () => {\n                //TODO: Handle error\n                setDeleting(false);\n            }\n        );\n    };\n\n    useEffect(() => {\n        loadVendors(true);\n    }, []);\n\n    const onChangeSearch = (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        loadVendors(true, event.target.value);\n    };\n\n    return {\n        showNewVendorModal,\n        showEditVendorModal,\n        closeVendorModal,\n        modalOpen,\n        showSuccessMessage,\n        hideSuccessMessage,\n        deleteVendor,\n        addVendor,\n        updateVendor,\n        loadVendors,\n        deleting,\n        loading,\n        totalRows,\n        onChangeSearch,\n        rows,\n        currentVendor,\n    };\n};\nexport default useVendorsPage;\n","import VendorType from '../../model/vendor';\nimport {useState, useEffect} from 'react';\nimport CityType from '../../model/city';\nimport {exists, isNotANumber, validateMobileFormat} from '../../validate';\nimport {CityContextType} from '../../CityContext';\n\nconst useVendorModal = (\n    onSubmit: (vendor: VendorType) => void,\n    close: (created: boolean) => void,\n    loading: boolean,\n    cityContext: CityContextType,\n    existingVendor?: VendorType\n) => {\n    const [name, setName] = useState('');\n    const [mobile, setMobile] = useState('');\n    const [debt, setDebt] = useState('');\n    const [city, setCity] = useState<CityType>();\n\n    const [errorMessage, setErrorMessage] = useState('');\n\n    const [hasErrorName, setHasErrorName] = useState(false);\n    const [hasErrorMobile, setHasErrorMobile] = useState(false);\n    const [hasErrorCity, setHasErrorCity] = useState(false);\n    const [hasErrorDebt, setHasErrorDebt] = useState(false);\n\n    useEffect(() => {\n        setName(existingVendor?.name || '');\n        setMobile(existingVendor?.mobile || '');\n        if (existingVendor?.cityId) {\n            setCity(cityContext.cities.find((city) => city.id == existingVendor?.cityId));\n        }\n        setDebt(existingVendor?.debt?.toString() || '');\n    }, [existingVendor]);\n\n    const onNameChange = (value: string) => {\n        setName(value);\n    };\n\n    const onMobileChange = (value: string) => {\n        setMobile(value);\n    };\n\n    const onDebtChange = (value: string) => {\n        setDebt(value);\n    };\n\n    const isValid = (): boolean => {\n        resetErrors();\n        let valid = true;\n        if (!exists(name)) {\n            valid = false;\n            setHasErrorName(true);\n            setErrorMessage('Please give some name to your vendor.');\n        } else if (validateMobileFormat(mobile)) {\n            valid = false;\n            setHasErrorMobile(true);\n            setErrorMessage('Please give a valid mobile number');\n        } else if (city == undefined) {\n            valid = false;\n            setHasErrorCity(true);\n            setErrorMessage('Please select a city from the list');\n        } else if (isNotANumber(debt)) {\n            valid = false;\n            setHasErrorDebt(true);\n            setErrorMessage('Please put a valid number for debt');\n        }\n\n        return valid;\n    };\n\n    const resetErrors = () => {\n        setErrorMessage('');\n        setHasErrorName(false);\n        setHasErrorMobile(false);\n        setHasErrorCity(false);\n        setHasErrorDebt(false);\n    };\n\n    const handleClick = () => {\n        if (!loading && isValid()) {\n            const newVendor: VendorType = {\n                id: existingVendor?.id,\n                name,\n                mobile,\n                cityId: city!.id,\n                debt: Number(debt) || 0,\n            };\n            onSubmit(newVendor);\n        }\n    };\n\n    const cancel = () => {\n        resetErrors();\n        close(false);\n    };\n\n    return {\n        handleClick,\n        cancel,\n        onNameChange,\n        onMobileChange,\n        onDebtChange,\n        city,\n        setCity,\n        errorMessage,\n        hasErrorName,\n        hasErrorMobile,\n        hasErrorCity,\n        hasErrorDebt,\n    };\n};\n\nexport default useVendorModal;\n","import React, {useContext} from 'react';\nimport {Dialog, DialogTitle, FormControl, TextField, Grid, Typography} from '@material-ui/core';\nimport Button from '../../components/Button/Button';\nimport useVendorModal from './useVendorModal';\nimport VendorType from '../../model/vendor';\nimport CityType from '../../model/city';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport {CityContext} from '../../CityContext';\n\nexport interface VendorModalType {\n    open: boolean;\n    loading: boolean;\n    close: (created: boolean) => void;\n    onSubmit: (product: VendorType) => void;\n    existingVendor?: VendorType;\n}\nconst VendorModal = (props: VendorModalType) => {\n    const {open, onSubmit, loading, close, existingVendor} = props;\n    const cityContext = useContext(CityContext);\n    const {\n        handleClick,\n        cancel,\n        onNameChange,\n        setCity,\n        onMobileChange,\n        onDebtChange,\n        city,\n        errorMessage,\n        hasErrorName,\n        hasErrorMobile,\n        hasErrorCity,\n        hasErrorDebt,\n    } = useVendorModal(onSubmit, close, loading, cityContext, existingVendor);\n    return (\n        <Dialog fullScreen open={open}>\n            <DialogTitle>{existingVendor ? 'Update Your Vendor' : 'Add New Vendor'}</DialogTitle>\n            {errorMessage.length > 0 && (\n                <div style={{paddingLeft: 24}}>\n                    <Typography variant=\"body1\" color=\"error\">\n                        {errorMessage}\n                    </Typography>\n                </div>\n            )}\n            <Grid container spacing={2} style={{padding: 24}}>\n                <Grid item xs={12}>\n                    <Grid container spacing={2}>\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                error={hasErrorName}\n                                label=\"Vendor Name\"\n                                defaultValue={existingVendor?.name}\n                                onChange={(event) => {\n                                    onNameChange(event.target.value);\n                                }}\n                            />\n                        </Grid>\n\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                error={hasErrorMobile}\n                                defaultValue={existingVendor?.mobile}\n                                label=\"Mobile Number\"\n                                onChange={(event) => {\n                                    onMobileChange(event.target.value);\n                                }}\n                            />\n                        </Grid>\n                        <Grid item xs={8}>\n                            <Autocomplete\n                                id=\"city-search\"\n                                options={cityContext.cities}\n                                defaultValue={cityContext.cities.find(\n                                    (city) => city.id == existingVendor?.cityId\n                                )}\n                                getOptionLabel={(option) => {\n                                    return option.name;\n                                }}\n                                // style={{width: 300}}\n                                renderInput={(params) => (\n                                    <TextField\n                                        {...params}\n                                        error={hasErrorCity}\n                                        label=\"City\"\n                                        variant=\"outlined\"\n                                    />\n                                )}\n                                onChange={(event: any, value: CityType | null) => {\n                                    value && setCity(value);\n                                }}\n                            />\n                        </Grid>\n                        <Grid item xs={4}>\n                            <TextField\n                                fullWidth\n                                error={hasErrorDebt}\n                                defaultValue={existingVendor?.debt}\n                                label=\"Debt\"\n                                onChange={(event) => {\n                                    onDebtChange(event.target.value);\n                                }}\n                            />\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid item xs={12}>\n                    <Grid container spacing={2} justify={'flex-end'}>\n                        <Grid item>\n                            <Button\n                                variant=\"text\"\n                                onClick={() => {\n                                    cancel();\n                                }}\n                            >\n                                Cancel\n                            </Button>\n                        </Grid>\n                        <Grid item>\n                            <Button onClick={handleClick} loading={loading}>\n                                {existingVendor ? 'Update Vendor' : 'Add Vendor'}\n                            </Button>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </Dialog>\n    );\n};\n\nexport default VendorModal;\n","import React, {useState, useEffect, useContext} from 'react';\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\nimport EditIcon from '@material-ui/icons/Edit';\nimport {\n    Paper,\n    TableContainer,\n    Table,\n    TableHead,\n    TableRow,\n    TableCell,\n    TableSortLabel,\n    TableBody,\n    TablePagination,\n    makeStyles,\n    IconButton,\n    Card,\n    Typography,\n    Grid,\n} from '@material-ui/core';\nimport {firestore} from 'firebase';\nimport api from '../../api';\nimport VendorType from '../../model/vendor';\nimport Button from '../../components/Button/Button';\nimport {H3, Body, SH2, SH3, Caption} from '../../components/Typography/Typography';\nimport {colorPalette} from '../../theme';\nimport InboxIcon from '@material-ui/icons/Inbox';\nimport CallRoundedIcon from '@material-ui/icons/CallRounded';\nimport PinDropRoundedIcon from '@material-ui/icons/PinDropRounded';\nimport {CityContext} from '../../CityContext';\n\nconst columns: string[] = ['Name', 'Average Rate', 'Quantity', 'Total', 'Details', 'Actions'];\n\ninterface VendorsListType {\n    rows: VendorType[];\n    onRowDelete: Function;\n    onEditVendor: (index: number) => void;\n    deleting: boolean;\n    loading?: boolean;\n    allLoaded: boolean;\n    onLoadMore: () => void;\n}\n\nconst VendorsList = (props: VendorsListType) => {\n    const cityContext = useContext(CityContext);\n    return (\n        <div>\n            {props.rows.map((item: VendorType, index) => (\n                <div\n                    style={{\n                        padding: 8,\n                        borderBottom: `1px solid ${colorPalette.grayscale[4]}`,\n                    }}\n                    key={index}\n                >\n                    <Grid container>\n                        <Grid item xs={1} style={{paddingTop: 8, paddingBottom: 8}}>\n                            <H3>\n                                <InboxIcon fontSize=\"small\" />\n                            </H3>\n                        </Grid>\n                        <Grid item xs={9} style={{paddingTop: 8, paddingBottom: 8}}>\n                            <H3>{item.name}</H3>\n                            <div style={{paddingTop: 4}}>\n                                <Grid container alignItems=\"baseline\" spacing={1}>\n                                    <Grid item>\n                                        <Caption>Debt:</Caption>\n                                    </Grid>\n                                    <Grid item>\n                                        <SH2 color={colorPalette.primary[1].interaction}>\n                                            {item.debt}\n                                        </SH2>\n                                    </Grid>\n                                </Grid>\n                            </div>\n                        </Grid>\n\n                        <Grid item xs={2}>\n                            <IconButton\n                                aria-label=\"edit\"\n                                onClick={() => {\n                                    props.onEditVendor(index);\n                                }}\n                            >\n                                <EditIcon fontSize=\"small\" />\n                            </IconButton>\n                            <IconButton\n                                aria-label=\"delete\"\n                                onClick={() => {\n                                    props.onRowDelete(index);\n                                }}\n                                disabled={props.deleting}\n                            >\n                                <DeleteOutlineIcon fontSize=\"small\" />\n                            </IconButton>\n                        </Grid>\n                    </Grid>\n                    <Grid container>\n                        <Grid item xs={6}>\n                            <Grid container justify=\"center\" spacing={1}>\n                                <Grid item>\n                                    <CallRoundedIcon\n                                        fontSize=\"small\"\n                                        style={{color: colorPalette.grayscale[7]}}\n                                    />\n                                </Grid>\n                                <Grid item>\n                                    <Body color={colorPalette.grayscale[7]}>{item.mobile}</Body>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <Grid container justify=\"center\" spacing={1}>\n                                <Grid item>\n                                    <PinDropRoundedIcon\n                                        fontSize=\"small\"\n                                        style={{color: colorPalette.grayscale[7]}}\n                                    />\n                                </Grid>\n                                <Grid item>\n                                    <Body color={colorPalette.grayscale[7]}>\n                                        {\n                                            cityContext.cities.find(\n                                                (city) => city.id == item.cityId\n                                            )?.name\n                                        }\n                                    </Body>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                </div>\n            ))}\n            <Button\n                onClick={props.onLoadMore}\n                disabled={props.allLoaded}\n                loading={props.loading}\n                fullWidth\n                variant=\"text\"\n            >\n                Load More\n            </Button>\n        </div>\n    );\n};\n\nexport default VendorsList;\n","import React from 'react';\nimport VendorsTable from '../../layouts/VendorsTable/VendorsTable';\nimport {Typography, Grid, TextField, FormControl, makeStyles, IconButton} from '@material-ui/core';\nimport useVendorsPage from './useVendorsPage';\nimport VendorModal from '../../layouts/VendorModal/VendorModal';\nimport FloatingAlert from '../../components/FloatingAlert/FloatingAlert';\nimport VendorType from '../../model/vendor';\nimport VendorsList from '../../layouts/VendorsList/VendorsList';\nimport Button from '../../components/Button/Button';\nimport {colorPalette} from '../../theme';\nimport AddCircleRoundedIcon from '@material-ui/icons/AddCircleRounded';\nimport {PageWrapper, PageContent, PageHeader} from '../../components/PageContainer/PageContainer';\nimport {CityContext} from '../../CityContext';\n\nconst useStyles = makeStyles({\n    wrapper: {\n        height: '100vh',\n    },\n    content: {\n        overflowY: 'scroll',\n        height: 'calc(100vh - 110px - 56px - 16px)',\n    },\n});\n\nconst VendorsPage = () => {\n    const {\n        showNewVendorModal,\n        showEditVendorModal,\n        closeVendorModal,\n        modalOpen,\n        showSuccessMessage,\n        hideSuccessMessage,\n        deleteVendor,\n        loadVendors,\n        addVendor,\n        updateVendor,\n        deleting,\n        loading,\n        rows,\n        totalRows,\n        onChangeSearch,\n        currentVendor,\n    } = useVendorsPage();\n\n    const classes = useStyles();\n\n    return (\n        <CityContext.Consumer>\n            {({cities}) => (\n                <>\n                    <PageWrapper>\n                        <PageHeader\n                            placeholder=\"Search Vendors\"\n                            loadedRows={rows.length}\n                            totalRows={totalRows}\n                            openModal={showNewVendorModal}\n                            onChange={onChangeSearch}\n                            label=\"vendors\"\n                        />\n                        <PageContent>\n                            <VendorsList\n                                rows={rows}\n                                onRowDelete={deleteVendor}\n                                onEditVendor={showEditVendorModal}\n                                deleting={deleting}\n                                onLoadMore={loadVendors}\n                                allLoaded={rows.length === totalRows} //ToDo: pagination\n                                loading={loading}\n                            />\n                        </PageContent>\n                    </PageWrapper>\n                    <FloatingAlert\n                        severity=\"success\"\n                        open={showSuccessMessage}\n                        onClose={hideSuccessMessage}\n                        message=\"Vendor added successfully\"\n                    />\n                    <VendorModal\n                        open={modalOpen}\n                        close={closeVendorModal}\n                        aria-labelledby=\"vendor_modal\"\n                        onSubmit={currentVendor ? updateVendor : addVendor}\n                        existingVendor={currentVendor}\n                        loading={loading}\n                    />\n                </>\n            )}\n        </CityContext.Consumer>\n    );\n};\n\nexport default VendorsPage;\n","import {useState, useEffect, ChangeEvent} from 'react';\nimport poco from '../../poco';\nimport AccountType from '../../model/account';\nimport {AccountListResponse, Response, AccountResponse} from '../../types/responses';\n\nconst useAccountsPage = () => {\n    const [modalOpen, setModalOpen] = useState(false);\n    const [showSuccessMessage, setShowSuccessMessage] = useState(false);\n\n    const [rows, setRows] = useState<AccountType[]>([]);\n    const [deleting, setDeleting] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [offset, setOffset] = useState(0);\n    const [query, setQuery] = useState();\n    const [totalRows, setTotalRows] = useState(0);\n\n    const [currentAccount, setCurrentAccount] = useState<AccountType>();\n\n    const showNewAccountModal = () => {\n        setCurrentAccount(undefined);\n        setModalOpen(true);\n    };\n\n    const closeAccountModal = (created: boolean) => {\n        setModalOpen(false);\n        if (created) setShowSuccessMessage(true);\n    };\n\n    const showEditAccountModal = (index: number) => {\n        setCurrentAccount(rows[index]);\n        setModalOpen(true);\n    };\n\n    const hideSuccessMessage = () => {\n        setShowSuccessMessage(false);\n    };\n\n    const onChangeSearch = (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        loadAccounts(true, event.target.value);\n    };\n\n    const loadAccounts = (clear: boolean = false, query: string = '') => {\n        if (loading) return;\n        let offset = rows.length;\n        if (clear === true) {\n            setRows([]);\n            offset = 0;\n        }\n        setLoading(true);\n        poco.account.list(\n            offset,\n            query,\n            (response: AccountListResponse) => {\n                setLoading(false);\n                setRows((rows) => rows.concat(response.data.rows));\n                setTotalRows(response.data.count);\n            },\n            () => {\n                setLoading(false);\n            }\n        );\n    };\n\n    const addAccount = (newAccount: AccountType) => {\n        setLoading(true);\n        poco.account.create(\n            newAccount,\n            (accountResponse: AccountResponse) => {\n                setLoading(false);\n                if (accountResponse.success) {\n                    rows.unshift(accountResponse.data);\n                    setRows(rows);\n                    setTotalRows(prev => prev + 1);\n                    closeAccountModal(true);\n                } else {\n                    //TODO: Failure\n                }\n            },\n            () => {\n                //TODO: Failure\n                setLoading(false);\n                //ToDo failed to add data\n            }\n        );\n    };\n\n    const deleteAccount = (index: number) => {\n        setDeleting(true);\n        poco.account.delete(\n            rows[index].id!,\n            (response: Response) => {\n                if (response.success) {\n                    const remaining = rows.filter((row, i) => i !== index);\n                    setRows(remaining);\n                    setTotalRows(prev => prev - 1);\n                } else {\n                    //TODO: Handle error\n                }\n                setDeleting(false);\n            },\n            () => {\n                //TODO: Handle error\n                setDeleting(false);\n            }\n        );\n    };\n\n    const updateAccount = (newAccount: AccountType) => {\n        setLoading(true);\n        poco.account.update(\n            newAccount,\n            (accountResponse: AccountResponse) => {\n                setLoading(false);\n                if (accountResponse.success) {\n                    var foundIndex = rows.findIndex(\n                        (account) => account.id == accountResponse.data.id\n                    );\n                    rows[foundIndex] = accountResponse.data;\n                    setCurrentAccount(undefined);\n                    closeAccountModal(true);\n                } else {\n                    //TODO: Failure\n                }\n            },\n            () => {\n                //TODO: Failure\n                setLoading(false);\n                //ToDo failed to add data\n            }\n        );\n    };\n\n    useEffect(() => {\n        loadAccounts(true);\n    }, []);\n\n    return {\n        showNewAccountModal,\n        closeAccountModal,\n        modalOpen,\n        showSuccessMessage,\n        hideSuccessMessage,\n        deleteAccount,\n        showEditAccountModal,\n        addAccount,\n        updateAccount,\n        onChangeSearch,\n        loadAccounts,\n        deleting,\n        loading,\n        rows,\n        currentAccount,\n        totalRows,\n    };\n};\nexport default useAccountsPage;\n","import firebase from 'firebase';\nimport AccountType from '../../model/account';\nimport {useEffect, useState} from 'react';\nimport api from '../../api';\nimport {exists, isNotANumber} from '../../validate';\n\nconst useAccountModal = (\n    onSubmit: (product: AccountType) => void,\n    close: (created: boolean) => void,\n    loading: boolean,\n    existingAccount?: AccountType\n) => {\n    const [name, setName] = useState('');\n    const [type, setType] = useState('');\n    const [amount, setAmount] = useState('');\n    const [details, setDetails] = useState('');\n\n    const [hasErrorName, setHasErrorName] = useState(false);\n    const [hasErrorType, setHasErrorType] = useState(false);\n    const [hasErrorAmount, setHasErrorAmount] = useState(false);\n\n    const [errorMessage, setErrorMessage] = useState('');\n\n    useEffect(() => {\n        setName(existingAccount?.name || '');\n        setDetails(existingAccount?.details || '');\n        setType(existingAccount?.type || '');\n        setAmount(existingAccount?.amount?.toString() || '');\n    }, [existingAccount]);\n\n    const onNameChange = (value: string) => {\n        setName(value);\n    };\n\n    const onDetailsChange = (value: string) => {\n        setDetails(value);\n    };\n\n    const onTypeChange = (value: string) => {\n        setType(value);\n    };\n\n    const onAmountChange = (value: string) => {\n        setAmount(value);\n    };\n\n    const isValid = (): boolean => {\n        resetErrors();\n        let valid = true;\n        if (!exists(name)) {\n            valid = false;\n            setHasErrorName(true);\n            setErrorMessage('Please give some name to your account.');\n        } else if (!exists(type)) {\n            valid = false;\n            setHasErrorType(true);\n            setErrorMessage('Please select an account type');\n        } else if (isNotANumber(amount)) {\n            valid = false;\n            setHasErrorType(true);\n            setErrorMessage('Amount can only be digits');\n        }\n\n        return valid;\n    };\n\n    const resetErrors = () => {\n        setErrorMessage('');\n        setHasErrorName(false);\n        setHasErrorType(false);\n        setHasErrorAmount(false);\n    };\n\n    const resetFields = () => {\n        setName('');\n        setDetails('');\n        setType('');\n        setAmount('');\n    };\n\n    const cancel = () => {\n        resetErrors();\n        resetFields();\n        close(false);\n    };\n\n    const handleClick = () => {\n        if (!loading && isValid()) {\n            const newAccount: AccountType = {\n                id: existingAccount?.id,\n                name,\n                type,\n                details,\n                amount: Number(amount) || 0,\n            };\n            onSubmit(newAccount);\n        }\n    };\n    return {\n        handleClick,\n        onNameChange,\n        onDetailsChange,\n        onTypeChange,\n        onAmountChange,\n        loading,\n        errorMessage,\n        hasErrorAmount,\n        hasErrorName,\n        hasErrorType,\n        cancel,\n    };\n};\n\nexport default useAccountModal;\n","import React from 'react';\nimport {\n    Dialog,\n    DialogTitle,\n    FormControl,\n    TextField,\n    Grid,\n    Typography,\n    InputLabel,\n    Select,\n    MenuItem,\n} from '@material-ui/core';\nimport Button from '../../components/Button/Button';\nimport useAccountModal from './useAccountModal';\nimport AccountType from '../../model/account';\n\nexport interface AccountModalType {\n    open: boolean;\n    loading: boolean;\n    existingAccount?: AccountType;\n    close: (created: boolean) => void;\n    onSubmit: (account: AccountType) => void;\n}\nconst AccountModal = (props: AccountModalType) => {\n    const {open, close, onSubmit, existingAccount, loading} = props;\n    const {\n        handleClick,\n        onNameChange,\n        onDetailsChange,\n        onTypeChange,\n        onAmountChange,\n        hasErrorAmount,\n        hasErrorName,\n        hasErrorType,\n        errorMessage,\n        cancel,\n    } = useAccountModal(onSubmit, close, loading, existingAccount);\n    return (\n        <Dialog open={open}>\n            <DialogTitle>{existingAccount ? 'Update Your Account' : 'Add New Account'}</DialogTitle>\n            {errorMessage.length > 0 && (\n                <div style={{paddingLeft: 24}}>\n                    <Typography variant=\"body1\" color=\"error\">\n                        {errorMessage}\n                    </Typography>\n                </div>\n            )}\n            <Grid container spacing={2} style={{padding: 24}}>\n                <Grid item xs={12}>\n                    <Grid container spacing={2}>\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                defaultValue={existingAccount?.name}\n                                error={hasErrorName}\n                                label=\"Account Name\"\n                                onChange={(event) => {\n                                    onNameChange(event.target.value);\n                                }}\n                            />\n                        </Grid>\n                        <Grid item xs={4}>\n                            <FormControl variant=\"outlined\" fullWidth error={hasErrorType}>\n                                <InputLabel id=\"demo-simple-select-outlined-label\">Type</InputLabel>\n                                <Select\n                                    labelId=\"demo-simple-select-outlined-label\"\n                                    id=\"demo-simple-select-outlined\"\n                                    onChange={(event) => {\n                                        onTypeChange(event.target.value as string);\n                                    }}\n                                    defaultValue={existingAccount?.type}\n                                    label=\"Type\"\n                                >\n                                    <MenuItem value=\"Cash\">Cash</MenuItem>\n                                    <MenuItem value=\"Bank\">Bank</MenuItem>\n                                </Select>\n                            </FormControl>\n                        </Grid>\n\n                        <Grid item xs={8}>\n                            <TextField\n                                fullWidth\n                                defaultValue={existingAccount?.amount}\n                                error={hasErrorAmount}\n                                label=\"Account Amount\"\n                                onChange={(event) => {\n                                    onAmountChange(event.target.value);\n                                }}\n                            />\n                        </Grid>\n\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                defaultValue={existingAccount?.details}\n                                label=\"Details\"\n                                multiline\n                                rows={3}\n                                onChange={(event) => {\n                                    onDetailsChange(event.target.value);\n                                }}\n                            />\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid item xs={12}>\n                    <Grid container spacing={2} justify={'flex-end'}>\n                        <Grid item>\n                            <Button\n                                variant=\"text\"\n                                onClick={() => {\n                                    cancel();\n                                }}\n                            >\n                                Cancel\n                            </Button>\n                        </Grid>\n                        <Grid item>\n                            <Button onClick={handleClick} loading={loading}>\n                                {existingAccount ? 'Update Account' : 'Add Account'}\n                            </Button>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </Dialog>\n    );\n};\n\nexport default AccountModal;\n","import React, {useState, useEffect} from 'react';\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\nimport EditIcon from '@material-ui/icons/Edit';\nimport {\n    Paper,\n    TableContainer,\n    Table,\n    TableHead,\n    TableRow,\n    TableCell,\n    TableSortLabel,\n    TableBody,\n    TablePagination,\n    makeStyles,\n    IconButton,\n    Card,\n    Typography,\n    Grid,\n} from '@material-ui/core';\nimport {firestore} from 'firebase';\nimport api from '../../api';\nimport AccountType from '../../model/account';\nimport Button from '../../components/Button/Button';\nimport {H3, Body, SH2, SH3, Caption} from '../../components/Typography/Typography';\nimport {colorPalette} from '../../theme';\nimport InboxIcon from '@material-ui/icons/Inbox';\nimport CallRoundedIcon from '@material-ui/icons/CallRounded';\nimport PinDropRoundedIcon from '@material-ui/icons/PinDropRounded';\nimport Chip from '@material-ui/core/Chip';\n\nconst columns: string[] = ['Name', 'Average Rate', 'Quantity', 'Total', 'Details', 'Actions'];\n\ninterface AccountsListType {\n    rows: AccountType[];\n    onRowDelete: Function;\n    onEditAccount: (index: number) => void;\n    deleting: boolean;\n    loading?: boolean;\n    allLoaded: boolean;\n    onLoadMore: () => void;\n}\n\nconst AccountsList = (props: AccountsListType) => {\n    return (\n        <div>\n            {props.rows.map((item: AccountType, index) => (\n                <div\n                    style={{\n                        padding: 8,\n                        borderBottom: `1px solid ${colorPalette.grayscale[4]}`,\n                    }}\n                    key={index}\n                >\n                    <Grid container>\n                        <Grid item xs={10} style={{paddingTop: 8, paddingBottom: 8}}>\n                            <H3>{item.name}</H3>\n                            <Body>{item.details}</Body>\n                            <Grid container alignItems=\"center\" spacing={1}>\n                                <Grid>\n                                    <Chip label={item.type} size=\"small\" />\n                                </Grid>\n                                <Grid item>\n                                    <SH2 color={colorPalette.primary[0].interaction}>\n                                        {item.amount}\n                                    </SH2>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n\n                        <Grid item xs={1}>\n                        <IconButton\n                                aria-label=\"edit\"\n                                onClick={() => {\n                                    props.onEditAccount(index);\n                                }}\n                            >\n                                <EditIcon fontSize=\"small\" />\n                            </IconButton>\n                            <IconButton\n                                aria-label=\"delete\"\n                                onClick={() => {\n                                    props.onRowDelete(index);\n                                }}\n                                disabled={props.deleting}\n                            >\n                                <DeleteOutlineIcon fontSize=\"small\" />\n                            </IconButton>\n                        </Grid>\n                    </Grid>\n                </div>\n            ))}\n            <Button\n                onClick={props.onLoadMore}\n                disabled={props.allLoaded}\n                loading={props.loading}\n                fullWidth\n                variant=\"text\"\n            >\n                Load More\n            </Button>\n        </div>\n    );\n};\n\nexport default AccountsList;\n","import React from 'react';\nimport AccountsTable from '../../layouts/AccountsTable/AccountsTable';\nimport {Typography, Grid, TextField, FormControl, makeStyles, IconButton} from '@material-ui/core';\nimport useAccountsPage from './useAccountsPage';\nimport AccountModal from '../../layouts/AccountModal/AccountModal';\nimport FloatingAlert from '../../components/FloatingAlert/FloatingAlert';\nimport AccountType from '../../model/account';\nimport AccountsList from '../../layouts/AccountsList/AccountsList';\nimport Button from '../../components/Button/Button';\nimport {colorPalette} from '../../theme';\nimport AddCircleRoundedIcon from '@material-ui/icons/AddCircleRounded';\nimport {PageWrapper, PageContent, PageHeader} from '../../components/PageContainer/PageContainer';\n\nconst useStyles = makeStyles({\n    wrapper: {\n        height: '100vh',\n    },\n    content: {\n        overflowY: 'scroll',\n        height: 'calc(100vh - 110px - 56px - 16px)',\n    },\n});\n\nconst AccountsPage = () => {\n    const {\n        showNewAccountModal,\n        closeAccountModal,\n        modalOpen,\n        showSuccessMessage,\n        hideSuccessMessage,\n        deleteAccount,\n        showEditAccountModal,\n        loadAccounts,\n        addAccount,\n        updateAccount,\n        deleting,\n        loading,\n        rows,\n        currentAccount,\n        totalRows,\n        onChangeSearch,\n    } = useAccountsPage();\n\n    const classes = useStyles();\n\n    return (\n        <>\n            <PageWrapper>\n                <PageHeader\n                    placeholder=\"Search Accounts\"\n                    loadedRows={rows.length}\n                    totalRows={totalRows}\n                    openModal={showNewAccountModal}\n                    onChange={onChangeSearch}\n                    label=\"accounts\"\n                />\n                <PageContent>\n                    <AccountsList\n                        rows={rows}\n                        onRowDelete={deleteAccount}\n                        onEditAccount={showEditAccountModal}\n                        deleting={deleting}\n                        onLoadMore={loadAccounts}\n                        allLoaded={rows.length == totalRows} //ToDo: pagination\n                        loading={loading}\n                    />\n                </PageContent>\n            </PageWrapper>\n            <FloatingAlert\n                severity=\"success\"\n                open={showSuccessMessage}\n                onClose={hideSuccessMessage}\n                message=\"Account added successfully\"\n            />\n            <AccountModal\n                open={modalOpen}\n                loading={loading}\n                existingAccount={currentAccount}\n                close={closeAccountModal}\n                aria-labelledby=\"account_modal\"\n                onSubmit={currentAccount ? updateAccount : addAccount}\n            />\n        </>\n    );\n};\n\nexport default AccountsPage;\n","import {useState, useEffect, ChangeEvent} from 'react';\nimport poco from '../../poco';\nimport PurchaseType from '../../model/purchase';\nimport {PurchaseListResponse, Response, PurchaseResponse} from '../../types/responses';\n\nconst usePurchasesPage = () => {\n    const [modalOpen, setModalOpen] = useState(false);\n    const [showSuccessMessage, setShowSuccessMessage] = useState(false);\n\n    const [rows, setRows] = useState<PurchaseType[]>([]);\n    const [deleting, setDeleting] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [offset, setOffset] = useState(0);\n    const [query, setQuery] = useState();\n    const [totalRows, setTotalRows] = useState(0);\n\n    const [currentPurchase, setCurrentPurchase] = useState<PurchaseType>();\n\n    const showNewPurchaseModal = () => {\n        setCurrentPurchase(undefined);\n        setModalOpen(true);\n    };\n\n    const closePurchaseModal = (created: boolean) => {\n        setModalOpen(false);\n        if (created) setShowSuccessMessage(true);\n    };\n\n    const showEditPurchaseModal = (index: number) => {\n        setCurrentPurchase(rows[index]);\n        setModalOpen(true);\n    };\n\n    const hideSuccessMessage = () => {\n        setShowSuccessMessage(false);\n    };\n\n    const onChangeSearch = (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        loadPurchases(true, event.target.value);\n    };\n\n    const loadPurchases = (clear: boolean = false, query: string = '') => {\n        if (loading) return;\n        let offset = rows.length;\n        if (clear === true) {\n            setRows([]);\n            offset = 0;\n        }\n        setLoading(true);\n        poco.purchase.list(\n            offset,\n            query,\n            (response: PurchaseListResponse) => {\n                setLoading(false);\n                setRows((rows) => rows.concat(response.data.rows));\n                setTotalRows(response.data.count);\n            },\n            () => {\n                setLoading(false);\n            }\n        );\n    };\n\n    const addPurchase = (newPurchase: PurchaseType) => {\n        setLoading(true);\n        poco.purchase.create(\n            newPurchase,\n            (purchaseResponse: PurchaseResponse) => {\n                setLoading(false);\n                if (purchaseResponse.success) {\n                    rows.unshift(newPurchase);\n                    setRows(rows);\n                    setTotalRows((totalRows) => totalRows + 1);\n                    closePurchaseModal(true);\n                } else {\n                    //TODO: Failure\n                }\n            },\n            () => {\n                //TODO: Failure\n                setLoading(false);\n                //ToDo failed to add data\n            }\n        );\n    };\n\n    const deletePurchase = (index: number) => {\n        setDeleting(true);\n        poco.purchase.delete(\n            rows[index].id!,\n            (response: Response) => {\n                if (response.success) {\n                    const remaining = rows.filter((row, i) => i !== index);\n                    setRows(remaining);\n                } else {\n                    //TODO: Handle error\n                }\n                setDeleting(false);\n            },\n            () => {\n                //TODO: Handle error\n                setDeleting(false);\n            }\n        );\n    };\n\n    const updatePurchase = (newPurchase: PurchaseType) => {\n        setLoading(true);\n        poco.purchase.update(\n            newPurchase,\n            (purchaseResponse: PurchaseResponse) => {\n                setLoading(false);\n                if (purchaseResponse.success) {\n                    var foundIndex = rows.findIndex(\n                        (purchase) => purchase.id == purchaseResponse.data.id\n                    );\n                    rows[foundIndex] = purchaseResponse.data;\n                    setCurrentPurchase(undefined);\n                    closePurchaseModal(true);\n                } else {\n                    //TODO: Failure\n                }\n            },\n            () => {\n                //TODO: Failure\n                setLoading(false);\n                //ToDo failed to add data\n            }\n        );\n    };\n\n    useEffect(() => {\n        loadPurchases(true);\n    }, []);\n\n    return {\n        showNewPurchaseModal,\n        closePurchaseModal,\n        modalOpen,\n        showSuccessMessage,\n        hideSuccessMessage,\n        deletePurchase,\n        showEditPurchaseModal,\n        addPurchase,\n        updatePurchase,\n        onChangeSearch,\n        loadPurchases,\n        deleting,\n        loading,\n        rows,\n        currentPurchase,\n        totalRows,\n    };\n};\nexport default usePurchasesPage;\n","import PurchaseType from '../../model/purchase';\nimport {useState} from 'react';\nimport api from '../../api';\nimport CityType from '../../model/city';\nimport ProductType from '../../model/product';\nimport VendorType from '../../model/vendor';\nimport poco from '../../poco';\nimport {ProductListResponse, VendorListResponse} from '../../types/responses';\nimport {isNotANumber} from '../../validate';\n\nconst usePurchaseModal = (\n    onSubmit: (purchase: PurchaseType) => void,\n    close: (created: boolean) => void,\n    loading: boolean,\n    existingPurchase?: PurchaseType\n) => {\n    const [productsList, setProductsList] = useState<ProductType[]>([]);\n    const [vendorsList, setVendorsList] = useState<VendorType[]>([]);\n    const [product, setProduct] = useState<ProductType>();\n    const [vendor, setVendor] = useState<VendorType>();\n    const [quantity, setQuantity] = useState('');\n    const [rate, setRate] = useState('');\n\n    const [loadingProducts, setLoadingProducts] = useState(false);\n    const [loadingVendors, setLoadingVendors] = useState(false);\n\n    const [errorMessage, setErrorMessage] = useState('');\n\n    const [hasErrorProduct, setHasErrorProduct] = useState(false);\n    const [hasErrorVendor, setHasErrorVendor] = useState(false);\n    const [hasErrorQuantity, setHasErrorQuantity] = useState(false);\n    const [hasErrorRate, setHasErrorRate] = useState(false);\n\n    const onQuantityChange = (value: string) => {\n        if (hasErrorQuantity) {\n            setErrorMessage('');\n            setHasErrorQuantity(false);\n        }\n        setQuantity(value);\n    };\n\n    const onRateChange = (value: string) => {\n        if (hasErrorRate) {\n            setErrorMessage('');\n            setHasErrorRate(false);\n        }\n        setRate(value);\n    };\n    const loadProducts = (query: string) => {\n        if (loadingProducts || query.length < 4) return;\n        setLoadingProducts(true);\n        poco.product.list(\n            0,\n            query,\n            (response: ProductListResponse) => {\n                setLoadingProducts(false);\n                setProductsList(response.data.rows);\n            },\n            () => {\n                setLoadingProducts(false);\n            }\n        );\n    };\n\n    const loadVendors = (query: string) => {\n        if (loadingVendors || query.length < 4) return;\n        setLoadingVendors(true);\n        poco.vendor.list(\n            0,\n            query,\n            (response: VendorListResponse) => {\n                setLoadingVendors(false);\n                setVendorsList(response.data.rows);\n            },\n            () => {\n                setLoadingVendors(false);\n            }\n        );\n    };\n\n    const isValid = (): boolean => {\n        resetErrors();\n        let valid = true;\n        if (product == undefined) {\n            valid = false;\n            setHasErrorProduct(true);\n            setErrorMessage('Please select a product.');\n        } else if (vendor == undefined) {\n            valid = false;\n            setHasErrorVendor(true);\n            setErrorMessage('Please select a vendor.');\n        } else if (isNotANumber(rate)) {\n            valid = false;\n            setHasErrorRate(true);\n            setErrorMessage('Rate can only be digits');\n        } else if (isNotANumber(quantity)) {\n            valid = false;\n            setHasErrorQuantity(true);\n            setErrorMessage('Quantity can only be digits');\n        }\n\n        return valid;\n    };\n\n    const resetErrors = () => {\n        setErrorMessage('');\n        setHasErrorProduct(false);\n        setHasErrorVendor(false);\n        setHasErrorRate(false);\n        setHasErrorQuantity(false);\n    };\n\n    const handleClick = () => {\n        if (!loading && isValid()) {\n            const newPurchase: PurchaseType = {\n                // id: existingProduct?.id,\n                vendorId: vendor?.id!,\n                vendorName: vendor?.name,\n                productId: product?.id!,\n                productName: product?.name,\n                quantity: Number(quantity) || 0,\n                rate: Number(rate) || 0,\n            };\n            onSubmit(newPurchase);\n        }\n    };\n\n    const cancel = () => {\n        resetErrors();\n        close(false);\n    };\n\n    // const handleClick = () => {\n    // if (!loading) {\n    //     setLoading(true);\n    //     const now = Date.now();\n    // const newPurchase: PurchaseType = {\n    //         product: {id: product?.id, name: product?.name},\n    //         vendor: {id: vendor?.id, name: vendor?.name},\n    //         quantity: quantity,\n    //         rate: rate,\n    //         createdAt: now,\n    //         updatedAt: now,\n    //     };\n    //     api.purchase.add(\n    //         newPurchase,\n    //         (id: string) => {\n    //             setLoading(false);\n    //             newPurchase.id = id;\n    //             onAdd(newPurchase);\n    //             close(true);\n    //         },\n    //         () => {\n    //             setLoading(false);\n    //             //ToDo failed to add data\n    //         }\n    //     );\n    // }\n    // };\n\n    return {\n        handleClick,\n        onQuantityChange,\n        onRateChange,\n        setProduct,\n        setVendor,\n        productsList,\n        vendorsList,\n        loadProducts,\n        loadVendors,\n        loadingProducts,\n        loadingVendors,\n        hasErrorVendor,\n        hasErrorProduct,\n        hasErrorRate,\n        hasErrorQuantity,\n        errorMessage,\n        cancel,\n    };\n};\n\nexport default usePurchaseModal;\n","import React from 'react';\nimport {Dialog, DialogTitle, FormControl, TextField, Grid, Typography} from '@material-ui/core';\nimport Button from '../../components/Button/Button';\nimport usePurchaseModal from './usePurchaseModal';\nimport PurchaseType from '../../model/purchase';\nimport CityType from '../../model/city';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport VendorType from '../../model/vendor';\nimport ProductType from '../../model/product';\n\nexport interface PurchaseModalType {\n    open: boolean;\n    loading: boolean;\n    existingPurchase?: PurchaseType;\n    close: (created: boolean) => void;\n    onSubmit: (purchase: PurchaseType) => void;\n}\nconst PurchaseModal = (props: PurchaseModalType) => {\n    const {open, close, onSubmit, loading, existingPurchase} = props;\n    const {\n        handleClick,\n        onQuantityChange,\n        onRateChange,\n        setProduct,\n        setVendor,\n        vendorsList,\n        productsList,\n        loadProducts,\n        loadVendors,\n        loadingProducts,\n        loadingVendors,\n        cancel,\n        hasErrorVendor,\n        hasErrorProduct,\n        hasErrorQuantity,\n        hasErrorRate,\n        errorMessage,\n    } = usePurchaseModal(onSubmit, close, loading, existingPurchase);\n    return (\n        <Dialog fullScreen open={open}>\n            <DialogTitle>Add New Purchase</DialogTitle>\n            {errorMessage.length > 0 && (\n                <div style={{paddingLeft: 24}}>\n                    <Typography variant=\"body1\" color=\"error\">\n                        {errorMessage}\n                    </Typography>\n                </div>\n            )}\n            <Grid container spacing={2} style={{padding: 24}}>\n                <Grid item xs={12}>\n                    <Grid container spacing={2}>\n                        <Grid item xs={12}>\n                            <Autocomplete\n                                id=\"vendor-search\"\n                                options={vendorsList}\n                                loading={loadingVendors}\n                                getOptionLabel={(option) => {\n                                    return option.name || 'Dummy Vendor';\n                                }}\n                                renderInput={(params) => (\n                                    <TextField\n                                        {...params}\n                                        label=\"Search Vendor\"\n                                        variant=\"outlined\"\n                                        error={hasErrorVendor}\n                                        onChange={(event) => {\n                                            loadVendors(event.target.value);\n                                        }}\n                                    />\n                                )}\n                                onChange={(event: any, value: VendorType | null) => {\n                                    value && setVendor(value);\n                                }}\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <Autocomplete\n                                id=\"product-search\"\n                                options={productsList}\n                                loading={loadingProducts}\n                                getOptionLabel={(option) => {\n                                    return option.name || 'Dummy Product';\n                                }}\n                                renderInput={(params) => (\n                                    <TextField\n                                        {...params}\n                                        label=\"Search Product\"\n                                        variant=\"outlined\"\n                                        error={hasErrorVendor}\n                                        onChange={(event) => {\n                                            loadProducts(event.target.value);\n                                        }}\n                                    />\n                                )}\n                                onChange={(event: any, value: ProductType | null) => {\n                                    value && setProduct(value);\n                                }}\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                label=\"Quantity\"\n                                error={hasErrorProduct}\n                                onChange={(event) => {\n                                    onQuantityChange(event.target.value);\n                                }}\n                            />\n                        </Grid>\n\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                label=\"Rate\"\n                                error={hasErrorRate}\n                                onChange={(event) => {\n                                    onRateChange(event.target.value);\n                                }}\n                            />\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid item xs={12}>\n                    <Grid container spacing={2} justify={'flex-end'}>\n                        <Grid item>\n                            <Button\n                                variant=\"text\"\n                                onClick={() => {\n                                    cancel();\n                                }}\n                            >\n                                Cancel\n                            </Button>\n                        </Grid>\n                        <Grid item>\n                            <Button onClick={handleClick} loading={loading}>\n                                Add Purchase\n                            </Button>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </Dialog>\n    );\n};\n\nexport default PurchaseModal;\n","import React, {useState, useEffect} from 'react';\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\nimport EditIcon from '@material-ui/icons/Edit';\nimport {\n    Paper,\n    TableContainer,\n    Table,\n    TableHead,\n    TableRow,\n    TableCell,\n    TableSortLabel,\n    TableBody,\n    TablePagination,\n    makeStyles,\n    IconButton,\n    Card,\n    Typography,\n    Grid,\n} from '@material-ui/core';\nimport {firestore} from 'firebase';\nimport api from '../../api';\nimport Button from '../../components/Button/Button';\nimport {H3, Body} from '../../components/Typography/Typography';\nimport {colorPalette} from '../../theme';\nimport InboxIcon from '@material-ui/icons/Inbox';\nimport MoreButton from '../../components/MoreButton/MoreButton';\nimport PurchaseType from '../../model/purchase';\n\nconst columns: string[] = ['Name', 'Average Rate', 'Quantity', 'Total', 'Details', 'Actions'];\n\nconst useStyles = makeStyles({\n    head: {},\n});\n\ninterface PurchasesListType {\n    rows: PurchaseType[];\n    onRowDelete: Function;\n    deleting: boolean;\n    loading?: boolean;\n    allLoaded: boolean;\n    onLoadMore: () => void;\n}\n\nconst PurchasesList = (props: PurchasesListType) => {\n    const classes = useStyles();\n    return (\n        <div className={classes.head}>\n            {props.rows.map((item: PurchaseType, index) => (\n                <div\n                    style={{\n                        padding: 8,\n                        borderBottom: `1px solid ${colorPalette.grayscale[4]}`,\n                    }}\n                    key={index}\n                >\n                    <Grid container>\n                        <Grid item xs={1} style={{paddingTop: 8, paddingBottom: 8}}>\n                            <H3>\n                                <InboxIcon fontSize=\"small\" />\n                            </H3>\n                        </Grid>\n                        <Grid item xs={6} style={{paddingTop: 8, paddingBottom: 8}}>\n                            <H3>{item.productName}</H3>\n                            <div style={{paddingTop: 4}}>\n                                <Body color={colorPalette.grayscale[7]}>{item.vendorName}</Body>\n                            </div>\n                        </Grid>\n                        <Grid\n                            item\n                            style={{\n                                borderLeft: `1px solid ${colorPalette.grayscale[3]}`,\n                                paddingLeft: 16,\n                                paddingRight: 8,\n                                paddingTop: 16,\n                                paddingBottom: 16,\n                            }}\n                        >\n                            <Body color={colorPalette.grayscale[7]}>Rs.</Body>\n                            <Body color={colorPalette.grayscale[7]}>Qt.</Body>\n                            <Body color={colorPalette.primary[0].base}>Tl.</Body>\n                        </Grid>\n                        <Grid\n                            item\n                            xs={2}\n                            style={{\n                                paddingTop: 16,\n                                paddingBottom: 16,\n                            }}\n                        >\n                            <Body color={colorPalette.grayscale[7]}>{item.rate}</Body>\n                            <Body color={colorPalette.grayscale[7]}>{item.quantity}</Body>\n                            <Body color={colorPalette.primary[0].base}>\n                                {(item.quantity || 0) * (item.rate || 0)}\n                            </Body>\n                        </Grid>\n                        <Grid item xs={1}>\n                            <IconButton\n                                aria-label=\"delete\"\n                                onClick={() => {\n                                    props.onRowDelete(index);\n                                }}\n                                disabled={props.deleting}\n                            >\n                                <DeleteOutlineIcon fontSize=\"small\" />\n                            </IconButton>\n                        </Grid>\n                    </Grid>\n                </div>\n            ))}\n            <Button\n                onClick={props.onLoadMore}\n                disabled={props.allLoaded}\n                loading={props.loading}\n                fullWidth\n                variant=\"text\"\n            >\n                Load More\n            </Button>\n        </div>\n    );\n};\n\nexport default PurchasesList;\n","import React from 'react';\nimport PurchasesTable from '../../layouts/PurchasesTable/PurchasesTable';\nimport {Typography, Grid, TextField, FormControl, makeStyles, IconButton} from '@material-ui/core';\nimport usePurchasesPage from './usePurchasesPage';\nimport PurchaseModal from '../../layouts/PurchaseModal/PurchaseModal';\nimport FloatingAlert from '../../components/FloatingAlert/FloatingAlert';\nimport PurchaseType from '../../model/purchase';\nimport PurchasesList from '../../layouts/PurchasesList/PurchasesList';\nimport Button from '../../components/Button/Button';\nimport {colorPalette} from '../../theme';\nimport AddCircleRoundedIcon from '@material-ui/icons/AddCircleRounded';\nimport {PageWrapper, PageContent, PageHeader} from '../../components/PageContainer/PageContainer';\n\nconst useStyles = makeStyles({\n    wrapper: {\n        height: '100vh',\n    },\n    content: {\n        overflowY: 'scroll',\n        height: 'calc(100vh - 110px - 56px - 16px)',\n    },\n});\n\nconst PurchasesPage = () => {\n    const {\n        showNewPurchaseModal,\n        closePurchaseModal,\n        modalOpen,\n        showSuccessMessage,\n        hideSuccessMessage,\n        deletePurchase,\n        showEditPurchaseModal,\n        loadPurchases,\n        addPurchase,\n        updatePurchase,\n        deleting,\n        loading,\n        rows,\n        currentPurchase,\n        totalRows,\n        onChangeSearch,\n    } = usePurchasesPage();\n\n    const classes = useStyles();\n\n    return (\n        <>\n            <PageWrapper>\n                <PageHeader\n                    placeholder=\"Search Purchases\"\n                    loadedRows={rows.length}\n                    totalRows={totalRows}\n                    openModal={showNewPurchaseModal}\n                    onChange={onChangeSearch}\n                    label=\"purchases\"\n                />\n                <PageContent>\n                    <PurchasesList\n                        rows={rows}\n                        onRowDelete={deletePurchase}\n                        // onEditPurchase={showEditPurchaseModal}\n                        deleting={deleting}\n                        onLoadMore={loadPurchases}\n                        allLoaded={rows.length == totalRows} //ToDo: pagination\n                        loading={loading}\n                    />\n                </PageContent>\n            </PageWrapper>\n            <FloatingAlert\n                severity=\"success\"\n                open={showSuccessMessage}\n                onClose={hideSuccessMessage}\n                message=\"Purchase added successfully\"\n            />\n            <PurchaseModal\n                open={modalOpen}\n                loading={loading}\n                // existingPurchase={currentPurchase}\n                close={closePurchaseModal}\n                aria-labelledby=\"purchase_modal\"\n                onSubmit={currentPurchase ? updatePurchase : addPurchase}\n            />\n        </>\n    );\n};\n\nexport default PurchasesPage;\n","import {useState, useEffect, ChangeEvent} from 'react';\nimport poco from '../../poco';\nimport InvoiceType from '../../model/invoice';\nimport {InvoiceListResponse, Response, InvoiceResponse, InvoiceSalesResponse} from '../../types/responses';\n\nconst useInvoicesPage = () => {\n    const [modalOpen, setModalOpen] = useState(false);\n    const [openSalesModal, setOpenSalesModal] = useState(false);\n    const [showSuccessMessage, setShowSuccessMessage] = useState(false);\n\n    const [rows, setRows] = useState<InvoiceType[]>([]);\n    const [deleting, setDeleting] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [loadingSales, setLoadingSales] = useState(false);\n    const [detailedInvoice, setDetailedInvoice] = useState<InvoiceType>()\n    const [totalRows, setTotalRows] = useState(0);\n\n    const [currentInvoice, setCurrentInvoice] = useState<InvoiceType>();\n\n    const showNewInvoiceModal = () => {\n        setCurrentInvoice(undefined);\n        setModalOpen(true);\n    };\n\n    const closeInvoiceModal = (created: boolean) => {\n        setModalOpen(false);\n        if (created) setShowSuccessMessage(true);\n    };\n\n    const closeInvoiceSales = () => {\n        setOpenSalesModal(false);\n        setDetailedInvoice(undefined);\n    };\n\n    const showEditInvoiceModal = (index: number) => {\n        setCurrentInvoice(rows[index]);\n        setModalOpen(true);\n    };\n\n    const hideSuccessMessage = () => {\n        setShowSuccessMessage(false);\n    };\n\n    const onChangeSearch = (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        loadInvoices(true, event.target.value);\n    };\n\n    const loadInvoices = (clear: boolean = false, query: string = '') => {\n        if (loading) return;\n        let offset = rows.length;\n        if (clear === true) {\n            setRows([]);\n            offset = 0;\n        }\n        setLoading(true);\n        poco.invoice.list(\n            offset,\n            query,\n            (response: InvoiceListResponse) => {\n                setLoading(false);\n                setRows((rows) => rows.concat(response.data.rows));\n                setTotalRows(response.data.count);\n            },\n            () => {\n                setLoading(false);\n            }\n        );\n    };\n\n    const loadInvoiceSales = (index: number) => {\n        setLoadingSales(true);\n        setOpenSalesModal(true);\n        poco.invoice.sales(\n            rows[index].id!,\n            (response: InvoiceSalesResponse) => {\n                \n                if(response.success){\n                    const invoice: InvoiceType = rows[index];\n                    invoice.sales = response.data.rows;\n                    setDetailedInvoice(invoice);\n                }\n                setLoadingSales(false);\n                \n            },\n            () => {\n                setLoading(false);\n            }\n        );\n    };\n\n    const addInvoice = (newInvoice: InvoiceType) => {\n        setLoading(true);\n        \n        poco.invoice.create(\n            newInvoice,\n            (invoiceResponse: InvoiceResponse) => {\n                setLoading(false);\n                if (invoiceResponse.success) {\n                    newInvoice.bill = invoiceResponse.data.bill;\n                    newInvoice.totalSales = invoiceResponse.data.totalSales;\n                    rows.unshift(newInvoice);\n                    setRows(rows);\n                    setTotalRows((totalRows) => totalRows + 1);\n                    closeInvoiceModal(true);\n                } else {\n                    //TODO: Failure\n                }\n            },\n            () => {\n                //TODO: Failure\n                setLoading(false);\n                //ToDo failed to add data\n            }\n        );\n    };\n\n    const deleteInvoice = (index: number) => {\n        setDeleting(true);\n        poco.invoice.delete(\n            rows[index].id!,\n            (response: Response) => {\n                if (response.success) {\n                    const remaining = rows.filter((row, i) => i !== index);\n                    setRows(remaining);\n                } else {\n                    //TODO: Handle error\n                }\n                setDeleting(false);\n            },\n            () => {\n                //TODO: Handle error\n                setDeleting(false);\n            }\n        );\n    };\n\n    const updateInvoice = (newInvoice: InvoiceType) => {\n        setLoading(true);\n        poco.invoice.update(\n            newInvoice,\n            (invoiceResponse: InvoiceResponse) => {\n                setLoading(false);\n                if (invoiceResponse.success) {\n                    var foundIndex = rows.findIndex(\n                        (invoice) => invoice.id == invoiceResponse.data.id\n                    );\n                    rows[foundIndex] = invoiceResponse.data;\n                    setCurrentInvoice(undefined);\n                    closeInvoiceModal(true);\n                } else {\n                    //TODO: Failure\n                }\n            },\n            () => {\n                //TODO: Failure\n                setLoading(false);\n                //ToDo failed to add data\n            }\n        );\n    };\n\n    useEffect(() => {\n        loadInvoices(true);\n    }, []);\n\n    return {\n        showNewInvoiceModal,\n        closeInvoiceModal,\n        modalOpen,\n        showSuccessMessage,\n        hideSuccessMessage,\n        deleteInvoice,\n        showEditInvoiceModal,\n        addInvoice,\n        updateInvoice,\n        onChangeSearch,\n        loadInvoices,\n        deleting,\n        loading,\n        rows,\n        currentInvoice,\n        totalRows,\n        openSalesModal,\n        loadInvoiceSales,\n        loadingSales,\n        detailedInvoice,\n        closeInvoiceSales\n    };\n};\nexport default useInvoicesPage;\n","import InvoiceType, {SalesType} from '../../model/invoice';\nimport {useState} from 'react';\nimport poco from '../../poco';\nimport CityType from '../../model/city';\nimport ProductType from '../../model/product';\nimport CustomerType from '../../model/customer';\nimport {ProductListResponse, CustomerListResponse} from '../../types/responses';\n\nconst useInvoiceModal = (\n    onSubmit: (invoice: InvoiceType) => void,\n    close: (created: boolean) => void,\n    loading: boolean,\n    existingInvoice?: InvoiceType\n) => {\n    const [customer, setCustomer] = useState<CustomerType>();\n    const [sales, setSales] = useState<SalesType[]>([{} as SalesType]);\n\n    const addSale = () => {\n        const newSales = sales.concat({} as SalesType);\n        setSales(newSales);\n    };\n\n    const [productsList, setProductsList] = useState<ProductType[]>([]);\n    const [customersList, setCustomersList] = useState<CustomerType[]>([]);\n\n    const [loadingProducts, setLoadingProducts] = useState(false);\n    const [loadingCustomers, setLoadingCustomers] = useState(false);\n\n\n    const loadProducts = (query: string) => {\n        if (loadingProducts || query.length < 4) return;\n        setLoadingProducts(true);\n        poco.product.list(\n            0,\n            query,\n            (response: ProductListResponse) => {\n                setLoadingProducts(false);\n                setProductsList(response.data.rows);\n            },\n            () => {\n                setLoadingProducts(false);\n            }\n        );\n    };\n\n    const loadCustomers = (query: string) => {\n        if (loadingCustomers || query.length < 4) return;\n        setLoadingCustomers(true);\n        poco.customer.list(\n            0,\n            query,\n            (response: CustomerListResponse) => {\n                setLoadingCustomers(false);\n                setCustomersList(response.data.rows);\n            },\n            () => {\n                setLoadingCustomers(false);\n            }\n        );\n    };\n\n    const isValid = (): boolean => {\n        // resetErrors();\n        let valid = true;\n        // if (product == undefined) {\n        //     valid = false;\n        //     setHasErrorProduct(true);\n        //     setErrorMessage('Please select a product.');\n        // } else if (vendor == undefined) {\n        //     valid = false;\n        //     setHasErrorVendor(true);\n        //     setErrorMessage('Please select a vendor.');\n        // } else if (isNotANumber(rate)) {\n        //     valid = false;\n        //     setHasErrorRate(true);\n        //     setErrorMessage('Rate can only be digits');\n        // } else if (isNotANumber(quantity)) {\n        //     valid = false;\n        //     setHasErrorQuantity(true);\n        //     setErrorMessage('Quantity can only be digits');\n        // }\n\n        return valid;\n    };\n\n\n    const handleClick = () => {\n\n        if (!loading && isValid()) {\n            const newInvoice: InvoiceType = {\n                customerId: customer?.id!,\n                customerName: customer?.name!,\n                sales: sales\n            };\n\n\n            onSubmit(newInvoice);\n        }\n\n        // if (!loading) {\n        //     setLoading(true);\n        //     const now = Date.now();\n        //     const newInvoice: InvoiceType = {\n        //         sales: sales ? sales : [],\n        //         customer: {id: customer?.id, name: customer?.name},\n        //         createdAt: now,\n        //         updatedAt: now,\n        //     };\n        //     api.invoice.add(\n        //         newInvoice,\n        //         (id: string) => {\n        //             setLoading(false);\n        //             newInvoice.id = id;\n        //             onAdd(newInvoice);\n        //             close(true);\n        //         },\n        //         () => {\n        //             setLoading(false);\n        //             //ToDo failed to add data\n        //         }\n        //     );\n        // }\n    };\n    return {\n        handleClick,\n        // onQuantityChange,\n        // onRateChange,\n        // setProduct,\n        addSale,\n        sales,\n        setCustomer,\n        productsList,\n        customersList,\n        loadProducts,\n        loadCustomers,\n        loadingProducts,\n        loadingCustomers,\n    };\n};\n\nexport default useInvoiceModal;\n","import React from 'react';\nimport {Dialog, DialogTitle, FormControl, TextField, Grid} from '@material-ui/core';\nimport Button from '../../components/Button/Button';\nimport useInvoiceModal from './useInvoiceModal';\nimport InvoiceType from '../../model/invoice';\nimport CityType from '../../model/city';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport CustomerType from '../../model/customer';\nimport ProductType from '../../model/product';\n\nexport interface InvoiceModalType {\n    open: boolean;\n    loading: boolean;\n    existingInvoice?: InvoiceType;\n    close: (created: boolean) => void;\n    onSubmit: (invoice: InvoiceType) => void;\n}\nconst InvoiceModal = (props: InvoiceModalType) => {\n    const {open, close, onSubmit, loading, existingInvoice} = props;\n    const {\n        handleClick,\n        productsList,\n        customersList,\n        loadingProducts,\n        loadingCustomers,\n        loadProducts,\n        loadCustomers,\n        setCustomer,\n        sales,\n        addSale,\n    } = useInvoiceModal(onSubmit, close, loading, existingInvoice);\n    return (\n        <Dialog fullScreen open={open}>\n            <DialogTitle>Add New Invoice</DialogTitle>\n            <Grid container spacing={2} style={{padding: 24}}>\n                <Grid item xs={12}>\n                    <Grid container spacing={2}>\n                        <Grid item xs={12}>\n                            <Autocomplete\n                                id=\"customer-search\"\n                                options={customersList}\n                                loading={loadingCustomers}\n                                getOptionLabel={(option) => {\n                                    return option.name || 'Dummy Customer';\n                                }}\n                                renderInput={(params) => (\n                                    <TextField\n                                        {...params}\n                                        label=\"Search Customer\"\n                                        variant=\"outlined\"\n                                        onChange={(event) => {\n                                            loadCustomers(event.target.value);\n                                        }}\n                                    />\n                                )}\n                                onChange={(event: any, value: CustomerType | null) => {\n                                    value && setCustomer(value);\n                                }}\n                            />\n                        </Grid>\n                        {sales?.map((sale, index) => (\n                            <Grid item xs={12} key={index}>\n                                <Grid container spacing={2}>\n                                    <Grid item xs={6}>\n                                        <Autocomplete\n                                            id=\"product-search\"\n                                            options={productsList}\n                                            loading={loadingProducts}\n                                            getOptionLabel={(option) => {\n                                                return option.name || 'Dummy Product';\n                                            }}\n                                            renderInput={(params) => (\n                                                <TextField\n                                                    {...params}\n                                                    label=\"Search Product\"\n                                                    variant=\"outlined\"\n                                                    onChange={(event) => {\n                                                        loadProducts(event.target.value);\n                                                    }}\n                                                />\n                                            )}\n                                            onChange={(event: any, value: ProductType | null) => {\n                                                // value && setProduct(value);\n                                                // sale.product = value ? value : ({} as ProductType);\n                                                sale.productId = value?.id!\n                                            }}\n                                        />\n                                    </Grid>\n                                    <Grid item xs={3}>\n                                        <TextField\n                                            fullWidth\n                                            label=\"Quantity\"\n                                            type=\"number\"\n                                            onChange={(event) => {\n                                                // onQuantityChange(Number(event.target.value));\n                                                sale.quantity = Number(event.target.value);\n                                            }}\n                                        />\n                                    </Grid>\n                                    <Grid item xs={3}>\n                                        <TextField\n                                            fullWidth\n                                            label=\"Rate\"\n                                            type=\"number\"\n                                            onChange={(event) => {\n                                                // onRateChange(Number(event.target.value));\n                                                sale.rate = Number(event.target.value);\n                                            }}\n                                        />\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        ))}\n                        <Grid item xs={12}>\n                            <Button\n                                onClick={() => {\n                                    addSale();\n                                }}\n                            >\n                                Add Sale\n                            </Button>\n                        </Grid>\n                        {/* <Grid item xs={12}>\n                            <Autocomplete\n                                id=\"product-search\"\n                                options={props.products}\n                                getOptionLabel={(option) => {\n                                    return option.name || 'Dummy Product';\n                                }}\n                                renderInput={(params) => (\n                                    <TextField\n                                        {...params}\n                                        label=\"Search Product\"\n                                        variant=\"outlined\"\n                                    />\n                                )}\n                                onChange={(event: any, value: ProductType | null) => {\n                                    value && setProduct(value);\n                                }}\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                label=\"Quantity\"\n                                type=\"number\"\n                                onChange={(event) => {\n                                    onQuantityChange(Number(event.target.value));\n                                }}\n                            />\n                        </Grid>\n\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                label=\"Rate\"\n                                type=\"number\"\n                                onChange={(event) => {\n                                    onRateChange(Number(event.target.value));\n                                }}\n                            />\n                        </Grid> */}\n                    </Grid>\n                </Grid>\n                <Grid item xs={12}>\n                    <Grid container spacing={2} justify={'flex-end'}>\n                        <Grid item>\n                            <Button\n                                variant=\"text\"\n                                onClick={() => {\n                                    close(false);\n                                }}\n                            >\n                                Cancel\n                            </Button>\n                        </Grid>\n                        <Grid item>\n                            <Button onClick={handleClick} loading={loading}>\n                                Add Invoice\n                            </Button>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </Dialog>\n    );\n};\n\nexport default InvoiceModal;\n","import React, {useState, useEffect} from 'react';\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\nimport EditIcon from '@material-ui/icons/Edit';\nimport CalendarViewDayIcon from '@material-ui/icons/CalendarViewDay';\nimport {\n    Paper,\n    TableContainer,\n    Table,\n    TableHead,\n    TableRow,\n    TableCell,\n    TableSortLabel,\n    TableBody,\n    TablePagination,\n    makeStyles,\n    IconButton,\n    Card,\n    Typography,\n    Grid,\n} from '@material-ui/core';\nimport {firestore} from 'firebase';\nimport api from '../../api';\nimport InvoiceType from '../../model/invoice';\nimport Button from '../../components/Button/Button';\nimport {H3, Body, SH2, SH3, Caption} from '../../components/Typography/Typography';\nimport {colorPalette} from '../../theme';\n\nconst columns: string[] = ['Name', 'Average Rate', 'Quantity', 'Total', 'Details', 'Actions'];\n\ninterface InvoicesListType {\n    rows: InvoiceType[];\n    onRowDelete: Function;\n    onRowView: Function;\n    deleting: boolean;\n    loading?: boolean;\n    allLoaded: boolean;\n    onLoadMore: () => void;\n}\n\nconst InvoicesList = (props: InvoicesListType) => {\n    return (\n        <div>\n            {props.rows.map((item: InvoiceType, index) => (\n                <div\n                    style={{\n                        padding: 8,\n                        borderBottom: `1px solid ${colorPalette.grayscale[4]}`,\n                    }}\n                    key={index}\n                >\n                    <Grid container>\n                        <Grid item xs={11} style={{paddingTop: 8, paddingBottom: 8}}>\n                            <H3>{item.customerName}</H3>\n                            <SH2 color={colorPalette.primary[0].interaction}>\n                                {item.bill}\n                            </SH2>\n                            <Caption>{item.totalSales} sales</Caption>\n                        </Grid>\n\n                        <Grid item xs={1}>\n                            <IconButton aria-label=\"edit\"   onClick={() => {\n                                    props.onRowView(index)\n                                }}>\n                                <CalendarViewDayIcon fontSize=\"small\"\n                                />\n                            </IconButton>\n                            <IconButton\n                                aria-label=\"delete\"\n                                onClick={() => {\n                                    props.onRowDelete(index);\n                                }}\n                                disabled={props.deleting}\n                            >\n                                <DeleteOutlineIcon fontSize=\"small\" />\n                            </IconButton>\n                        </Grid>\n                    </Grid>\n                </div>\n            ))}\n            <Button\n                onClick={props.onLoadMore}\n                disabled={props.allLoaded}\n                loading={props.loading}\n                fullWidth\n                variant=\"text\"\n            >\n                Load More\n            </Button>\n        </div>\n    );\n};\n\nexport default InvoicesList;\n","import React from 'react';\nimport { CircularProgress, Grid } from \"@material-ui/core\";\n\nconst CenterSpinner = () => {\n    return (\n        <Grid container style={{height:\"100%\"}} justify=\"center\" alignContent=\"center\">\n            <Grid item>\n                <CircularProgress />\n            </Grid>\n        </Grid>\n\n    )\n    \n}\n\nexport default CenterSpinner;","import React from 'react';\nimport {Dialog, DialogTitle, FormControl, TextField, Grid, Table, TableHead, TableCell, TableBody, TableRow} from '@material-ui/core';\nimport Button from '../../components/Button/Button';\nimport useSalesModal from './useSalesModal';\nimport InvoiceType from '../../model/invoice';\nimport CityType from '../../model/city';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport CustomerType from '../../model/customer';\nimport ProductType from '../../model/product';\nimport { SH2 } from '../../components/Typography/Typography';\nimport { colorPalette } from '../../theme';\nimport CenterSpinner from '../../components/CenterSpinner/CenterSpinner';\n\nexport interface SalesModalType {\n    open: boolean;\n    loading: boolean;\n    invoice?: InvoiceType;\n    close: () => void;\n}\nconst SalesModal = (props: SalesModalType) => {\n    const {open, close, loading, invoice} = props;\n    // const {\n    //     handleClick,\n    //     productsList,\n    //     customersList,\n    //     loadingProducts,\n    //     loadingCustomers,\n    //     loadProducts,\n    //     loadCustomers,\n    //     setCustomer,\n    //     sales,\n    //     addSale\n    // } = useSalesModal(close, loading, invoice);\n    return (\n        <Dialog fullScreen open={open}>\n            {loading ?\n            <>\n            <CenterSpinner />\n            </>\n            :\n            <>\n            <DialogTitle>{invoice?.customerName}</DialogTitle>\n            <Grid container spacing={2} style={{padding: 24}}>\n                <Table>\n                    <TableHead>\n                        <TableRow>\n                        <TableCell>Product</TableCell>\n                        <TableCell>Quantity</TableCell>\n                        <TableCell>Rate</TableCell>\n                        <TableCell>Amount</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {invoice?.sales?.map(sale => (\n                            <TableRow>\n                                <TableCell>\n                                    {sale.productName}\n                                </TableCell>\n                                <TableCell>\n                                    {sale.quantity}\n                                </TableCell>\n                                <TableCell>\n                                    {sale.rate}\n                                </TableCell>\n                                <TableCell>\n                                    {sale.rate * sale.quantity}\n                                </TableCell>\n                            </TableRow>\n                        ))}\n                        <TableRow>\n                            <TableCell>\n\n                            </TableCell>\n                            <TableCell>\n\n</TableCell>\n                            <TableCell>\n                                Total:\n                            </TableCell>\n                            <TableCell>\n                            <SH2 color={colorPalette.primary[0].interaction}>\n                            {invoice?.bill}\n                            </SH2>\n                           \n                            </TableCell>\n                        </TableRow>\n                    </TableBody>\n                </Table>\n               \n                <Grid item xs={12}>\n                    <Grid container spacing={2} justify={'flex-end'}>\n                        <Grid item>\n                            <Button\n                                variant=\"text\"\n                                onClick={() => {\n                                    close();\n                                }}\n                            >\n                                Cancel\n                            </Button>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n            </>\n        }\n            \n        </Dialog>\n    );\n};\n\nexport default SalesModal;\n","import React from 'react';\nimport InvoicesTable from '../../layouts/InvoicesTable/InvoicesTable';\nimport {Typography, Grid, TextField, FormControl, makeStyles, IconButton} from '@material-ui/core';\nimport useInvoicesPage from './useInvoicesPage';\nimport InvoiceModal from '../../layouts/InvoiceModal/InvoiceModal';\nimport FloatingAlert from '../../components/FloatingAlert/FloatingAlert';\nimport InvoiceType from '../../model/invoice';\nimport InvoicesList from '../../layouts/InvoicesList/InvoicesList';\nimport Button from '../../components/Button/Button';\nimport {colorPalette} from '../../theme';\nimport AddCircleRoundedIcon from '@material-ui/icons/AddCircleRounded';\nimport {PageWrapper, PageContent, PageHeader} from '../../components/PageContainer/PageContainer';\nimport SalesModal from '../../layouts/SalesModal/SalesModal';\n\nconst useStyles = makeStyles({\n    wrapper: {\n        height: '100vh',\n    },\n    content: {\n        overflowY: 'scroll',\n        height: 'calc(100vh - 110px - 56px - 16px)',\n    },\n});\n\nconst InvoicesPage = () => {\n    const {\n        showNewInvoiceModal,\n        closeInvoiceModal,\n        modalOpen,\n        showSuccessMessage,\n        hideSuccessMessage,\n        deleteInvoice,\n        showEditInvoiceModal,\n        loadInvoices,\n        addInvoice,\n        updateInvoice,\n        deleting,\n        loading,\n        rows,\n        currentInvoice,\n        totalRows,\n        onChangeSearch,\n        openSalesModal,\n        loadInvoiceSales,\n        loadingSales,\n        detailedInvoice,\n        closeInvoiceSales\n    } = useInvoicesPage();\n\n    const classes = useStyles();\n\n    return (\n        <>\n            <PageWrapper>\n                <PageHeader\n                    placeholder=\"Search Invoices\"\n                    loadedRows={rows.length}\n                    totalRows={totalRows}\n                    openModal={showNewInvoiceModal}\n                    onChange={onChangeSearch}\n                    label=\"invoices\"\n                />\n                <PageContent>\n                    <InvoicesList\n                        rows={rows}\n                        onRowDelete={deleteInvoice}\n                        onRowView={loadInvoiceSales}\n                        deleting={deleting}\n                        onLoadMore={loadInvoices}\n                        allLoaded={rows.length == totalRows} //ToDo: pagination\n                        loading={loading}\n                    />\n                </PageContent>\n            </PageWrapper>\n            <FloatingAlert\n                severity=\"success\"\n                open={showSuccessMessage}\n                onClose={hideSuccessMessage}\n                message=\"Invoice added successfully\"\n            />\n            <InvoiceModal\n                open={modalOpen}\n                loading={loading}\n                existingInvoice={currentInvoice}\n                close={closeInvoiceModal}\n                aria-labelledby=\"invoice_modal\"\n                onSubmit={currentInvoice ? updateInvoice : addInvoice}\n            />\n            <SalesModal\n                open={openSalesModal}\n                loading={loadingSales}\n                invoice={detailedInvoice}\n                close={closeInvoiceSales}\n            />\n        </>\n    );\n};\n\nexport default InvoicesPage;\n","import {useState, useEffect, ChangeEvent} from 'react';\nimport poco from '../../poco';\nimport VendorPaymentType from '../../model/vendorPayment';\nimport {VendorPaymentListResponse, Response, VendorPaymentResponse} from '../../types/responses';\n\nconst useVendorPaymentsPage = () => {\n    const [modalOpen, setModalOpen] = useState(false);\n    const [showSuccessMessage, setShowSuccessMessage] = useState(false);\n\n    const [rows, setRows] = useState<VendorPaymentType[]>([]);\n    const [deleting, setDeleting] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [offset, setOffset] = useState(0);\n    const [query, setQuery] = useState();\n    const [totalRows, setTotalRows] = useState(0);\n\n    const [currentVendorPayment, setCurrentVendorPayment] = useState<VendorPaymentType>();\n\n    const showNewVendorPaymentModal = () => {\n        setCurrentVendorPayment(undefined);\n        setModalOpen(true);\n    };\n\n    const closeVendorPaymentModal = (created: boolean) => {\n        setModalOpen(false);\n        if (created) setShowSuccessMessage(true);\n    };\n\n    const showEditVendorPaymentModal = (index: number) => {\n        setCurrentVendorPayment(rows[index]);\n        setModalOpen(true);\n    };\n\n    const hideSuccessMessage = () => {\n        setShowSuccessMessage(false);\n    };\n\n    const onChangeSearch = (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        loadVendorPayments(true, event.target.value);\n    };\n\n    const loadVendorPayments = (clear: boolean = false, query: string = '') => {\n        if (loading) return;\n        let offset = rows.length;\n        if (clear === true) {\n            setRows([]);\n            offset = 0;\n        }\n        setLoading(true);\n        poco.vendorPayment.list(\n            offset,\n            query,\n            (response: VendorPaymentListResponse) => {\n                setLoading(false);\n                setRows((rows) => rows.concat(response.data.rows));\n                setTotalRows(response.data.count);\n            },\n            () => {\n                setLoading(false);\n            }\n        );\n    };\n\n    const addVendorPayment = (newVendorPayment: VendorPaymentType) => {\n        setLoading(true);\n        poco.vendorPayment.create(\n            newVendorPayment,\n            (vendorPaymentResponse: VendorPaymentResponse) => {\n                setLoading(false);\n                if (vendorPaymentResponse.success) {\n                    rows.unshift(newVendorPayment);\n                    setRows(rows);\n                    setTotalRows((totalRows) => totalRows + 1);\n                    closeVendorPaymentModal(true);\n                } else {\n                    //TODO: Failure\n                }\n            },\n            () => {\n                //TODO: Failure\n                setLoading(false);\n                //ToDo failed to add data\n            }\n        );\n    };\n\n    const deleteVendorPayment = (index: number) => {\n        setDeleting(true);\n        poco.vendorPayment.delete(\n            rows[index].id!,\n            (response: Response) => {\n                if (response.success) {\n                    const remaining = rows.filter((row, i) => i !== index);\n                    setRows(remaining);\n                } else {\n                    //TODO: Handle error\n                }\n                setDeleting(false);\n            },\n            () => {\n                //TODO: Handle error\n                setDeleting(false);\n            }\n        );\n    };\n\n    const updateVendorPayment = (newVendorPayment: VendorPaymentType) => {\n        setLoading(true);\n        poco.vendorPayment.update(\n            newVendorPayment,\n            (vendorPaymentResponse: VendorPaymentResponse) => {\n                setLoading(false);\n                if (vendorPaymentResponse.success) {\n                    var foundIndex = rows.findIndex(\n                        (vendorPayment) => vendorPayment.id == vendorPaymentResponse.data.id\n                    );\n                    rows[foundIndex] = vendorPaymentResponse.data;\n                    setCurrentVendorPayment(undefined);\n                    closeVendorPaymentModal(true);\n                } else {\n                    //TODO: Failure\n                }\n            },\n            () => {\n                //TODO: Failure\n                setLoading(false);\n                //ToDo failed to add data\n            }\n        );\n    };\n\n    useEffect(() => {\n        loadVendorPayments(true);\n    }, []);\n\n    return {\n        showNewVendorPaymentModal,\n        closeVendorPaymentModal,\n        modalOpen,\n        showSuccessMessage,\n        hideSuccessMessage,\n        deleteVendorPayment,\n        showEditVendorPaymentModal,\n        addVendorPayment,\n        updateVendorPayment,\n        onChangeSearch,\n        loadVendorPayments,\n        deleting,\n        loading,\n        rows,\n        currentVendorPayment,\n        totalRows,\n    };\n};\nexport default useVendorPaymentsPage;\n","import VendorPaymentType from '../../model/vendorPayment';\nimport {useState} from 'react';\nimport api from '../../api';\nimport CityType from '../../model/city';\nimport VendorType from '../../model/vendor';\nimport AccountType from '../../model/account';\nimport {AccountListResponse, VendorListResponse} from '../../types/responses';\nimport poco from '../../poco';\nimport {isNotANumber} from '../../validate';\n\nconst useVendorPaymentModal = (\n    onSubmit: (purchase: VendorPaymentType) => void,\n    close: (created: boolean) => void,\n    loading: boolean,\n    existingVendorPayment?: VendorPaymentType\n) => {\n    const [accountsList, setAccountsList] = useState<AccountType[]>([]);\n    const [vendorsList, setVendorsList] = useState<VendorType[]>([]);\n\n    const [vendor, setVendor] = useState<VendorType>();\n    const [account, setAccount] = useState<AccountType>();\n    const [amount, setAmount] = useState('');\n    const [details, setDetails] = useState('');\n\n    const [hasErrorVendor, setHasErrorVendor] = useState(false);\n    const [hasErrorAccount, setHasErrorAccount] = useState(false);\n    const [hasErrorAmount, setHasErrorAmount] = useState(false);\n\n    const [errorMessage, setErrorMessage] = useState('');\n\n    const [loadingAccounts, setLoadingAccounts] = useState(false);\n    const [loadingVendors, setLoadingVendors] = useState(false);\n\n    const onAmountChange = (value: string) => {\n        setAmount(value);\n    };\n\n    const onDetailsChange = (value: string) => {\n        setDetails(value);\n    };\n\n    const loadAccounts = (query: string) => {\n        if (loadingAccounts || query.length < 4) return;\n        setLoadingAccounts(true);\n        poco.account.list(\n            0,\n            query,\n            (response: AccountListResponse) => {\n                setLoadingAccounts(false);\n                setAccountsList(response.data.rows);\n            },\n            () => {\n                setLoadingAccounts(false);\n            }\n        );\n    };\n\n    const loadVendors = (query: string) => {\n        if (loadingVendors || query.length < 4) return;\n        setLoadingVendors(true);\n        poco.vendor.list(\n            0,\n            query,\n            (response: VendorListResponse) => {\n                setLoadingVendors(false);\n                setVendorsList(response.data.rows);\n            },\n            () => {\n                setLoadingVendors(false);\n            }\n        );\n    };\n\n    const isValid = (): boolean => {\n        resetErrors();\n        let valid = true;\n        if (vendor == undefined) {\n            valid = false;\n            setHasErrorVendor(true);\n            setErrorMessage('Please select a vendor.');\n        } else if (account == undefined) {\n            valid = false;\n            setHasErrorAccount(true);\n            setErrorMessage('Please select a vendor.');\n        } else if (isNotANumber(amount)) {\n            valid = false;\n            setHasErrorAmount(true);\n            setErrorMessage('Amount can only be digits');\n        }\n\n        return valid;\n    };\n\n    const resetErrors = () => {\n        setErrorMessage('');\n        setHasErrorAccount(false);\n        setHasErrorVendor(false);\n        setHasErrorAmount(false);\n    };\n\n    const handleClick = () => {\n        if (!loading && isValid()) {\n            const newVendorPayment: VendorPaymentType = {\n                id: existingVendorPayment?.id,\n                vendorId: vendor?.id!,\n                vendorName: vendor?.name,\n                accountId: account?.id!,\n                accountName: account?.name,\n                amount: Number(amount) || 0,\n                details: details,\n            };\n            onSubmit(newVendorPayment);\n        }\n    };\n\n    const cancel = () => {\n        resetErrors();\n        close(false);\n    };\n\n    // const handleClick = () => {\n    //     if (!loading) {\n    //         setLoading(true);\n    //         const now = Date.now();\n    //         const newVendorPayment: VendorPaymentType = {\n    //             vendor: {id: vendor?.id, name: vendor?.name},\n    //             amount: amount,\n    //             account: {id: account?.id, name: account?.name},\n    //             details: details,\n    //             createdAt: now,\n    //             updatedAt: now,\n    //         };\n    //         api.vendorPayment.add(\n    //             newVendorPayment,\n    //             (id: string) => {\n    //                 setLoading(false);\n    //                 newVendorPayment.id = id;\n    //                 onAdd(newVendorPayment);\n    //                 close(true);\n    //             },\n    //             () => {\n    //                 setLoading(false);\n    //                 //ToDo failed to add data\n    //             }\n    //         );\n    //     }\n    // };\n    return {\n        handleClick,\n        onAmountChange,\n        onDetailsChange,\n        setVendor,\n        setAccount,\n        vendorsList,\n        accountsList,\n        loadAccounts,\n        loadVendors,\n        loadingAccounts,\n        loadingVendors,\n        loading,\n        cancel,\n        hasErrorAmount,\n        hasErrorAccount,\n        hasErrorVendor,\n        errorMessage,\n    };\n};\n\nexport default useVendorPaymentModal;\n","import React from 'react';\nimport {Dialog, DialogTitle, FormControl, TextField, Grid, Typography} from '@material-ui/core';\nimport Button from '../../components/Button/Button';\nimport useVendorPaymentModal from './useVendorPaymentModal';\nimport VendorPaymentType from '../../model/vendorPayment';\nimport CityType from '../../model/city';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport VendorType from '../../model/vendor';\nimport ProductType from '../../model/product';\nimport AccountType from '../../model/account';\n\nexport interface VendorPaymentModalType {\n    open: boolean;\n    loading: boolean;\n    existingVendorPayment?: VendorPaymentType;\n    close: (created: boolean) => void;\n    onSubmit: (purchase: VendorPaymentType) => void;\n}\nconst VendorPaymentModal = (props: VendorPaymentModalType) => {\n    const {open, close, onSubmit, loading, existingVendorPayment} = props;\n    const {\n        handleClick,\n        onAmountChange,\n        onDetailsChange,\n        setVendor,\n        setAccount,\n        vendorsList,\n        accountsList,\n        loadingAccounts,\n        loadingVendors,\n        hasErrorAccount,\n        hasErrorAmount,\n        hasErrorVendor,\n        cancel,\n        errorMessage,\n        loadVendors,\n        loadAccounts,\n    } = useVendorPaymentModal(onSubmit, close, loading, existingVendorPayment);\n    return (\n        <Dialog open={open}>\n            <DialogTitle>Add New VendorPayment</DialogTitle>\n            {errorMessage.length > 0 && (\n                <div style={{paddingLeft: 24}}>\n                    <Typography variant=\"body1\" color=\"error\">\n                        {errorMessage}\n                    </Typography>\n                </div>\n            )}\n            <Grid container spacing={2} style={{padding: 24}}>\n                <Grid item xs={12}>\n                    <Grid container spacing={2}>\n                        <Grid item xs={12}>\n                            <Autocomplete\n                                id=\"vendor-search\"\n                                options={vendorsList}\n                                loading={loadingVendors}\n                                getOptionLabel={(option) => {\n                                    return option.name || 'Dummy Vendor';\n                                }}\n                                renderInput={(params) => (\n                                    <TextField\n                                        {...params}\n                                        label=\"Search Vendor\"\n                                        variant=\"outlined\"\n                                        error={hasErrorVendor}\n                                        onChange={(event) => {\n                                            loadVendors(event.target.value);\n                                        }}\n                                    />\n                                )}\n                                onChange={(event: any, value: VendorType | null) => {\n                                    value && setVendor(value);\n                                }}\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <Autocomplete\n                                id=\"account-search\"\n                                options={accountsList}\n                                loading={loadingAccounts}\n                                getOptionLabel={(option) => {\n                                    return option.name || 'Dummy Account';\n                                }}\n                                renderInput={(params) => (\n                                    <TextField\n                                        {...params}\n                                        label=\"Search Account\"\n                                        variant=\"outlined\"\n                                        error={hasErrorAccount}\n                                        onChange={(event) => {\n                                            loadAccounts(event.target.value);\n                                        }}\n                                    />\n                                )}\n                                onChange={(event: any, value: AccountType | null) => {\n                                    value && setAccount(value);\n                                }}\n                            />\n                        </Grid>\n\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                label=\"Amount\"\n                                error={hasErrorAmount}\n                                onChange={(event) => {\n                                    onAmountChange(event.target.value);\n                                }}\n                            />\n                        </Grid>\n\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                label=\"Details\"\n                                multiline\n                                rows={3}\n                                onChange={(event) => {\n                                    onDetailsChange(event.target.value);\n                                }}\n                            />\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid item xs={12}>\n                    <Grid container spacing={2} justify={'flex-end'}>\n                        <Grid item>\n                            <Button\n                                variant=\"text\"\n                                onClick={() => {\n                                    cancel();\n                                }}\n                            >\n                                Cancel\n                            </Button>\n                        </Grid>\n                        <Grid item>\n                            <Button onClick={handleClick} loading={loading}>\n                                Add Vendor Payment\n                            </Button>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </Dialog>\n    );\n};\n\nexport default VendorPaymentModal;\n","import React, {useState, useEffect} from 'react';\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\nimport EditIcon from '@material-ui/icons/Edit';\nimport {\n    Paper,\n    TableContainer,\n    Table,\n    TableHead,\n    TableRow,\n    TableCell,\n    TableSortLabel,\n    TableBody,\n    TablePagination,\n    makeStyles,\n    IconButton,\n    Card,\n    Typography,\n    Grid,\n} from '@material-ui/core';\nimport {firestore} from 'firebase';\nimport api from '../../api';\nimport VendorPaymentType from '../../model/vendorPayment';\nimport Button from '../../components/Button/Button';\nimport {H3, Body, SH2, SH3, Caption} from '../../components/Typography/Typography';\nimport {colorPalette} from '../../theme';\nimport InboxIcon from '@material-ui/icons/Inbox';\nimport CallRoundedIcon from '@material-ui/icons/CallRounded';\nimport PinDropRoundedIcon from '@material-ui/icons/PinDropRounded';\nimport Chip from '@material-ui/core/Chip';\nimport AccountBalanceRoundedIcon from '@material-ui/icons/AccountBalanceRounded';\n\nconst columns: string[] = ['Name', 'Average Rate', 'Quantity', 'Total', 'Details', 'Actions'];\n\ninterface VendorPaymentsListType {\n    rows: VendorPaymentType[];\n    onRowDelete: Function;\n    deleting: boolean;\n    loading?: boolean;\n    allLoaded: boolean;\n    onLoadMore: () => void;\n}\n\nconst VendorPaymentsList = (props: VendorPaymentsListType) => {\n    return (\n        <div>\n            {props.rows.map((item: VendorPaymentType, index) => (\n                <div\n                    style={{\n                        padding: 8,\n                        borderBottom: `1px solid ${colorPalette.grayscale[4]}`,\n                    }}\n                    key={index}\n                >\n                    <Grid container>\n                        <Grid item xs={10} style={{paddingTop: 8, paddingBottom: 8}}>\n                            <H3>{item.vendorName}</H3>\n                            <Body>{item.details}</Body>\n                            <SH2 color={colorPalette.primary[0].interaction}>{item.amount}</SH2>\n                            <Grid container spacing={1} style={{paddingTop: 8}}>\n                                <Grid item>\n                                    <AccountBalanceRoundedIcon\n                                        fontSize=\"small\"\n                                        style={{color: colorPalette.grayscale[6]}}\n                                    />\n                                </Grid>\n                                <Grid item>\n                                    <Caption color={colorPalette.grayscale[7]}>\n                                        {item.accountName}\n                                    </Caption>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n\n                        <Grid item xs={1}>\n                            <IconButton\n                                aria-label=\"delete\"\n                                onClick={() => {\n                                    props.onRowDelete(index);\n                                }}\n                                disabled={props.deleting}\n                            >\n                                <DeleteOutlineIcon fontSize=\"small\" />\n                            </IconButton>\n                        </Grid>\n                    </Grid>\n                </div>\n            ))}\n            <Button\n                onClick={props.onLoadMore}\n                disabled={props.allLoaded}\n                loading={props.loading}\n                fullWidth\n                variant=\"text\"\n            >\n                Load More\n            </Button>\n        </div>\n    );\n};\n\nexport default VendorPaymentsList;\n","import React from 'react';\nimport VendorPaymentsTable from '../../layouts/VendorPaymentsTable/VendorPaymentsTable';\nimport {Typography, Grid, TextField, FormControl, makeStyles, IconButton} from '@material-ui/core';\nimport useVendorPaymentsPage from './useVendorPaymentsPage';\nimport VendorPaymentModal from '../../layouts/VendorPaymentModal/VendorPaymentModal';\nimport FloatingAlert from '../../components/FloatingAlert/FloatingAlert';\nimport VendorPaymentType from '../../model/vendorPayment';\nimport VendorPaymentsList from '../../layouts/VendorPaymentsList/VendorPaymentsList';\nimport Button from '../../components/Button/Button';\nimport {colorPalette} from '../../theme';\nimport AddCircleRoundedIcon from '@material-ui/icons/AddCircleRounded';\nimport {PageWrapper, PageContent, PageHeader} from '../../components/PageContainer/PageContainer';\n\nconst useStyles = makeStyles({\n    wrapper: {\n        height: '100vh',\n    },\n    content: {\n        overflowY: 'scroll',\n        height: 'calc(100vh - 110px - 56px - 16px)',\n    },\n});\n\nconst VendorPaymentsPage = () => {\n    const {\n        showNewVendorPaymentModal,\n        closeVendorPaymentModal,\n        modalOpen,\n        showSuccessMessage,\n        hideSuccessMessage,\n        deleteVendorPayment,\n        showEditVendorPaymentModal,\n        loadVendorPayments,\n        addVendorPayment,\n        updateVendorPayment,\n        deleting,\n        loading,\n        rows,\n        currentVendorPayment,\n        totalRows,\n        onChangeSearch,\n    } = useVendorPaymentsPage();\n\n    const classes = useStyles();\n\n    return (\n        <>\n            <PageWrapper>\n                <PageHeader\n                    placeholder=\"Search Vendor Payments\"\n                    loadedRows={rows.length}\n                    totalRows={totalRows}\n                    openModal={showNewVendorPaymentModal}\n                    onChange={onChangeSearch}\n                    label=\"Vendor Payments\"\n                />\n                <PageContent>\n                    <VendorPaymentsList\n                        rows={rows}\n                        onRowDelete={deleteVendorPayment}\n                        // onEditVendorPayment={showEditVendorPaymentModal}\n                        deleting={deleting}\n                        onLoadMore={loadVendorPayments}\n                        allLoaded={rows.length == totalRows} //ToDo: pagination\n                        loading={loading}\n                    />\n                </PageContent>\n            </PageWrapper>\n            <FloatingAlert\n                severity=\"success\"\n                open={showSuccessMessage}\n                onClose={hideSuccessMessage}\n                message=\"VendorPayment added successfully\"\n            />\n            <VendorPaymentModal\n                open={modalOpen}\n                loading={loading}\n                // existingVendorPayment={currentVendorPayment}\n                close={closeVendorPaymentModal}\n                aria-labelledby=\"vendorPayment_modal\"\n                onSubmit={currentVendorPayment ? updateVendorPayment : addVendorPayment}\n            />\n        </>\n    );\n};\n\nexport default VendorPaymentsPage;\n","import {useState, useEffect, ChangeEvent} from 'react';\nimport poco from '../../poco';\nimport CustomerPaymentType from '../../model/customerPayment';\nimport {\n    CustomerPaymentListResponse,\n    Response,\n    CustomerPaymentResponse,\n} from '../../types/responses';\n\nconst useCustomerPaymentsPage = () => {\n    const [modalOpen, setModalOpen] = useState(false);\n    const [showSuccessMessage, setShowSuccessMessage] = useState(false);\n\n    const [rows, setRows] = useState<CustomerPaymentType[]>([]);\n    const [deleting, setDeleting] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [offset, setOffset] = useState(0);\n    const [query, setQuery] = useState();\n    const [totalRows, setTotalRows] = useState(0);\n\n    const [currentCustomerPayment, setCurrentCustomerPayment] = useState<CustomerPaymentType>();\n\n    const showNewCustomerPaymentModal = () => {\n        setCurrentCustomerPayment(undefined);\n        setModalOpen(true);\n    };\n\n    const closeCustomerPaymentModal = (created: boolean) => {\n        setModalOpen(false);\n        if (created) setShowSuccessMessage(true);\n    };\n\n    const showEditCustomerPaymentModal = (index: number) => {\n        setCurrentCustomerPayment(rows[index]);\n        setModalOpen(true);\n    };\n\n    const hideSuccessMessage = () => {\n        setShowSuccessMessage(false);\n    };\n\n    const onChangeSearch = (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        loadCustomerPayments(true, event.target.value);\n    };\n\n    const loadCustomerPayments = (clear: boolean = false, query: string = '') => {\n        if (loading) return;\n        let offset = rows.length;\n        if (clear === true) {\n            setRows([]);\n            offset = 0;\n        }\n        setLoading(true);\n        poco.customerPayment.list(\n            offset,\n            query,\n            (response: CustomerPaymentListResponse) => {\n                setLoading(false);\n                setRows((rows) => rows.concat(response.data.rows));\n                setTotalRows(response.data.count);\n            },\n            () => {\n                setLoading(false);\n            }\n        );\n    };\n\n    const addCustomerPayment = (newCustomerPayment: CustomerPaymentType) => {\n        setLoading(true);\n        poco.customerPayment.create(\n            newCustomerPayment,\n            (customerPaymentResponse: CustomerPaymentResponse) => {\n                setLoading(false);\n                if (customerPaymentResponse.success) {\n                    rows.unshift(newCustomerPayment);\n                    setRows(rows);\n                    setTotalRows((totalRows) => totalRows + 1);\n                    closeCustomerPaymentModal(true);\n                } else {\n                    //TODO: Failure\n                }\n            },\n            () => {\n                //TODO: Failure\n                setLoading(false);\n                //ToDo failed to add data\n            }\n        );\n    };\n\n    const deleteCustomerPayment = (index: number) => {\n        setDeleting(true);\n        poco.customerPayment.delete(\n            rows[index].id!,\n            (response: Response) => {\n                if (response.success) {\n                    const remaining = rows.filter((row, i) => i !== index);\n                    setRows(remaining);\n                } else {\n                    //TODO: Handle error\n                }\n                setDeleting(false);\n            },\n            () => {\n                //TODO: Handle error\n                setDeleting(false);\n            }\n        );\n    };\n\n    const updateCustomerPayment = (newCustomerPayment: CustomerPaymentType) => {\n        setLoading(true);\n        poco.customerPayment.update(\n            newCustomerPayment,\n            (customerPaymentResponse: CustomerPaymentResponse) => {\n                setLoading(false);\n                if (customerPaymentResponse.success) {\n                    var foundIndex = rows.findIndex(\n                        (customerPayment) => customerPayment.id == customerPaymentResponse.data.id\n                    );\n                    rows[foundIndex] = customerPaymentResponse.data;\n                    setCurrentCustomerPayment(undefined);\n                    closeCustomerPaymentModal(true);\n                } else {\n                    //TODO: Failure\n                }\n            },\n            () => {\n                //TODO: Failure\n                setLoading(false);\n                //ToDo failed to add data\n            }\n        );\n    };\n\n    useEffect(() => {\n        loadCustomerPayments(true);\n    }, []);\n\n    return {\n        showNewCustomerPaymentModal,\n        closeCustomerPaymentModal,\n        modalOpen,\n        showSuccessMessage,\n        hideSuccessMessage,\n        deleteCustomerPayment,\n        showEditCustomerPaymentModal,\n        addCustomerPayment,\n        updateCustomerPayment,\n        onChangeSearch,\n        loadCustomerPayments,\n        deleting,\n        loading,\n        rows,\n        currentCustomerPayment,\n        totalRows,\n    };\n};\nexport default useCustomerPaymentsPage;\n","import CustomerPaymentType from '../../model/customerPayment';\nimport {useState} from 'react';\nimport api from '../../api';\nimport CityType from '../../model/city';\nimport CustomerType from '../../model/customer';\nimport AccountType from '../../model/account';\nimport {AccountListResponse, CustomerListResponse} from '../../types/responses';\nimport poco from '../../poco';\nimport {isNotANumber} from '../../validate';\n\nconst useCustomerPaymentModal = (\n    onSubmit: (purchase: CustomerPaymentType) => void,\n    close: (created: boolean) => void,\n    loading: boolean,\n    existingCustomerPayment?: CustomerPaymentType\n) => {\n    const [accountsList, setAccountsList] = useState<AccountType[]>([]);\n    const [customersList, setCustomersList] = useState<CustomerType[]>([]);\n\n    const [customer, setCustomer] = useState<CustomerType>();\n    const [account, setAccount] = useState<AccountType>();\n    const [amount, setAmount] = useState('');\n    const [details, setDetails] = useState('');\n\n    const [hasErrorCustomer, setHasErrorCustomer] = useState(false);\n    const [hasErrorAccount, setHasErrorAccount] = useState(false);\n    const [hasErrorAmount, setHasErrorAmount] = useState(false);\n\n    const [errorMessage, setErrorMessage] = useState('');\n\n    const [loadingAccounts, setLoadingAccounts] = useState(false);\n    const [loadingCustomers, setLoadingCustomers] = useState(false);\n\n    const onAmountChange = (value: string) => {\n        setAmount(value);\n    };\n\n    const onDetailsChange = (value: string) => {\n        setDetails(value);\n    };\n\n    const loadAccounts = (query: string) => {\n        if (loadingAccounts || query.length < 4) return;\n        setLoadingAccounts(true);\n        poco.account.list(\n            0,\n            query,\n            (response: AccountListResponse) => {\n                setLoadingAccounts(false);\n                setAccountsList(response.data.rows);\n            },\n            () => {\n                setLoadingAccounts(false);\n            }\n        );\n    };\n\n    const loadCustomers = (query: string) => {\n        if (loadingCustomers || query.length < 4) return;\n        setLoadingCustomers(true);\n        poco.customer.list(\n            0,\n            query,\n            (response: CustomerListResponse) => {\n                setLoadingCustomers(false);\n                setCustomersList(response.data.rows);\n            },\n            () => {\n                setLoadingCustomers(false);\n            }\n        );\n    };\n\n    const isValid = (): boolean => {\n        resetErrors();\n        let valid = true;\n        if (customer == undefined) {\n            valid = false;\n            setHasErrorCustomer(true);\n            setErrorMessage('Please select a customer.');\n        } else if (account == undefined) {\n            valid = false;\n            setHasErrorAccount(true);\n            setErrorMessage('Please select a customer.');\n        } else if (isNotANumber(amount)) {\n            valid = false;\n            setHasErrorAmount(true);\n            setErrorMessage('Amount can only be digits');\n        }\n\n        return valid;\n    };\n\n    const resetErrors = () => {\n        setErrorMessage('');\n        setHasErrorAccount(false);\n        setHasErrorCustomer(false);\n        setHasErrorAmount(false);\n    };\n\n    const handleClick = () => {\n        if (!loading && isValid()) {\n            const newCustomerPayment: CustomerPaymentType = {\n                id: existingCustomerPayment?.id,\n                customerId: customer?.id!,\n                customerName: customer?.name,\n                accountId: account?.id!,\n                accountName: account?.name,\n                amount: Number(amount) || 0,\n                details: details,\n            };\n            onSubmit(newCustomerPayment);\n        }\n    };\n\n    const cancel = () => {\n        resetErrors();\n        close(false);\n    };\n\n    // const handleClick = () => {\n    //     if (!loading) {\n    //         setLoading(true);\n    //         const now = Date.now();\n    //         const newCustomerPayment: CustomerPaymentType = {\n    //             customer: {id: customer?.id, name: customer?.name},\n    //             amount: amount,\n    //             account: {id: account?.id, name: account?.name},\n    //             details: details,\n    //             createdAt: now,\n    //             updatedAt: now,\n    //         };\n    //         api.customerPayment.add(\n    //             newCustomerPayment,\n    //             (id: string) => {\n    //                 setLoading(false);\n    //                 newCustomerPayment.id = id;\n    //                 onAdd(newCustomerPayment);\n    //                 close(true);\n    //             },\n    //             () => {\n    //                 setLoading(false);\n    //                 //ToDo failed to add data\n    //             }\n    //         );\n    //     }\n    // };\n    return {\n        handleClick,\n        onAmountChange,\n        onDetailsChange,\n        setCustomer,\n        setAccount,\n        customersList,\n        accountsList,\n        loadAccounts,\n        loadCustomers,\n        loadingAccounts,\n        loadingCustomers,\n        loading,\n        cancel,\n        hasErrorAmount,\n        hasErrorAccount,\n        hasErrorCustomer,\n        errorMessage,\n    };\n};\n\nexport default useCustomerPaymentModal;\n","import React from 'react';\nimport {Dialog, DialogTitle, FormControl, TextField, Grid, Typography} from '@material-ui/core';\nimport Button from '../../components/Button/Button';\nimport useCustomerPaymentModal from './useCustomerPaymentModal';\nimport CustomerPaymentType from '../../model/customerPayment';\nimport CityType from '../../model/city';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport CustomerType from '../../model/customer';\nimport ProductType from '../../model/product';\nimport AccountType from '../../model/account';\n\nexport interface CustomerPaymentModalType {\n    open: boolean;\n    loading: boolean;\n    existingCustomerPayment?: CustomerPaymentType;\n    close: (created: boolean) => void;\n    onSubmit: (purchase: CustomerPaymentType) => void;\n}\nconst CustomerPaymentModal = (props: CustomerPaymentModalType) => {\n    const {open, close, onSubmit, loading, existingCustomerPayment} = props;\n    const {\n        handleClick,\n        onAmountChange,\n        onDetailsChange,\n        setCustomer,\n        setAccount,\n        customersList,\n        accountsList,\n        loadingAccounts,\n        loadingCustomers,\n        hasErrorAccount,\n        hasErrorAmount,\n        hasErrorCustomer,\n        cancel,\n        errorMessage,\n        loadCustomers,\n        loadAccounts,\n    } = useCustomerPaymentModal(onSubmit, close, loading, existingCustomerPayment);\n    return (\n        <Dialog open={open}>\n            <DialogTitle>Add New CustomerPayment</DialogTitle>\n            {errorMessage.length > 0 && (\n                <div style={{paddingLeft: 24}}>\n                    <Typography variant=\"body1\" color=\"error\">\n                        {errorMessage}\n                    </Typography>\n                </div>\n            )}\n            <Grid container spacing={2} style={{padding: 24}}>\n                <Grid item xs={12}>\n                    <Grid container spacing={2}>\n                        <Grid item xs={12}>\n                            <Autocomplete\n                                id=\"customer-search\"\n                                options={customersList}\n                                loading={loadingCustomers}\n                                getOptionLabel={(option) => {\n                                    return option.name || 'Dummy Customer';\n                                }}\n                                renderInput={(params) => (\n                                    <TextField\n                                        {...params}\n                                        label=\"Search Customer\"\n                                        variant=\"outlined\"\n                                        error={hasErrorCustomer}\n                                        onChange={(event) => {\n                                            loadCustomers(event.target.value);\n                                        }}\n                                    />\n                                )}\n                                onChange={(event: any, value: CustomerType | null) => {\n                                    value && setCustomer(value);\n                                }}\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <Autocomplete\n                                id=\"account-search\"\n                                options={accountsList}\n                                loading={loadingAccounts}\n                                getOptionLabel={(option) => {\n                                    return option.name || 'Dummy Account';\n                                }}\n                                renderInput={(params) => (\n                                    <TextField\n                                        {...params}\n                                        label=\"Search Account\"\n                                        variant=\"outlined\"\n                                        error={hasErrorAccount}\n                                        onChange={(event) => {\n                                            loadAccounts(event.target.value);\n                                        }}\n                                    />\n                                )}\n                                onChange={(event: any, value: AccountType | null) => {\n                                    value && setAccount(value);\n                                }}\n                            />\n                        </Grid>\n\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                label=\"Amount\"\n                                error={hasErrorAmount}\n                                onChange={(event) => {\n                                    onAmountChange(event.target.value);\n                                }}\n                            />\n                        </Grid>\n\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                label=\"Details\"\n                                multiline\n                                rows={3}\n                                onChange={(event) => {\n                                    onDetailsChange(event.target.value);\n                                }}\n                            />\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid item xs={12}>\n                    <Grid container spacing={2} justify={'flex-end'}>\n                        <Grid item>\n                            <Button\n                                variant=\"text\"\n                                onClick={() => {\n                                    cancel();\n                                }}\n                            >\n                                Cancel\n                            </Button>\n                        </Grid>\n                        <Grid item>\n                            <Button onClick={handleClick} loading={loading}>\n                                Add Customer Payment\n                            </Button>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </Dialog>\n    );\n};\n\nexport default CustomerPaymentModal;\n","import React, {useState, useEffect} from 'react';\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\nimport EditIcon from '@material-ui/icons/Edit';\nimport {\n    Paper,\n    TableContainer,\n    Table,\n    TableHead,\n    TableRow,\n    TableCell,\n    TableSortLabel,\n    TableBody,\n    TablePagination,\n    makeStyles,\n    IconButton,\n    Card,\n    Typography,\n    Grid,\n} from '@material-ui/core';\nimport {firestore} from 'firebase';\nimport api from '../../api';\nimport CustomerPaymentType from '../../model/customerPayment';\nimport Button from '../../components/Button/Button';\nimport {H3, Body, SH2, SH3, Caption} from '../../components/Typography/Typography';\nimport {colorPalette} from '../../theme';\nimport InboxIcon from '@material-ui/icons/Inbox';\nimport CallRoundedIcon from '@material-ui/icons/CallRounded';\nimport PinDropRoundedIcon from '@material-ui/icons/PinDropRounded';\nimport Chip from '@material-ui/core/Chip';\nimport AccountBalanceRoundedIcon from '@material-ui/icons/AccountBalanceRounded';\n\nconst columns: string[] = ['Name', 'Average Rate', 'Quantity', 'Total', 'Details', 'Actions'];\n\ninterface CustomerPaymentsListType {\n    rows: CustomerPaymentType[];\n    onRowDelete: Function;\n    deleting: boolean;\n    loading?: boolean;\n    allLoaded: boolean;\n    onLoadMore: () => void;\n}\n\nconst CustomerPaymentsList = (props: CustomerPaymentsListType) => {\n    return (\n        <div>\n            {props.rows.map((item: CustomerPaymentType, index) => (\n                <div\n                    style={{\n                        padding: 8,\n                        borderBottom: `1px solid ${colorPalette.grayscale[4]}`,\n                    }}\n                    key={index}\n                >\n                    <Grid container>\n                        <Grid item xs={10} style={{paddingTop: 8, paddingBottom: 8}}>\n                            <H3>{item.customerName}</H3>\n                            <Body>{item.details}</Body>\n                            <SH2 color={colorPalette.primary[0].interaction}>{item.amount}</SH2>\n                            <Grid container spacing={1} style={{paddingTop: 8}}>\n                                <Grid item>\n                                    <AccountBalanceRoundedIcon\n                                        fontSize=\"small\"\n                                        style={{color: colorPalette.grayscale[6]}}\n                                    />\n                                </Grid>\n                                <Grid item>\n                                    <Caption color={colorPalette.grayscale[7]}>\n                                        {item.accountName}\n                                    </Caption>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n\n                        <Grid item xs={1}>\n                            <IconButton aria-label=\"edit\">\n                                <EditIcon fontSize=\"small\" />\n                            </IconButton>\n                            <IconButton\n                                aria-label=\"delete\"\n                                onClick={() => {\n                                    props.onRowDelete(index);\n                                }}\n                                disabled={props.deleting}\n                            >\n                                <DeleteOutlineIcon fontSize=\"small\" />\n                            </IconButton>\n                        </Grid>\n                    </Grid>\n                </div>\n            ))}\n            <Button\n                onClick={props.onLoadMore}\n                disabled={props.allLoaded}\n                loading={props.loading}\n                fullWidth\n                variant=\"text\"\n            >\n                Load More\n            </Button>\n        </div>\n    );\n};\n\nexport default CustomerPaymentsList;\n","import React from 'react';\nimport CustomerPaymentsTable from '../../layouts/CustomerPaymentsTable/CustomerPaymentsTable';\nimport {Typography, Grid, TextField, FormControl, makeStyles, IconButton} from '@material-ui/core';\nimport useCustomerPaymentsPage from './useCustomerPaymentsPage';\nimport CustomerPaymentModal from '../../layouts/CustomerPaymentModal/CustomerPaymentModal';\nimport FloatingAlert from '../../components/FloatingAlert/FloatingAlert';\nimport CustomerPaymentType from '../../model/customerPayment';\nimport CustomerPaymentsList from '../../layouts/CustomerPaymentsList/CustomerPaymentsList';\nimport Button from '../../components/Button/Button';\nimport {colorPalette} from '../../theme';\nimport AddCircleRoundedIcon from '@material-ui/icons/AddCircleRounded';\nimport {PageWrapper, PageContent, PageHeader} from '../../components/PageContainer/PageContainer';\n\nconst useStyles = makeStyles({\n    wrapper: {\n        height: '100vh',\n    },\n    content: {\n        overflowY: 'scroll',\n        height: 'calc(100vh - 110px - 56px - 16px)',\n    },\n});\n\nconst CustomerPaymentsPage = () => {\n    const {\n        showNewCustomerPaymentModal,\n        closeCustomerPaymentModal,\n        modalOpen,\n        showSuccessMessage,\n        hideSuccessMessage,\n        deleteCustomerPayment,\n        showEditCustomerPaymentModal,\n        loadCustomerPayments,\n        addCustomerPayment,\n        updateCustomerPayment,\n        deleting,\n        loading,\n        rows,\n        currentCustomerPayment,\n        totalRows,\n        onChangeSearch,\n    } = useCustomerPaymentsPage();\n\n    const classes = useStyles();\n\n    return (\n        <>\n            <PageWrapper>\n                <PageHeader\n                    placeholder=\"Search Customer Payments\"\n                    loadedRows={rows.length}\n                    totalRows={totalRows}\n                    openModal={showNewCustomerPaymentModal}\n                    onChange={onChangeSearch}\n                    label=\"Customer Payments\"\n                />\n                <PageContent>\n                    <CustomerPaymentsList\n                        rows={rows}\n                        onRowDelete={deleteCustomerPayment}\n                        // onEditCustomerPayment={showEditCustomerPaymentModal}\n                        deleting={deleting}\n                        onLoadMore={loadCustomerPayments}\n                        allLoaded={rows.length == totalRows} //ToDo: pagination\n                        loading={loading}\n                    />\n                </PageContent>\n            </PageWrapper>\n            <FloatingAlert\n                severity=\"success\"\n                open={showSuccessMessage}\n                onClose={hideSuccessMessage}\n                message=\"CustomerPayment added successfully\"\n            />\n            <CustomerPaymentModal\n                open={modalOpen}\n                loading={loading}\n                // existingCustomerPayment={currentCustomerPayment}\n                close={closeCustomerPaymentModal}\n                aria-labelledby=\"customerPayment_modal\"\n                onSubmit={currentCustomerPayment ? updateCustomerPayment : addCustomerPayment}\n            />\n        </>\n    );\n};\n\nexport default CustomerPaymentsPage;\n","import ProductType from './model/product';\nimport CountsType from './model/counts';\nimport {firestore} from 'firebase';\nimport {Dispatch, SetStateAction} from 'react';\nimport CustomerType from './model/customer';\nimport CityType from './model/city';\nimport AccountType from './model/account';\nimport PurchaseType from './model/purchase';\nimport VendorType from './model/vendor';\nimport InvoiceType from './model/invoice';\nimport VendorPaymentType from './model/vendorPayment';\nimport CustomerPaymentType from './model/customerPayment';\nimport EmployeeType from './model/employee';\n\nconst api = {\n    product: {\n        get: (successCallback?: Function, errorCallback?: Function, startAfter?: any) => {\n            let query = firestore().collection('products').limit(5).orderBy('createdAt', 'desc');\n            if (startAfter) {\n                query = query.startAfter(startAfter);\n            }\n            query\n                .get()\n                .then((result) => {\n                    successCallback && successCallback(result);\n                })\n                .catch((error) => {\n                    errorCallback && errorCallback(error);\n                });\n        },\n        add: (data: ProductType, success: (id: string) => void, error: () => void) => {\n            firestore()\n                .collection('products')\n                .add(data)\n                .then((newProductDoc) => {\n                    success(newProductDoc.id);\n                })\n                .catch(() => {\n                    error();\n                });\n        },\n        delete: (productId?: string, success?: () => void, error?: () => void) => {\n            firestore()\n                .collection('products')\n                .doc(productId)\n                .delete()\n                .then(() => {\n                    success && success();\n                })\n                .catch((error) => {\n                    error && error();\n                });\n        },\n    },\n    customer: {\n        get: (successCallback?: Function, errorCallback?: Function, startAfter?: any) => {\n            let query = firestore().collection('customers').limit(5).orderBy('createdAt', 'desc');\n            if (startAfter) {\n                query = query.startAfter(startAfter);\n            }\n            query\n                .get()\n                .then((result) => {\n                    successCallback && successCallback(result);\n                })\n                .catch((error) => {\n                    errorCallback && errorCallback(error);\n                });\n        },\n        add: (data: CustomerType, success: (id: string) => void, error: () => void) => {\n            firestore()\n                .collection('customers')\n                .add(data)\n                .then((newCustomerDoc) => {\n                    success(newCustomerDoc.id);\n                })\n                .catch(() => {\n                    error();\n                });\n        },\n        delete: (customerId?: string, success?: () => void, error?: () => void) => {\n            firestore()\n                .collection('customers')\n                .doc(customerId)\n                .delete()\n                .then(() => {\n                    success && success();\n                })\n                .catch((error) => {\n                    error && error();\n                });\n        },\n    },\n    purchase: {\n        get: (successCallback?: Function, errorCallback?: Function, startAfter?: any) => {\n            let query = firestore().collection('purchases').limit(5).orderBy('createdAt', 'desc');\n            if (startAfter) {\n                query = query.startAfter(startAfter);\n            }\n            query\n                .get()\n                .then((result) => {\n                    successCallback && successCallback(result);\n                })\n                .catch((error) => {\n                    errorCallback && errorCallback(error);\n                });\n        },\n        add: (data: PurchaseType, success: (id: string) => void, error: () => void) => {\n            firestore()\n                .collection('purchases')\n                .add(data)\n                .then((newPurchaseDoc) => {\n                    success(newPurchaseDoc.id);\n                })\n                .catch(() => {\n                    error();\n                });\n        },\n        delete: (purchaseId?: string, success?: () => void, error?: () => void) => {\n            firestore()\n                .collection('purchases')\n                .doc(purchaseId)\n                .delete()\n                .then(() => {\n                    success && success();\n                })\n                .catch(() => {\n                    error && error();\n                });\n        },\n    },\n    invoice: {\n        get: (successCallback?: Function, errorCallback?: Function, startAfter?: any) => {\n            let query = firestore().collection('invoices').limit(5).orderBy('createdAt', 'desc');\n            if (startAfter) {\n                query = query.startAfter(startAfter);\n            }\n            query\n                .get()\n                .then((result) => {\n                    successCallback && successCallback(result);\n                })\n                .catch((error) => {\n                    errorCallback && errorCallback(error);\n                });\n        },\n        add: (data: InvoiceType, success: (id: string) => void, error: () => void) => {\n            firestore()\n                .collection('invoices')\n                .add(data)\n                .then((newInvoiceDoc) => {\n                    success(newInvoiceDoc.id);\n                })\n                .catch(() => {\n                    error();\n                });\n        },\n        delete: (invoiceId?: string, success?: () => void, error?: () => void) => {\n            firestore()\n                .collection('invoices')\n                .doc(invoiceId)\n                .delete()\n                .then(() => {\n                    success && success();\n                })\n                .catch(() => {\n                    error && error();\n                });\n        },\n    },\n    vendor: {\n        get: (successCallback?: Function, errorCallback?: Function, startAfter?: any) => {\n            let query = firestore().collection('vendors').limit(5).orderBy('createdAt', 'desc');\n            if (startAfter) {\n                query = query.startAfter(startAfter);\n            }\n            query\n                .get()\n                .then((result) => {\n                    successCallback && successCallback(result);\n                })\n                .catch((error) => {\n                    errorCallback && errorCallback(error);\n                });\n        },\n        add: (data: VendorType, success: (id: string) => void, error: () => void) => {\n            firestore()\n                .collection('vendors')\n                .add(data)\n                .then((newCustomerDoc) => {\n                    success(newCustomerDoc.id);\n                })\n                .catch(() => {\n                    error();\n                });\n        },\n        delete: (customerId?: string, success?: () => void, error?: () => void) => {\n            firestore()\n                .collection('vendors')\n                .doc(customerId)\n                .delete()\n                .then(() => {\n                    success && success();\n                })\n                .catch((error) => {\n                    error && error();\n                });\n        },\n    },\n    city: {\n        get: (successCallback?: Function, errorCallback?: Function, startAfter?: any) => {\n            let query = firestore().collection('cities').orderBy('name');\n            query\n                .get()\n                .then((result) => {\n                    successCallback && successCallback(result);\n                })\n                .catch((error) => {\n                    errorCallback && errorCallback(error);\n                });\n        },\n        add: (data: CityType, success: (id: string) => void, error: () => void) => {\n            firestore()\n                .collection('cities')\n                .add(data)\n                .then((newCityDoc) => {\n                    success(newCityDoc.id);\n                })\n                .catch(() => {\n                    error();\n                });\n        },\n        delete: (cityId?: string, success?: () => void, error?: () => void) => {\n            firestore()\n                .collection('cities')\n                .doc(cityId)\n                .delete()\n                .then(() => {\n                    success && success();\n                })\n                .catch((error) => {\n                    error && error();\n                });\n        },\n    },\n    account: {\n        get: (successCallback?: Function, errorCallback?: Function, startAfter?: any) => {\n            let query = firestore().collection('accounts').limit(5).orderBy('createdAt', 'desc');\n            if (startAfter) {\n                query = query.startAfter(startAfter);\n            }\n            query\n                .get()\n                .then((result) => {\n                    successCallback && successCallback(result);\n                })\n                .catch((error) => {\n                    errorCallback && errorCallback(error);\n                });\n        },\n        add: (data: AccountType, success: (id: string) => void, error: () => void) => {\n            firestore()\n                .collection('accounts')\n                .add(data)\n                .then((newProductDoc) => {\n                    success(newProductDoc.id);\n                })\n                .catch(() => {\n                    error();\n                });\n        },\n        delete: (accountId?: string, success?: () => void, error?: () => void) => {\n            firestore()\n                .collection('accounts')\n                .doc(accountId)\n                .delete()\n                .then(() => {\n                    success && success();\n                })\n                .catch((error) => {\n                    error && error();\n                });\n        },\n    },\n    vendorPayment: {\n        get: (successCallback?: Function, errorCallback?: Function, startAfter?: any) => {\n            let query = firestore()\n                .collection('vendorPayments')\n                .limit(5)\n                .orderBy('createdAt', 'desc');\n            if (startAfter) {\n                query = query.startAfter(startAfter);\n            }\n            query\n                .get()\n                .then((result) => {\n                    successCallback && successCallback(result);\n                })\n                .catch((error) => {\n                    errorCallback && errorCallback(error);\n                });\n        },\n        add: (data: VendorPaymentType, success: (id: string) => void, error: () => void) => {\n            firestore()\n                .collection('vendorPayments')\n                .add(data)\n                .then((newVendorPaymentDoc) => {\n                    success(newVendorPaymentDoc.id);\n                })\n                .catch(() => {\n                    error();\n                });\n        },\n        delete: (vendorPaymentId?: string, success?: () => void, error?: () => void) => {\n            firestore()\n                .collection('vendorPayments')\n                .doc(vendorPaymentId)\n                .delete()\n                .then(() => {\n                    success && success();\n                })\n                .catch(() => {\n                    error && error();\n                });\n        },\n    },\n    customerPayment: {\n        get: (successCallback?: Function, errorCallback?: Function, startAfter?: any) => {\n            let query = firestore()\n                .collection('customerPayments')\n                .limit(5)\n                .orderBy('createdAt', 'desc');\n            if (startAfter) {\n                query = query.startAfter(startAfter);\n            }\n            query\n                .get()\n                .then((result) => {\n                    successCallback && successCallback(result);\n                })\n                .catch((error) => {\n                    errorCallback && errorCallback(error);\n                });\n        },\n        add: (data: CustomerPaymentType, success: (id: string) => void, error: () => void) => {\n            firestore()\n                .collection('customerPayments')\n                .add(data)\n                .then((newCustomerPaymentDoc) => {\n                    success(newCustomerPaymentDoc.id);\n                })\n                .catch(() => {\n                    error();\n                });\n        },\n        delete: (customerPaymentId?: string, success?: () => void, error?: () => void) => {\n            firestore()\n                .collection('customerPayments')\n                .doc(customerPaymentId)\n                .delete()\n                .then(() => {\n                    success && success();\n                })\n                .catch(() => {\n                    error && error();\n                });\n        },\n    },\n    employee: {\n        get: (successCallback?: Function, errorCallback?: Function, startAfter?: any) => {\n            let query = firestore().collection('employees').limit(5).orderBy('createdAt', 'desc');\n            if (startAfter) {\n                query = query.startAfter(startAfter);\n            }\n            query\n                .get()\n                .then((result) => {\n                    successCallback && successCallback(result);\n                })\n                .catch((error) => {\n                    errorCallback && errorCallback(error);\n                });\n        },\n        add: (data: EmployeeType, success: (id: string) => void, error: () => void) => {\n            firestore()\n                .collection('employees')\n                .add(data)\n                .then((newEmployeeDoc) => {\n                    success(newEmployeeDoc.id);\n                })\n                .catch(() => {\n                    error();\n                });\n        },\n        delete: (employeeId?: string, success?: () => void, error?: () => void) => {\n            firestore()\n                .collection('employees')\n                .doc(employeeId)\n                .delete()\n                .then(() => {\n                    success && success();\n                })\n                .catch((error) => {\n                    error && error();\n                });\n        },\n    },\n    counts: {\n        get: (getSnapshot: (snapshot: firestore.QuerySnapshot<firestore.DocumentData>) => void) => {\n            firestore()\n                .collection('counts')\n                .limit(1)\n                .onSnapshot((snapshot) => {\n                    getSnapshot(snapshot);\n                });\n        },\n    },\n};\n\nexport default api;\n","import {useState, useEffect} from 'react';\nimport api from '../../api';\nimport EmployeeType from '../../model/employee';\nlet employeeDocs: any[] = [];\nconst useEmployeesPage = () => {\n    const [modalOpen, setModalOpen] = useState(false);\n    const [showSuccessMessage, setShowSuccessMessage] = useState(false);\n\n    const [rows, setRows] = useState<EmployeeType[]>([]);\n    const [deleting, setDeleting] = useState(false);\n    const [loading, setLoading] = useState(false);\n\n    const openEmployeeModal = () => {\n        setModalOpen(true);\n    };\n\n    const closeEmployeeModal = (created: boolean) => {\n        setModalOpen(false);\n        if (created) setShowSuccessMessage(true);\n    };\n\n    const hideSuccessMessage = () => {\n        setShowSuccessMessage(false);\n    };\n\n    const loadEmployees = () => {\n        setLoading(true);\n        api.employee.get(\n            (result: any) => {\n                employeeDocs = [];\n                const items: any[] = [];\n                result.docs.forEach((doc: any) => {\n                    employeeDocs.push(doc);\n                    const item: any = doc.data();\n                    item.id = doc.id;\n                    items.push(item);\n                });\n                setRows(items);\n                setLoading(false);\n            },\n            () => {\n                setLoading(false);\n            }\n        );\n    };\n\n    const loadMoreEmployees = () => {\n        setLoading(true);\n        api.employee.get(\n            (result: any) => {\n                const items: any[] = [];\n                result.docs.forEach((doc: any) => {\n                    employeeDocs.push(doc);\n                    const item: any = doc.data();\n                    item.id = doc.id;\n                    items.push(item);\n                });\n                setRows((prev) => prev.concat(items));\n                setLoading(false);\n            },\n            () => {\n                setLoading(false);\n            },\n            employeeDocs[employeeDocs.length - 1]\n        );\n    };\n\n    const addEmployee = (newEmployee: EmployeeType) => {\n        rows.push(newEmployee);\n        rows.sort(\n            (a: EmployeeType, b: EmployeeType) =>\n                (b.createdAt ? b.createdAt : 0) - (a.createdAt ? a.createdAt : 0)\n        );\n        setRows(rows);\n    };\n\n    const deleteEmployee = (index: number) => {\n        setDeleting(true);\n        api.employee.delete(\n            rows[index].id,\n            () => {\n                employeeDocs.splice(index, 1);\n                const remaining = rows.filter((row, i) => i !== index);\n                setRows(remaining);\n                setDeleting(false);\n            },\n            () => {\n                setDeleting(false);\n            }\n        );\n    };\n\n    const editEmployee = () => {};\n\n    useEffect(() => {\n        loadEmployees();\n    }, []);\n\n    return {\n        openEmployeeModal,\n        closeEmployeeModal,\n        modalOpen,\n        showSuccessMessage,\n        hideSuccessMessage,\n        deleteEmployee,\n        addEmployee,\n        loadMoreEmployees,\n        deleting,\n        loading,\n        rows,\n    };\n};\nexport default useEmployeesPage;\n","import firebase from 'firebase';\nimport EmployeeType from '../../model/employee';\nimport {useState} from 'react';\nimport api from '../../api';\n\nconst useEmployeeModal = (\n    onAdd: (employee: EmployeeType) => void,\n    close: (created: boolean) => void\n) => {\n    const [name, setName] = useState('');\n    const [salary, setSalary] = useState(0);\n    const [designation, setDesignation] = useState('');\n    const [cnic, setCnic] = useState('');\n    const [mobile, setMobile] = useState('');\n    const [loading, setLoading] = useState(false);\n\n    const onNameChange = (value: string) => {\n        setName(value);\n    };\n\n    const onSalaryChange = (value: string) => {\n        setSalary(Number(value));\n    };\n\n    const onDesignationChange = (value: string) => {\n        setDesignation(value);\n    };\n\n    const onCnicChange = (value: string) => {\n        setCnic(value);\n    };\n\n    const onMobileChange = (value: string) => {\n        setMobile(value);\n    };\n\n    const handleClick = () => {\n        if (!loading) {\n            setLoading(true);\n            const now = Date.now();\n            const newEmployee: EmployeeType = {\n                name,\n                salary,\n                designation,\n                cnic,\n                mobile,\n                createdAt: now,\n                updatedAt: now,\n            };\n            api.employee.add(\n                newEmployee,\n                (id: string) => {\n                    setLoading(false);\n                    newEmployee.id = id;\n                    onAdd(newEmployee);\n                    close(true);\n                },\n                () => {\n                    setLoading(false);\n                    //ToDo failed to add data\n                }\n            );\n        }\n    };\n    return {\n        handleClick,\n        onNameChange,\n        onSalaryChange,\n        onDesignationChange,\n        onCnicChange,\n        onMobileChange,\n        loading,\n    };\n};\n\nexport default useEmployeeModal;\n","import React from 'react';\nimport {Dialog, DialogTitle, FormControl, TextField, Grid} from '@material-ui/core';\nimport Button from '../../components/Button/Button';\nimport useEmployeeModal from './useEmployeeModal';\nimport EmployeeType from '../../model/employee';\n\nexport interface EmployeeModalType {\n    open: boolean;\n    close: (created: boolean) => void;\n    onAdd: (employee: EmployeeType) => void;\n}\nconst EmployeeModal = (props: EmployeeModalType) => {\n    const {open, close, onAdd} = props;\n    const {\n        handleClick,\n        onNameChange,\n        onCnicChange,\n        onDesignationChange,\n        onMobileChange,\n        onSalaryChange,\n        loading,\n    } = useEmployeeModal(onAdd, close);\n    return (\n        <Dialog open={open}>\n            <DialogTitle>Add New Employee</DialogTitle>\n            <Grid container spacing={2} style={{padding: 24}}>\n                <Grid item xs={12}>\n                    <Grid container spacing={2}>\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                label=\"Employee Name\"\n                                onChange={(event) => {\n                                    onNameChange(event.target.value);\n                                }}\n                            />\n                        </Grid>\n\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                label=\"Salary\"\n                                onChange={(event) => {\n                                    onSalaryChange(event.target.value);\n                                }}\n                            />\n                        </Grid>\n\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                label=\"Designation\"\n                                onChange={(event) => {\n                                    onDesignationChange(event.target.value);\n                                }}\n                            />\n                        </Grid>\n\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                label=\"CNIC\"\n                                onChange={(event) => {\n                                    onCnicChange(event.target.value);\n                                }}\n                            />\n                        </Grid>\n\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                label=\"Mobile\"\n                                onChange={(event) => {\n                                    onMobileChange(event.target.value);\n                                }}\n                            />\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid item xs={12}>\n                    <Grid container spacing={2} justify={'flex-end'}>\n                        <Grid item>\n                            <Button\n                                variant=\"text\"\n                                onClick={() => {\n                                    close(false);\n                                }}\n                            >\n                                Cancel\n                            </Button>\n                        </Grid>\n                        <Grid item>\n                            <Button onClick={handleClick} loading={loading}>\n                                Add Employee\n                            </Button>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </Dialog>\n    );\n};\n\nexport default EmployeeModal;\n","import React, {useState, useEffect} from 'react';\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\nimport EditIcon from '@material-ui/icons/Edit';\nimport {\n    Paper,\n    TableContainer,\n    Table,\n    TableHead,\n    TableRow,\n    TableCell,\n    TableSortLabel,\n    TableBody,\n    TablePagination,\n    makeStyles,\n    IconButton,\n    Card,\n    Typography,\n    Grid,\n} from '@material-ui/core';\nimport {firestore} from 'firebase';\nimport api from '../../api';\nimport EmployeeType from '../../model/employee';\nimport Button from '../../components/Button/Button';\nimport {H3, Body, SH2, SH3, Caption} from '../../components/Typography/Typography';\nimport {colorPalette} from '../../theme';\nimport InboxIcon from '@material-ui/icons/Inbox';\nimport CallRoundedIcon from '@material-ui/icons/CallRounded';\nimport EuroRoundedIcon from '@material-ui/icons/EuroRounded';\nimport CreditCardRoundedIcon from '@material-ui/icons/CreditCardRounded';\nimport AssignmentIndRoundedIcon from '@material-ui/icons/AssignmentIndRounded';\n\nconst columns: string[] = ['Name', 'Average Rate', 'Quantity', 'Total', 'Details', 'Actions'];\n\ninterface EmployeesListType {\n    rows: EmployeeType[];\n    onRowDelete: Function;\n    deleting: boolean;\n    loading?: boolean;\n    allLoaded: boolean;\n    onLoadMore: () => void;\n}\n\nconst EmployeesList = (props: EmployeesListType) => {\n    return (\n        <div>\n            {props.rows.map((item: EmployeeType, index) => (\n                <div\n                    style={{\n                        padding: 8,\n                        borderBottom: `1px solid ${colorPalette.grayscale[4]}`,\n                    }}\n                    key={index}\n                >\n                    <Grid container>\n                        <Grid item xs={11}>\n                            <Grid item container>\n                                <Grid item xs={12}>\n                                    <SH2 color={colorPalette.primary[0].interaction}>\n                                        {item.name}\n                                    </SH2>\n                                </Grid>\n                                <Grid item xs={1}>\n                                    <CallRoundedIcon fontSize=\"small\" />\n                                </Grid>\n                                <Grid item xs={11}>\n                                    {item.mobile}\n                                </Grid>\n                                <Grid item xs={1}>\n                                    <EuroRoundedIcon fontSize=\"small\" />\n                                </Grid>\n                                <Grid item xs={11}>\n                                    {item.salary}\n                                </Grid>\n                                <Grid item xs={1}>\n                                    <CreditCardRoundedIcon fontSize=\"small\" />\n                                </Grid>\n                                <Grid item xs={11}>\n                                    {item.cnic}\n                                </Grid>\n                                <Grid item xs={1}>\n                                    <AssignmentIndRoundedIcon fontSize=\"small\" />\n                                </Grid>\n                                <Grid item xs={11}>\n                                    {item.designation}\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                        <Grid item xs={1}>\n                            <IconButton aria-label=\"edit\">\n                                <EditIcon fontSize=\"small\" />\n                            </IconButton>\n                            <IconButton\n                                aria-label=\"delete\"\n                                onClick={() => {\n                                    props.onRowDelete(index);\n                                }}\n                                disabled={props.deleting}\n                            >\n                                <DeleteOutlineIcon fontSize=\"small\" />\n                            </IconButton>\n                        </Grid>\n                    </Grid>\n                </div>\n            ))}\n            <Button\n                onClick={props.onLoadMore}\n                disabled={props.allLoaded}\n                loading={props.loading}\n                fullWidth\n                variant=\"text\"\n            >\n                Load More\n            </Button>\n        </div>\n    );\n};\n\nexport default EmployeesList;\n","import React from 'react';\nimport EmployeesTable from '../../layouts/EmployeesTable/EmployeesTable';\nimport {Typography, Grid, TextField, FormControl, Button} from '@material-ui/core';\nimport useEmployeesPage from './useEmployeesPage';\nimport EmployeeModal from '../../layouts/EmployeeModal/EmployeeModal';\nimport FloatingAlert from '../../components/FloatingAlert/FloatingAlert';\nimport EmployeeType from '../../model/employee';\nimport {PageWrapper, PageHeader, PageContent} from '../../components/PageContainer/PageContainer';\nimport EmployeesList from '../../layouts/EmployeesList/EmployeesList';\n\nconst EmployeesPage = () => {\n    const {\n        openEmployeeModal,\n        closeEmployeeModal,\n        modalOpen,\n        showSuccessMessage,\n        hideSuccessMessage,\n        deleteEmployee,\n        loadMoreEmployees,\n        addEmployee,\n        deleting,\n        loading,\n        rows,\n    } = useEmployeesPage();\n    return (\n        <>\n            <PageWrapper>\n                <PageHeader\n                    placeholder=\"Search Employees\"\n                    loadedRows={rows.length}\n                    totalRows={0}\n                    openModal={openEmployeeModal}\n                    label=\"employees\"\n                />\n                <PageContent>\n                    <EmployeesList\n                        rows={rows}\n                        onRowDelete={deleteEmployee}\n                        deleting={deleting}\n                        onLoadMore={loadMoreEmployees}\n                        allLoaded={rows.length === 0}\n                        loading={loading}\n                    />\n                </PageContent>\n            </PageWrapper>\n            <FloatingAlert\n                severity=\"success\"\n                open={showSuccessMessage}\n                onClose={hideSuccessMessage}\n                message=\"Employee added successfully\"\n            />\n            <EmployeeModal\n                open={modalOpen}\n                close={closeEmployeeModal}\n                aria-labelledby=\"employee_modal\"\n                onAdd={addEmployee}\n            />\n        </>\n    );\n};\n\nexport default EmployeesPage;\n","import React from 'react';\nimport {Route, Switch} from 'react-router-dom';\nimport {Typography} from '@material-ui/core';\nimport ProductsPage from '../views/Products/ProductsPage';\nimport CustomersPage from '../views/Customers/CustomersPage';\nimport CitiesPage from '../views/Cities/CitiesPage';\nimport VendorsPage from '../views/Vendors/VendorsPage';\nimport AccountsPage from '../views/Accounts/AccountsPage';\nimport PurchasesPage from '../views/Purchases/PurchasesPage';\nimport InvoicesPage from '../views/Invoices/InvoicesPage';\nimport VendorPaymentsPage from '../views/VendorPayments/VendorPaymentsPage';\nimport CustomerPaymentsPage from '../views/CustomerPaymentsPage/CustomerPaymentsPage';\nimport EmployeesPage from '../views/Employees/EmployeesPage';\n\nconst Routes = () => {\n    const routes = [\n        {\n            path: '/',\n            component: <ProductsPage />,\n        },\n        {\n            path: '/products',\n            component: <ProductsPage/>,\n        },\n        {\n            path: '/purchases',\n            component: <PurchasesPage />,\n        },\n        {\n            path: '/payments/vendors',\n            component: <VendorPaymentsPage />,\n        },\n        {\n            path: '/payments/customers',\n            component: <CustomerPaymentsPage />,\n        },\n        {\n            path: '/invoices',\n            component: <InvoicesPage />,\n        },\n        {\n            path: '/customers',\n            component: <CustomersPage />,\n        },\n        {\n            path: '/vendors',\n            component: <VendorsPage />,\n        },\n        {\n            path: '/accounts',\n            component: <AccountsPage />,\n        },\n        {\n            path: '/cities',\n            component: <CitiesPage />,\n        },\n        {\n            path: '/employees',\n            component: <EmployeesPage />,\n        },\n        {\n            path: '*',\n            component: <Typography variant=\"h3\">Some Page</Typography>,\n        },\n    ];\n\n    return (\n        <Switch>\n            {routes.map((route, index) => (\n                <Route exact path={route.path} key={index}>\n                    {route.component}\n                </Route>\n            ))}\n        </Switch>\n    );\n};\n\nexport default Routes;\n","import {useEffect, useState} from 'react';\n\nimport poco from '../../poco';\nimport CityType from '../../model/city';\nimport {CityListResponse} from '../../types/responses';\n\nconst useWelcome = () => {\n    const [showNav, setShowNav] = useState(false);\n    const [cities, setCities] = useState<CityType[]>([]);\n\n    useEffect(() => {\n        loadCities();\n    }, []);\n\n    const toggleDrawer = () => {\n        setShowNav((showNav) => !showNav);\n    };\n\n    const loadCities = () => {\n        // setLoading(true); //TODO: Add loading\n        poco.city.list(\n            (response: CityListResponse) => {\n                // setLoading(false);\n                setCities(response.data);\n            },\n            () => {\n                // setLoading(false);\n            }\n        );\n    };\n\n    return {\n        toggleDrawer,\n        showNav,\n        cities,\n    };\n};\n\nexport default useWelcome;\n","import React from 'react';\nimport {Button} from '@material-ui/core';\nimport poco from '../../poco';\n\nconst LogoutButton = () => {\n    const logout = () => {\n        poco.user.logout(\n            () => {\n                window.location.reload();\n            },\n            (error: any) => {\n                window.location.reload();\n            }\n        );\n        localStorage.removeItem('token');\n    };\n    return (\n        <Button variant=\"outlined\" color=\"inherit\" onClick={logout}>\n            Logout\n        </Button>\n    );\n};\n\nexport default LogoutButton;\n","import React from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport LogoutButton from '../LogoutButton/LogoutButton';\nimport {withRouter, RouteComponentProps} from 'react-router-dom';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n    title: {\n        flexGrow: 1,\n    },\n}));\n\ninterface TopAppBarProps extends RouteComponentProps {\n    toggleNavigation: () => void;\n}\n\nconst TopAppBar = withRouter(({history, ...props}: TopAppBarProps) => {\n    const classes = useStyles();\n    const getTitle = () => {\n        let title = history.location.pathname.substring(1);\n        title = title.toUpperCase().replace('/', ' ');\n        return title.length > 0 ? title : 'PRODUCTS';\n    };\n\n    return (\n        <div className={classes.root}>\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <IconButton\n                        edge=\"start\"\n                        className={classes.menuButton}\n                        color=\"inherit\"\n                        aria-label=\"menu\"\n                        onClick={() => {\n                            props.toggleNavigation();\n                        }}\n                    >\n                        <MenuIcon />\n                    </IconButton>\n                    <Typography variant=\"body1\" className={classes.title}>\n                        {getTitle()}\n                    </Typography>\n                    <LogoutButton />\n                </Toolbar>\n            </AppBar>\n        </div>\n    );\n});\n\nexport default TopAppBar;\n","import React from 'react';\nimport {Grid, Typography, makeStyles} from '@material-ui/core';\nimport NavigationBarLayout from '../NavigationBarLayout/NavigationBarLayout';\nimport {BrowserRouter} from 'react-router-dom';\nimport Routes from '../../Routes/Routes';\nimport LogoutButton from '../../components/LogoutButton/LogoutButton';\nimport useWelcome from './useWelcome';\nimport TopAppBar from '../../components/AppBar/AppBar';\nimport {colorPalette} from '../../theme';\nimport {CityContextProvider} from '../../CityContext';\nconst useStyles = makeStyles({\n    welcome: {\n        backgroundColor: colorPalette.grayscale[0],\n    },\n});\n\nconst Welcome = () => {\n    const classes = useStyles();\n    const {toggleDrawer, showNav, cities} = useWelcome();\n\n    return (\n        <CityContextProvider>\n            <BrowserRouter basename=\"/bilalshop\">\n                <TopAppBar toggleNavigation={toggleDrawer} />\n                <Grid container className={classes.welcome}>\n                    <Grid item lg={2} md={3}>\n                        <NavigationBarLayout showNav={showNav} toggleNavigation={toggleDrawer} />\n                    </Grid>\n                    <Grid item lg={10} md={9} sm={12} xs={12}>\n                        <Routes />\n                    </Grid>\n                </Grid>\n            </BrowserRouter>\n        </CityContextProvider>\n    );\n};\n\nexport default Welcome;\n","import React, {useEffect, useState} from 'react';\nimport api, {memData} from '../../poco';\nimport {AuthenticateResponse} from '../../types/responses';\nimport Login from '../../pages/Login/Login';\nimport Admin from '../../pages/Admin/Admin';\nimport Welcome from '../../layouts/Welcome/Welcome';\n\nfunction Authenticator() {\n    const [loading, setLoading] = useState(true);\n    const [loggedIn, setLoggedIn] = useState(false);\n\n    useEffect(() => {\n        api.authenticate(\n            (response: AuthenticateResponse) => {\n                setLoading(false);\n                if (response.success) {\n                    memData.user = response.user;\n                    setLoggedIn(true);\n                    // if (\n                    //     location.pathname === '/login' ||\n                    //     location.pathname === '/register' ||\n                    //     location.pathname === '/'\n                    // ) {\n                    //     history.push(`/${memData.user.role.toLowerCase()}`);\n                    // }\n                }\n            },\n            (response: any) => {\n                setLoading(false)\n                setLoggedIn(false)\n                // history.push('/login');\n            }\n        );\n    }, []);\n    return <>\n        {loading ? <h1>Loading</h1> : loggedIn ? <Welcome /> : <Login />}\n    </>;\n}\n\nexport default Authenticator;\n","import React, {useEffect} from 'react';\nimport Authenticator from './components/Authenticator/Authenticator';\n\nfunction App() {\n    return (\n        \n            <Authenticator />\n        \n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport firebase from 'firebase';\nimport {ThemeProvider} from '@material-ui/core';\nimport primary from './theme';\n\nconst config = {\n    apiKey: 'AIzaSyAN6y59cHMfZiXomgcBbIVh5p1m0yLQshI',\n    // authDomain: 'bilalshop-b7685.firebaseapp.com',\n    projectId: 'bilalshop-b7685',\n    // ...\n};\nfirebase.initializeApp(config);\n\nReactDOM.render(\n    <React.StrictMode>\n        <ThemeProvider theme={primary}>\n            <App />\n        </ThemeProvider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}