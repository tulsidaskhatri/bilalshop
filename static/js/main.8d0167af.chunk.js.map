{"version":3,"sources":["components/LoginComponent/LoginComponent.tsx","components/NavigationItem/NavigationItem.tsx","components/NavigationBar/NavigationBar.tsx","layouts/NavigationBarLayout/NavigationBarLayout.tsx","api.ts","views/Products/useProductsPage.ts","components/Button/Button.tsx","layouts/ProductModal/useProductModal.ts","layouts/ProductModal/ProductModal.tsx","components/FloatingAlert/FloatingAlert.tsx","colors.ts","theme.ts","components/Typography/Typography.tsx","layouts/ProductsList/ProductsList.tsx","components/PageContainer/PageContainer.tsx","views/Products/ProductsPage.tsx","views/Customers/useCustomersPage.ts","layouts/CustomerModal/useCustomerModal.ts","layouts/CustomerModal/CustomerModal.tsx","layouts/CustomersList/CustomersList.tsx","views/Customers/CustomersPage.tsx","views/Cities/useCitiesPage.ts","views/Cities/CitiesPage.tsx","views/Vendors/useVendorsPage.ts","layouts/VendorModal/useVendorModal.ts","layouts/VendorModal/VendorModal.tsx","layouts/VendorsList/VendorsList.tsx","views/Vendors/VendorsPage.tsx","views/Accounts/useAccountsPage.ts","layouts/AccountModal/useAccountModal.ts","layouts/AccountModal/AccountModal.tsx","layouts/AccountsList/AccountsList.tsx","views/Accounts/AccountsPage.tsx","views/Purchases/usePurchasesPage.ts","layouts/PurchaseModal/usePurchaseModal.ts","layouts/PurchaseModal/PurchaseModal.tsx","layouts/PurchaseList/PurchaseList.tsx","views/Purchases/PurchasesPage.tsx","views/Invoices/useInvoicesPage.ts","layouts/InvoiceModal/useInvoiceModal.ts","layouts/InvoiceModal/InvoiceModal.tsx","layouts/InvoicesList/InvoicesList.tsx","utils.ts","views/Invoices/InvoicesPage.tsx","views/VendorPayments/useVendorPaymentsPage.ts","layouts/VendorPaymentModal/useVendorPaymentModal.ts","layouts/VendorPaymentModal/VendorPaymentModal.tsx","layouts/VendorPaymentsList/VendorPaymentsList.tsx","views/VendorPayments/VendorPaymentsPage.tsx","views/CustomerPaymentsPage/useCustomerPaymentsPage.ts","layouts/CustomerPaymentModal/useCustomerPaymentModal.ts","layouts/CustomerPaymentModal/CustomerPaymentModal.tsx","layouts/CustomerPaymentsList/CustomerPaymentsList.tsx","views/CustomerPaymentsPage/CustomerPaymentsPage.tsx","views/Employees/useEmployeesPage.ts","layouts/EmployeeModal/useEmployeeModal.ts","layouts/EmployeeModal/EmployeeModal.tsx","layouts/EmployeesList/EmployeesList.tsx","views/Employees/EmployeesPage.tsx","Routes/Routes.tsx","layouts/Welcome/useWelcome.ts","components/LogoutButton/LogoutButton.tsx","components/AppBar/AppBar.tsx","layouts/Welcome/Welcome.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["LoginComponent","useState","email","setEmail","password","setPassword","error","setError","Grid","container","justify","alignItems","direction","style","height","backgroundColor","item","md","sm","xs","Paper","padding","margin","spacing","Typography","variant","color","TextField","fullWidth","label","type","onChange","event","target","value","onClick","firebase","auth","signInWithEmailAndPassword","then","catch","NavigationItem","props","history","useHistory","ListItem","button","push","link","close","selected","divider","ListItemText","primary","text","NavigationBar","theme","useTheme","isMobile","useMediaQuery","breakpoints","down","Drawer","anchor","open","showNav","onClose","toggleNavigation","List","items","map","index","key","NavigationBarLayout","withRouter","navigationItems","products","location","pathname","purchases","vendors","customers","employees","accounts","vendorPayments","customerPayments","invoices","cities","api","product","get","successCallback","errorCallback","startAfter","query","firestore","collection","limit","orderBy","result","add","data","success","newProductDoc","id","delete","productId","doc","customer","newCustomerDoc","customerId","purchase","newPurchaseDoc","purchaseId","invoice","newInvoiceDoc","invoiceId","vendor","city","newCityDoc","cityId","account","accountId","vendorPayment","newVendorPaymentDoc","vendorPaymentId","customerPayment","newCustomerPaymentDoc","customerPaymentId","employee","newEmployeeDoc","employeeId","counts","getSnapshot","onSnapshot","snapshot","productDocs","useProductsPage","modalOpen","setModalOpen","showSuccessMessage","setShowSuccessMessage","rows","setRows","deleting","setDeleting","loading","setLoading","useEffect","docs","forEach","openProductModal","closeProductModal","created","hideSuccessMessage","deleteProduct","splice","remaining","filter","row","i","addProduct","newProduct","sort","a","b","createdAt","loadMoreProducts","prev","concat","length","Button","disabled","others","startIcon","CircularProgress","size","children","useProductModal","onAdd","name","setName","details","setDetails","handleClick","now","Date","quantity","rate","updatedAt","onNameChange","onDetailsChange","ProductModal","Dialog","DialogTitle","multiline","FloatingAlert","Snackbar","autoHideDuration","reason","anchorOrigin","vertical","horizontal","severity","message","colors","blue","light","base","interaction","dark","pink","green","darkBlue","secondary","system","red","orange","grayscale","colorPalette","warning","createMuiTheme","palette","main","MuiTextField","MuiButton","H3","SH2","fontWeight","Body","Caption","useStyles","makeStyles","head","ProductsList","classes","className","borderBottom","paddingTop","paddingBottom","fontSize","borderLeft","paddingLeft","paddingRight","IconButton","aria-label","onRowDelete","onLoadMore","allLoaded","wrapper","content","overflowY","header","PageWrapper","PageContent","PageHeader","FormControl","placeholder","loadedRows","totalRows","openModal","ProductsPage","numberOfProducts","aria-labelledby","customerDocs","useCustomersPage","setCities","loadingCities","setLoadingCities","console","log","openCustomerModal","closeCustomerModal","deleteCustomer","addCustomer","newCustomer","loadMoreCustomers","addCity","newCity","useCustomerModal","mobile","setMobile","setCity","debt","onMobileChange","CustomerModal","Autocomplete","options","getOptionLabel","option","renderInput","params","CustomersList","CustomersPage","numberOfCustomers","cityDocs","useCitiesPage","adding","setAdding","deleteCity","oldRows","CitiesPage","vendorDocs","useVendorsPage","openVendorModal","closeVendorModal","deleteVendor","addVendor","newVendor","loadMoreVendors","useVendorModal","VendorModal","VendorsList","VendorsPage","numberOfVendors","accountDocs","useAccountsPage","openAccountModal","closeAccountModal","deleteAccount","addAccount","newAccount","loadMoreAccounts","useAccountModal","setType","amount","setAmount","onTypeChange","onAmountChange","AccountModal","parseInt","AccountsList","Chip","AccountsPage","numberOfAccounts","purchaseDocs","usePurchasesPage","setProducts","setVendors","loadingProducts","setLoadingProducts","loadingVendors","setLoadingVendors","openPurchaseModal","closePurchaseModal","deletePurchase","addPurchase","newPurchase","loadMorePurchases","usePurchaseModal","setProduct","setVendor","setQuantity","setRate","onQuantityChange","onRateChange","PurchaseModal","PurchasesList","PurchasesPage","numberOfPurchases","invoiceDocs","useInvoicesPage","setCustomers","loadingCustomers","setLoadingCustomers","openInvoiceModal","closeInvoiceModal","deleteInvoice","addInvoice","newInvoice","loadMoreInvoices","useInvoiceModal","setCustomer","sales","setSales","addSale","newSales","InvoiceModal","sale","InvoicesList","total","getTotalSalesAmount","InvoicesPage","numberOfInvoices","vendorPaymentDocs","useVendorPaymentsPage","setAccounts","loadingAccounts","setLoadingAccounts","openVendorPaymentModal","closeVendorPaymentModal","deleteVendorPayment","addVendorPayment","newVendorPayment","loadMoreVendorPayments","useVendorPaymentModal","setAccount","VendorPaymentModal","VendorPaymentsList","VendorPaymentsPage","numberOfVendorPayments","customerPaymentDocs","useCustomerPaymentsPage","openCustomerPaymentModal","closeCustomerPaymentModal","deleteCustomerPayment","addCustomerPayment","newCustomerPayment","loadMoreCustomerPayments","useCustomerPaymentModal","CustomerPaymentModal","CustomerPaymentsList","CustomerPaymentsPage","numberOfCustomerPayments","employeeDocs","useEmployeesPage","openEmployeeModal","closeEmployeeModal","deleteEmployee","addEmployee","newEmployee","loadMoreEmployees","useEmployeeModal","salary","setSalary","designation","setDesignation","cnic","setCnic","onSalaryChange","onDesignationChange","onCnicChange","EmployeeModal","EmployeesList","EmployeesPage","numberOfEmployees","Routes","routes","path","component","numberOfCities","route","exact","useWelcome","setNumberOfProducts","setNumberOfCities","setNumberOfCustomers","setNumberOfVendors","setNumberOfAccounts","setNumberOfPurchases","setNumberOfInvoices","setNumberOfVendorPayments","setNumberOfCustomerPayments","setNumberOfEmployees","setShowNav","toggleDrawer","LogoutButton","signOut","root","flexGrow","menuButton","marginRight","title","TopAppBar","AppBar","position","Toolbar","edge","substring","toUpperCase","replace","getTitle","welcome","Welcome","basename","lg","App","setloading","signedIn","setSignedIn","onAuthStateChanged","user","Boolean","window","hostname","match","initializeApp","apiKey","projectId","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8d0167af.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport {\n    FormControl,\n    Button,\n    TextField,\n    makeStyles,\n    Grid,\n    Typography,\n    Paper,\n} from '@material-ui/core';\nimport firebase from 'firebase';\n\nconst LoginComponent = () => {\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const [error, setError] = useState('');\n\n    const handleClick = () => {\n        setError('');\n        firebase\n            .auth()\n            .signInWithEmailAndPassword(email, password)\n            .then(() => {})\n            .catch(function (error) {\n                setError('Invalid User');\n            });\n    };\n\n    return (\n        <Grid\n            container\n            justify=\"center\"\n            alignItems=\"center\"\n            direction=\"row\"\n            style={{height: '100vh', backgroundColor: 'lightBlue'}}\n        >\n            <Grid item md={4} sm={8} xs={12}>\n                <Paper style={{padding: 32, margin: 16}}>\n                    <Grid container spacing={2}>\n                        <Grid item xs={12}>\n                            <Typography variant=\"h6\" color=\"error\">\n                                {error}\n                            </Typography>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                variant=\"outlined\"\n                                label=\"Email\"\n                                type=\"email\"\n                                onChange={(event) => {\n                                    setEmail(event.target.value);\n                                }}\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                variant=\"outlined\"\n                                type=\"password\"\n                                label=\"Password\"\n                                onChange={(event) => {\n                                    setPassword(event.target.value);\n                                }}\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <Button fullWidth variant=\"contained\" onClick={handleClick}>\n                                Login\n                            </Button>\n                        </Grid>\n                    </Grid>\n                </Paper>\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default LoginComponent;\n","import React from 'react';\nimport {Link, ListItem, ListItemText} from '@material-ui/core';\nimport {useHistory} from 'react-router-dom';\n\nexport interface NavigationItemProps {\n    text: string;\n    link: string;\n    selected: boolean;\n}\n\ninterface CloseProps extends NavigationItemProps {\n    close: () => void;\n}\n\nconst NavigationItem = (props: CloseProps) => {\n    const history = useHistory();\n    return (\n        <ListItem\n            button\n            onClick={() => {\n                history.push(props.link);\n                props.close();\n            }}\n            selected={props.selected}\n            divider\n        >\n            <ListItemText primary={props.text} />\n        </ListItem>\n    );\n};\n\nexport default NavigationItem;\n","import React from 'react';\nimport NavigationItem, {NavigationItemProps} from '../NavigationItem/NavigationItem';\nimport {List, Drawer, useTheme, useMediaQuery} from '@material-ui/core';\n\ninterface NavigationBarProps {\n    items: NavigationItemProps[];\n    showNav: boolean;\n    toggleNavigation: () => void;\n}\n\nconst NavigationBar = (props: NavigationBarProps) => {\n    const theme = useTheme();\n    const isMobile = useMediaQuery(theme.breakpoints.down('sm'));\n    return (\n        <>\n            {isMobile && (\n                <Drawer anchor={'left'} open={props.showNav} onClose={props.toggleNavigation}>\n                    <List>\n                        {props.items.map((item: NavigationItemProps, index: number) => (\n                            <NavigationItem key={index} {...item} close={props.toggleNavigation} />\n                        ))}\n                    </List>\n                </Drawer>\n            )}\n\n            {!isMobile && (\n                <List>\n                    {props.items.map((item: NavigationItemProps, index: number) => (\n                        <NavigationItem key={index} {...item} close={props.toggleNavigation} />\n                    ))}\n                </List>\n            )}\n        </>\n    );\n};\n\nexport default NavigationBar;\n","import React from 'react';\nimport TestComponent from '../../components/TestComponent/TestComponent';\nimport LoginComponent from '../../components/LoginComponent/LoginComponent';\nimport {Grid} from '@material-ui/core';\nimport NavigationBar from '../../components/NavigationBar/NavigationBar';\nimport {NavigationItemProps} from '../../components/NavigationItem/NavigationItem';\nimport {withRouter, RouteComponentProps} from 'react-router-dom';\n\ninterface NavigationBarLayoutType extends RouteComponentProps {\n    products: number;\n    cities: number;\n    customers: number;\n    vendors: number;\n    accounts: number;\n    purchases: number;\n    invoices: number;\n    vendorPayments: number;\n    customerPayments: number;\n    employees: number;\n    showNav: boolean;\n    toggleNavigation: () => void;\n}\n\nconst NavigationBarLayout = withRouter(({history, ...props}: NavigationBarLayoutType) => {\n    const navigationItems: NavigationItemProps[] = [\n        {\n            text: `Products (${props.products})`,\n            link: '/products',\n            selected:\n                history.location.pathname === '/products' || history.location.pathname === '/',\n        },\n        {\n            text: `Purchases (${props.purchases})`,\n            link: '/purchases',\n            selected: history.location.pathname === '/purchases',\n        },\n        {\n            text: `Vendors (${props.vendors})`,\n            link: '/vendors',\n            selected: history.location.pathname === '/vendors',\n        },\n        {\n            text: `Customers (${props.customers})`,\n            link: '/customers',\n            selected: history.location.pathname === '/customers',\n        },\n        {\n            text: `Employees (${props.employees})`,\n            link: '/employees',\n            selected: history.location.pathname === '/employees',\n        },\n        {\n            text: `Accounts (${props.accounts})`,\n            link: '/accounts',\n            selected: history.location.pathname === '/accounts',\n        },\n        {\n            text: 'Loans',\n            link: '/loans',\n            selected: history.location.pathname === '/loans',\n        },\n        {\n            text: 'Expenses',\n            link: '/expenses',\n            selected: history.location.pathname === '/expenses',\n        },\n        {\n            text: `Vendor Payments (${props.vendorPayments})`,\n            link: '/payments/vendors',\n            selected: history.location.pathname === '/payments/vendors',\n        },\n        {\n            text: `Customer Payments (${props.customerPayments})`,\n            link: '/payments/customers',\n            selected: history.location.pathname === '/payments/customer',\n        },\n        {\n            text: `Invoices (${props.invoices})`,\n            link: '/invoices',\n            selected: history.location.pathname === '/invoices',\n        },\n        {\n            text: `Cities (${props.cities})`,\n            link: '/cities',\n            selected: history.location.pathname === '/cities',\n        },\n    ];\n    return (\n        <NavigationBar\n            items={navigationItems}\n            showNav={props.showNav}\n            toggleNavigation={props.toggleNavigation}\n        />\n    );\n});\n\nexport default NavigationBarLayout;\n","import ProductType from './model/product';\nimport CountsType from './model/counts';\nimport {firestore} from 'firebase';\nimport {Dispatch, SetStateAction} from 'react';\nimport CustomerType from './model/customer';\nimport CityType from './model/city';\nimport AccountType from './model/account';\nimport PurchaseType from './model/purchase';\nimport VendorType from './model/vendor';\nimport InvoiceType from './model/invoice';\nimport VendorPaymentType from './model/vendorPayment';\nimport CustomerPaymentType from './model/customerPayment';\nimport EmployeeType from './model/employee';\n\nconst api = {\n    product: {\n        get: (successCallback?: Function, errorCallback?: Function, startAfter?: any) => {\n            let query = firestore().collection('products').limit(5).orderBy('createdAt', 'desc');\n            if (startAfter) {\n                query = query.startAfter(startAfter);\n            }\n            query\n                .get()\n                .then((result) => {\n                    successCallback && successCallback(result);\n                })\n                .catch((error) => {\n                    errorCallback && errorCallback(error);\n                });\n        },\n        add: (data: ProductType, success: (id: string) => void, error: () => void) => {\n            firestore()\n                .collection('products')\n                .add(data)\n                .then((newProductDoc) => {\n                    success(newProductDoc.id);\n                })\n                .catch(() => {\n                    error();\n                });\n        },\n        delete: (productId?: string, success?: () => void, error?: () => void) => {\n            firestore()\n                .collection('products')\n                .doc(productId)\n                .delete()\n                .then(() => {\n                    success && success();\n                })\n                .catch((error) => {\n                    error && error();\n                });\n        },\n    },\n    customer: {\n        get: (successCallback?: Function, errorCallback?: Function, startAfter?: any) => {\n            let query = firestore().collection('customers').limit(5).orderBy('createdAt', 'desc');\n            if (startAfter) {\n                query = query.startAfter(startAfter);\n            }\n            query\n                .get()\n                .then((result) => {\n                    successCallback && successCallback(result);\n                })\n                .catch((error) => {\n                    errorCallback && errorCallback(error);\n                });\n        },\n        add: (data: CustomerType, success: (id: string) => void, error: () => void) => {\n            firestore()\n                .collection('customers')\n                .add(data)\n                .then((newCustomerDoc) => {\n                    success(newCustomerDoc.id);\n                })\n                .catch(() => {\n                    error();\n                });\n        },\n        delete: (customerId?: string, success?: () => void, error?: () => void) => {\n            firestore()\n                .collection('customers')\n                .doc(customerId)\n                .delete()\n                .then(() => {\n                    success && success();\n                })\n                .catch((error) => {\n                    error && error();\n                });\n        },\n    },\n    purchase: {\n        get: (successCallback?: Function, errorCallback?: Function, startAfter?: any) => {\n            let query = firestore().collection('purchases').limit(5).orderBy('createdAt', 'desc');\n            if (startAfter) {\n                query = query.startAfter(startAfter);\n            }\n            query\n                .get()\n                .then((result) => {\n                    successCallback && successCallback(result);\n                })\n                .catch((error) => {\n                    errorCallback && errorCallback(error);\n                });\n        },\n        add: (data: PurchaseType, success: (id: string) => void, error: () => void) => {\n            firestore()\n                .collection('purchases')\n                .add(data)\n                .then((newPurchaseDoc) => {\n                    success(newPurchaseDoc.id);\n                })\n                .catch(() => {\n                    error();\n                });\n        },\n        delete: (purchaseId?: string, success?: () => void, error?: () => void) => {\n            firestore()\n                .collection('purchases')\n                .doc(purchaseId)\n                .delete()\n                .then(() => {\n                    success && success();\n                })\n                .catch(() => {\n                    error && error();\n                });\n        },\n    },\n    invoice: {\n        get: (successCallback?: Function, errorCallback?: Function, startAfter?: any) => {\n            let query = firestore().collection('invoices').limit(5).orderBy('createdAt', 'desc');\n            if (startAfter) {\n                query = query.startAfter(startAfter);\n            }\n            query\n                .get()\n                .then((result) => {\n                    successCallback && successCallback(result);\n                })\n                .catch((error) => {\n                    errorCallback && errorCallback(error);\n                });\n        },\n        add: (data: InvoiceType, success: (id: string) => void, error: () => void) => {\n            firestore()\n                .collection('invoices')\n                .add(data)\n                .then((newInvoiceDoc) => {\n                    success(newInvoiceDoc.id);\n                })\n                .catch(() => {\n                    error();\n                });\n        },\n        delete: (invoiceId?: string, success?: () => void, error?: () => void) => {\n            firestore()\n                .collection('invoices')\n                .doc(invoiceId)\n                .delete()\n                .then(() => {\n                    success && success();\n                })\n                .catch(() => {\n                    error && error();\n                });\n        },\n    },\n    vendor: {\n        get: (successCallback?: Function, errorCallback?: Function, startAfter?: any) => {\n            let query = firestore().collection('vendors').limit(5).orderBy('createdAt', 'desc');\n            if (startAfter) {\n                query = query.startAfter(startAfter);\n            }\n            query\n                .get()\n                .then((result) => {\n                    successCallback && successCallback(result);\n                })\n                .catch((error) => {\n                    errorCallback && errorCallback(error);\n                });\n        },\n        add: (data: VendorType, success: (id: string) => void, error: () => void) => {\n            firestore()\n                .collection('vendors')\n                .add(data)\n                .then((newCustomerDoc) => {\n                    success(newCustomerDoc.id);\n                })\n                .catch(() => {\n                    error();\n                });\n        },\n        delete: (customerId?: string, success?: () => void, error?: () => void) => {\n            firestore()\n                .collection('vendors')\n                .doc(customerId)\n                .delete()\n                .then(() => {\n                    success && success();\n                })\n                .catch((error) => {\n                    error && error();\n                });\n        },\n    },\n    city: {\n        get: (successCallback?: Function, errorCallback?: Function, startAfter?: any) => {\n            let query = firestore().collection('cities').orderBy('name');\n            query\n                .get()\n                .then((result) => {\n                    successCallback && successCallback(result);\n                })\n                .catch((error) => {\n                    errorCallback && errorCallback(error);\n                });\n        },\n        add: (data: CityType, success: (id: string) => void, error: () => void) => {\n            firestore()\n                .collection('cities')\n                .add(data)\n                .then((newCityDoc) => {\n                    success(newCityDoc.id);\n                })\n                .catch(() => {\n                    error();\n                });\n        },\n        delete: (cityId?: string, success?: () => void, error?: () => void) => {\n            firestore()\n                .collection('cities')\n                .doc(cityId)\n                .delete()\n                .then(() => {\n                    success && success();\n                })\n                .catch((error) => {\n                    error && error();\n                });\n        },\n    },\n    account: {\n        get: (successCallback?: Function, errorCallback?: Function, startAfter?: any) => {\n            let query = firestore().collection('accounts').limit(5).orderBy('createdAt', 'desc');\n            if (startAfter) {\n                query = query.startAfter(startAfter);\n            }\n            query\n                .get()\n                .then((result) => {\n                    successCallback && successCallback(result);\n                })\n                .catch((error) => {\n                    errorCallback && errorCallback(error);\n                });\n        },\n        add: (data: AccountType, success: (id: string) => void, error: () => void) => {\n            firestore()\n                .collection('accounts')\n                .add(data)\n                .then((newProductDoc) => {\n                    success(newProductDoc.id);\n                })\n                .catch(() => {\n                    error();\n                });\n        },\n        delete: (accountId?: string, success?: () => void, error?: () => void) => {\n            firestore()\n                .collection('accounts')\n                .doc(accountId)\n                .delete()\n                .then(() => {\n                    success && success();\n                })\n                .catch((error) => {\n                    error && error();\n                });\n        },\n    },\n    vendorPayment: {\n        get: (successCallback?: Function, errorCallback?: Function, startAfter?: any) => {\n            let query = firestore()\n                .collection('vendorPayments')\n                .limit(5)\n                .orderBy('createdAt', 'desc');\n            if (startAfter) {\n                query = query.startAfter(startAfter);\n            }\n            query\n                .get()\n                .then((result) => {\n                    successCallback && successCallback(result);\n                })\n                .catch((error) => {\n                    errorCallback && errorCallback(error);\n                });\n        },\n        add: (data: VendorPaymentType, success: (id: string) => void, error: () => void) => {\n            firestore()\n                .collection('vendorPayments')\n                .add(data)\n                .then((newVendorPaymentDoc) => {\n                    success(newVendorPaymentDoc.id);\n                })\n                .catch(() => {\n                    error();\n                });\n        },\n        delete: (vendorPaymentId?: string, success?: () => void, error?: () => void) => {\n            firestore()\n                .collection('vendorPayments')\n                .doc(vendorPaymentId)\n                .delete()\n                .then(() => {\n                    success && success();\n                })\n                .catch(() => {\n                    error && error();\n                });\n        },\n    },\n    customerPayment: {\n        get: (successCallback?: Function, errorCallback?: Function, startAfter?: any) => {\n            let query = firestore()\n                .collection('customerPayments')\n                .limit(5)\n                .orderBy('createdAt', 'desc');\n            if (startAfter) {\n                query = query.startAfter(startAfter);\n            }\n            query\n                .get()\n                .then((result) => {\n                    successCallback && successCallback(result);\n                })\n                .catch((error) => {\n                    errorCallback && errorCallback(error);\n                });\n        },\n        add: (data: CustomerPaymentType, success: (id: string) => void, error: () => void) => {\n            firestore()\n                .collection('customerPayments')\n                .add(data)\n                .then((newCustomerPaymentDoc) => {\n                    success(newCustomerPaymentDoc.id);\n                })\n                .catch(() => {\n                    error();\n                });\n        },\n        delete: (customerPaymentId?: string, success?: () => void, error?: () => void) => {\n            firestore()\n                .collection('customerPayments')\n                .doc(customerPaymentId)\n                .delete()\n                .then(() => {\n                    success && success();\n                })\n                .catch(() => {\n                    error && error();\n                });\n        },\n    },\n    employee: {\n        get: (successCallback?: Function, errorCallback?: Function, startAfter?: any) => {\n            let query = firestore().collection('employees').limit(5).orderBy('createdAt', 'desc');\n            if (startAfter) {\n                query = query.startAfter(startAfter);\n            }\n            query\n                .get()\n                .then((result) => {\n                    successCallback && successCallback(result);\n                })\n                .catch((error) => {\n                    errorCallback && errorCallback(error);\n                });\n        },\n        add: (data: EmployeeType, success: (id: string) => void, error: () => void) => {\n            firestore()\n                .collection('employees')\n                .add(data)\n                .then((newEmployeeDoc) => {\n                    success(newEmployeeDoc.id);\n                })\n                .catch(() => {\n                    error();\n                });\n        },\n        delete: (employeeId?: string, success?: () => void, error?: () => void) => {\n            firestore()\n                .collection('employees')\n                .doc(employeeId)\n                .delete()\n                .then(() => {\n                    success && success();\n                })\n                .catch((error) => {\n                    error && error();\n                });\n        },\n    },\n    counts: {\n        get: (getSnapshot: (snapshot: firestore.QuerySnapshot<firestore.DocumentData>) => void) => {\n            firestore()\n                .collection('counts')\n                .limit(1)\n                .onSnapshot((snapshot) => {\n                    getSnapshot(snapshot);\n                });\n        },\n    },\n};\n\nexport default api;\n","import {useState, useEffect} from 'react';\nimport api from '../../api';\nimport ProductType from '../../model/product';\nlet productDocs: any[] = [];\nconst useProductsPage = () => {\n    const [modalOpen, setModalOpen] = useState(false);\n    const [showSuccessMessage, setShowSuccessMessage] = useState(false);\n\n    const [rows, setRows] = useState<ProductType[]>([]);\n    const [deleting, setDeleting] = useState(false);\n    const [loading, setLoading] = useState(false);\n\n    const openProductModal = () => {\n        setModalOpen(true);\n    };\n\n    const closeProductModal = (created: boolean) => {\n        setModalOpen(false);\n        if (created) setShowSuccessMessage(true);\n    };\n\n    const hideSuccessMessage = () => {\n        setShowSuccessMessage(false);\n    };\n\n    const loadProducts = () => {\n        setLoading(true);\n        api.product.get(\n            (result: any) => {\n                productDocs = [];\n                const items: any[] = [];\n                result.docs.forEach((doc: any) => {\n                    productDocs.push(doc);\n                    const item: any = doc.data();\n                    item.id = doc.id;\n                    items.push(item);\n                });\n                setRows(items);\n                setLoading(false);\n            },\n            () => {\n                setLoading(false);\n            }\n        );\n    };\n\n    const loadMoreProducts = () => {\n        setLoading(true);\n        api.product.get(\n            (result: any) => {\n                const items: any[] = [];\n                result.docs.forEach((doc: any) => {\n                    productDocs.push(doc);\n                    const item: any = doc.data();\n                    item.id = doc.id;\n                    items.push(item);\n                });\n                setRows((prev) => prev.concat(items));\n                setLoading(false);\n            },\n            () => {\n                setLoading(false);\n            },\n            productDocs[productDocs.length - 1]\n        );\n    };\n\n    const addProduct = (newProduct: ProductType) => {\n        rows.push(newProduct);\n        rows.sort(\n            (a: ProductType, b: ProductType) =>\n                (b.createdAt ? b.createdAt : 0) - (a.createdAt ? a.createdAt : 0)\n        );\n        setRows(rows);\n    };\n\n    const deleteProduct = (index: number) => {\n        setDeleting(true);\n        api.product.delete(\n            rows[index].id,\n            () => {\n                productDocs.splice(index, 1);\n                const remaining = rows.filter((row, i) => i !== index);\n                setRows(remaining);\n                setDeleting(false);\n            },\n            () => {\n                setDeleting(false);\n            }\n        );\n    };\n\n    const editProduct = () => {};\n\n    useEffect(() => {\n        loadProducts();\n    }, []);\n\n    return {\n        openProductModal,\n        closeProductModal,\n        modalOpen,\n        showSuccessMessage,\n        hideSuccessMessage,\n        deleteProduct,\n        addProduct,\n        loadMoreProducts,\n        deleting,\n        loading,\n        rows,\n    };\n};\nexport default useProductsPage;\n","import React from 'react';\nimport {\n    Button as MuiButton,\n    ButtonProps as MuiButtonProps,\n    CircularProgress,\n    makeStyles,\n} from '@material-ui/core';\nimport {colorPalette} from '../../theme';\n\ninterface ButtonProps extends MuiButtonProps {\n    loading?: boolean;\n}\n\nconst Button = (props: ButtonProps) => {\n    const {loading, disabled, ...others} = {...props};\n    return (\n        <MuiButton\n            {...others}\n            disabled={loading || disabled}\n            startIcon={loading ? <CircularProgress size={'1rem'} /> : ''}\n        >\n            {props.children}\n        </MuiButton>\n    );\n};\n\nexport default Button;\n","import firebase from 'firebase';\nimport ProductType from '../../model/product';\nimport {useState} from 'react';\nimport api from '../../api';\n\nconst useProductModal = (\n    onAdd: (product: ProductType) => void,\n    close: (created: boolean) => void\n) => {\n    const [name, setName] = useState('');\n    const [details, setDetails] = useState('');\n    const [loading, setLoading] = useState(false);\n\n    const onNameChange = (value: string) => {\n        setName(value);\n    };\n\n    const onDetailsChange = (value: string) => {\n        setDetails(value);\n    };\n\n    const handleClick = () => {\n        if (!loading) {\n            setLoading(true);\n            const now = Date.now();\n            const newProduct: ProductType = {\n                name,\n                details,\n                quantity: 0,\n                rate: 0,\n                createdAt: now,\n                updatedAt: now,\n            };\n            api.product.add(\n                newProduct,\n                (id: string) => {\n                    setLoading(false);\n                    newProduct.id = id;\n                    onAdd(newProduct);\n                    close(true);\n                },\n                () => {\n                    setLoading(false);\n                    //ToDo failed to add data\n                }\n            );\n        }\n    };\n    return {\n        handleClick,\n        onNameChange,\n        onDetailsChange,\n        loading,\n    };\n};\n\nexport default useProductModal;\n","import React from 'react';\nimport {Dialog, DialogTitle, FormControl, TextField, Grid} from '@material-ui/core';\nimport Button from '../../components/Button/Button';\nimport useProductModal from './useProductModal';\nimport ProductType from '../../model/product';\n\nexport interface ProductModalType {\n    open: boolean;\n    close: (created: boolean) => void;\n    onAdd: (product: ProductType) => void;\n}\nconst ProductModal = (props: ProductModalType) => {\n    const {open, close, onAdd} = props;\n    const {handleClick, onNameChange, onDetailsChange, loading} = useProductModal(onAdd, close);\n    return (\n        <Dialog open={open}>\n            <DialogTitle>Add New Product</DialogTitle>\n            <Grid container spacing={2} style={{padding: 24}}>\n                <Grid item xs={12}>\n                    <Grid container spacing={2}>\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                label=\"Product Name\"\n                                onChange={(event) => {\n                                    onNameChange(event.target.value);\n                                }}\n                            />\n                        </Grid>\n\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                label=\"Details\"\n                                multiline\n                                rows={3}\n                                onChange={(event) => {\n                                    onDetailsChange(event.target.value);\n                                }}\n                            />\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid item xs={12}>\n                    <Grid container spacing={2} justify={'flex-end'}>\n                        <Grid item>\n                            <Button\n                                variant=\"text\"\n                                onClick={() => {\n                                    close(false);\n                                }}\n                            >\n                                Cancel\n                            </Button>\n                        </Grid>\n                        <Grid item>\n                            <Button onClick={handleClick} loading={loading}>\n                                Add Product\n                            </Button>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </Dialog>\n    );\n};\n\nexport default ProductModal;\n","import React from 'react';\nimport {Snackbar, SnackbarCloseReason} from '@material-ui/core';\nimport MuiAlert from '@material-ui/lab/Alert';\n\ninterface FloatingAlertProps {\n    message: string;\n    open: boolean;\n    severity: 'success' | 'info' | 'warning' | 'error';\n    onClose: () => void;\n}\nconst FloatingAlert = (props: FloatingAlertProps) => {\n    const onClose = (event: React.SyntheticEvent<any, Event>, reason: SnackbarCloseReason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        props.onClose();\n    };\n    return (\n        <Snackbar\n            open={props.open}\n            autoHideDuration={1000}\n            onClose={onClose}\n            anchorOrigin={{vertical: 'top', horizontal: 'right'}}\n        >\n            <MuiAlert variant=\"filled\" severity={props.severity}>\n                {props.message}\n            </MuiAlert>\n        </Snackbar>\n    );\n};\n\nexport default FloatingAlert;\n","export const colors = {\n    primary: {\n        blue: {\n            light: '#F0F8FF',\n            base: '#0066CC',\n            interaction: '#006BF0',\n            dark: '#003C66',\n        },\n        pink: {\n            light: '#FFF0F3',\n            base: '#FF4B73',\n            interaction: '#FF4B73',\n            dark: '#660016',\n        },\n        green: {\n            light: '#F2FFF0',\n            base: '#6ECC5A',\n            interaction: '#38A321',\n            dark: '#136600',\n        },\n        darkBlue: {\n            light: '#F0F4FF',\n            base: '#001E6E',\n            interaction: '#001E6E',\n            dark: '#000B29',\n        },\n    },\n    secondary: {\n        blue: {\n            light: '#1DCEFF',\n            dark: '#004EC9',\n        },\n        pink: {\n            light: '#FFAFB9',\n            dark: '#A61B56',\n        },\n        green: {\n            light: '#29A900',\n            dark: '#007600',\n        },\n    },\n    system: {\n        red: {\n            light: '#FFF5F8',\n            base: '#DC0043',\n            dark: '#66001F',\n        },\n        orange: {\n            light: '#FFF7F5',\n            base: '#D43500',\n            dark: '#661A00',\n        },\n        green: {\n            light: '#F0FFF0',\n            base: '#00814B',\n            dark: '#064D00',\n        },\n    },\n    grayscale: [\n        '#FFFFFF',\n        '#FCFCFC',\n        '#F5F5F5',\n        '#E1E1E1',\n        '#C8C8C8',\n        '#AFAFAF',\n        '#686868',\n        '#4B4B4B',\n        '#141414',\n    ],\n};\n","import {createMuiTheme, Theme} from '@material-ui/core/styles';\nimport {colors} from './colors';\n\nexport const colorPalette = {\n    primary: [\n        colors.primary.blue,\n        colors.primary.pink,\n        colors.primary.green,\n        colors.primary.darkBlue,\n    ],\n    secondary: [colors.secondary.blue, colors.secondary.pink, colors.secondary.green],\n    system: {\n        error: colors.system.red,\n        warning: colors.system.orange,\n        success: colors.system.green,\n    },\n    grayscale: colors.grayscale,\n};\n\nconst primary: Theme = createMuiTheme({\n    palette: {\n        primary: {\n            main: colorPalette.primary[0].interaction,\n        },\n    },\n    props: {\n        MuiTextField: {\n            variant: 'outlined',\n        },\n        MuiButton: {\n            color: 'primary',\n            variant: 'contained',\n        },\n    },\n});\n\nexport default primary;\n","import React from 'react';\n\nimport {Typography} from '@material-ui/core';\nimport {colorPalette} from '../../theme';\n\ninterface TypographyType {\n    color?: string;\n    children?: React.ReactNode;\n}\n\nexport const H2 = (props: TypographyType) => (\n    <Typography variant=\"h5\" style={{color: props.color ? props.color : colorPalette.grayscale[8]}}>\n        {props.children}\n    </Typography>\n);\n\nexport const H3 = (props: TypographyType) => (\n    <Typography variant=\"h6\" style={{color: props.color ? props.color : colorPalette.grayscale[8]}}>\n        {props.children}\n    </Typography>\n);\n\nexport const SH2 = (props: TypographyType) => (\n    <Typography\n        variant=\"h5\"\n        style={{color: props.color ? props.color : colorPalette.grayscale[8], fontWeight: 'bold'}}\n    >\n        {props.children}\n    </Typography>\n);\n\nexport const SH3 = (props: TypographyType) => (\n    <Typography\n        variant=\"h6\"\n        style={{color: props.color ? props.color : colorPalette.grayscale[8], fontWeight: 'bold'}}\n    >\n        {props.children}\n    </Typography>\n);\n\nexport const Body = (props: TypographyType) => (\n    <Typography\n        variant=\"body1\"\n        style={{color: props.color ? props.color : colorPalette.grayscale[8]}}\n    >\n        {props.children}\n    </Typography>\n);\n\nexport const Caption = (props: TypographyType) => (\n    <Typography\n        variant=\"caption\"\n        style={{color: props.color ? props.color : colorPalette.grayscale[8]}}\n    >\n        {props.children}\n    </Typography>\n);\n","import React, {useState, useEffect} from 'react';\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\nimport EditIcon from '@material-ui/icons/Edit';\nimport {\n    Paper,\n    TableContainer,\n    Table,\n    TableHead,\n    TableRow,\n    TableCell,\n    TableSortLabel,\n    TableBody,\n    TablePagination,\n    makeStyles,\n    IconButton,\n    Card,\n    Typography,\n    Grid,\n} from '@material-ui/core';\nimport {firestore} from 'firebase';\nimport api from '../../api';\nimport ProductType from '../../model/product';\nimport Button from '../../components/Button/Button';\nimport {H3, Body} from '../../components/Typography/Typography';\nimport {colorPalette} from '../../theme';\nimport InboxIcon from '@material-ui/icons/Inbox';\nimport MoreButton from '../../components/MoreButton/MoreButton';\n\nconst columns: string[] = ['Name', 'Average Rate', 'Quantity', 'Total', 'Details', 'Actions'];\n\nconst useStyles = makeStyles({\n    head: {},\n});\n\ninterface ProductsListType {\n    rows: ProductType[];\n    onRowDelete: Function;\n    deleting: boolean;\n    loading?: boolean;\n    allLoaded: boolean;\n    onLoadMore: () => void;\n}\n\nconst ProductsList = (props: ProductsListType) => {\n    const classes = useStyles();\n    return (\n        <div className={classes.head}>\n            {props.rows.map((item: ProductType, index) => (\n                <div\n                    style={{\n                        padding: 8,\n                        borderBottom: `1px solid ${colorPalette.grayscale[4]}`,\n                    }}\n                    key={index}\n                >\n                    <Grid container>\n                        <Grid item xs={1} style={{paddingTop: 8, paddingBottom: 8}}>\n                            <H3>\n                                <InboxIcon fontSize=\"small\" />\n                            </H3>\n                        </Grid>\n                        <Grid item xs={6} style={{paddingTop: 8, paddingBottom: 8}}>\n                            <H3>{item.name}</H3>\n                            <div style={{paddingTop: 4}}>\n                                <Body color={colorPalette.grayscale[7]}>{item.details}</Body>\n                            </div>\n                        </Grid>\n                        <Grid\n                            item\n                            style={{\n                                borderLeft: `1px solid ${colorPalette.grayscale[3]}`,\n                                paddingLeft: 16,\n                                paddingRight: 8,\n                                paddingTop: 16,\n                                paddingBottom: 16,\n                            }}\n                        >\n                            <Body color={colorPalette.grayscale[7]}>Rs.</Body>\n                            <Body color={colorPalette.grayscale[7]}>Qt.</Body>\n                            <Body color={colorPalette.primary[0].base}>Tl.</Body>\n                        </Grid>\n                        <Grid\n                            item\n                            xs={2}\n                            style={{\n                                paddingTop: 16,\n                                paddingBottom: 16,\n                            }}\n                        >\n                            <Body color={colorPalette.grayscale[7]}>{item.rate}</Body>\n                            <Body color={colorPalette.grayscale[7]}>{item.quantity}</Body>\n                            <Body color={colorPalette.primary[0].base}>\n                                {(item.quantity || 0) * (item.rate || 0)}\n                            </Body>\n                        </Grid>\n                        <Grid item xs={1}>\n                            <IconButton aria-label=\"edit\">\n                                <EditIcon fontSize=\"small\" />\n                            </IconButton>\n                            <IconButton\n                                aria-label=\"delete\"\n                                onClick={() => {\n                                    props.onRowDelete(index);\n                                }}\n                                disabled={props.deleting}\n                            >\n                                <DeleteOutlineIcon fontSize=\"small\" />\n                            </IconButton>\n                        </Grid>\n                    </Grid>\n                </div>\n            ))}\n            <Button\n                onClick={props.onLoadMore}\n                disabled={props.allLoaded}\n                loading={props.loading}\n                fullWidth\n                variant=\"text\"\n            >\n                Load More\n            </Button>\n        </div>\n    );\n};\n\nexport default ProductsList;\n","import React from 'react';\nimport {\n    Button as MuiButton,\n    ButtonProps as MuiButtonProps,\n    CircularProgress,\n    makeStyles,\n    FormControl,\n    TextField,\n    Typography,\n    IconButton,\n} from '@material-ui/core';\nimport {colorPalette} from '../../theme';\nimport AddCircleRoundedIcon from '@material-ui/icons/AddCircleRounded';\nimport {Body} from '../Typography/Typography';\n\nconst useStyles = makeStyles({\n    wrapper: {\n        height: '100vh',\n    },\n    content: {\n        overflowY: 'scroll',\n        height: 'calc(100vh - 96px - 56px - 16px)',\n    },\n    header: {\n        height: 96,\n        backgroundColor: colorPalette.primary[0].light,\n        borderBottom: `1px solid ${colorPalette.primary[0].base}`,\n        padding: 8,\n    },\n});\n\ninterface PageContainerProps {\n    children?: React.ReactNode;\n}\n\nexport const PageWrapper = (props: PageContainerProps) => {\n    const classes = useStyles();\n    return <div className={classes.wrapper}>{props.children}</div>;\n};\n\nexport const PageContent = (props: PageContainerProps) => {\n    const classes = useStyles();\n    return <div className={classes.content}>{props.children}</div>;\n};\n\ninterface PageHeaderProps {\n    openModal: () => void;\n    loadedRows: Number;\n    totalRows: Number;\n    placeholder: string;\n    label: string;\n}\n\nexport const PageHeader = (props: PageHeaderProps) => {\n    const classes = useStyles();\n    return (\n        <div className={classes.header}>\n            <FormControl fullWidth>\n                <TextField\n                    variant=\"outlined\"\n                    placeholder={props.placeholder}\n                    style={{backgroundColor: 'white'}}\n                />\n            </FormControl>\n            <Body>\n                Showing {props.loadedRows} out of {props.totalRows} {props.label}\n                <IconButton onClick={props.openModal}>\n                    <AddCircleRoundedIcon color=\"primary\" />\n                </IconButton>\n            </Body>\n        </div>\n    );\n};\n","import React from 'react';\nimport ProductsTable from '../../layouts/ProductsTable/ProductsTable';\nimport {Typography, Grid, TextField, FormControl, makeStyles, IconButton} from '@material-ui/core';\nimport useProductsPage from './useProductsPage';\nimport ProductModal from '../../layouts/ProductModal/ProductModal';\nimport FloatingAlert from '../../components/FloatingAlert/FloatingAlert';\nimport ProductType from '../../model/product';\nimport ProductsList from '../../layouts/ProductsList/ProductsList';\nimport Button from '../../components/Button/Button';\nimport {colorPalette} from '../../theme';\nimport AddCircleRoundedIcon from '@material-ui/icons/AddCircleRounded';\nimport {PageWrapper, PageContent, PageHeader} from '../../components/PageContainer/PageContainer';\n\ninterface ProductsPageType {\n    numberOfProducts: number;\n}\n\nconst useStyles = makeStyles({\n    wrapper: {\n        height: '100vh',\n    },\n    content: {\n        overflowY: 'scroll',\n        height: 'calc(100vh - 110px - 56px - 16px)',\n    },\n});\n\nconst ProductsPage = (props: ProductsPageType) => {\n    const {\n        openProductModal,\n        closeProductModal,\n        modalOpen,\n        showSuccessMessage,\n        hideSuccessMessage,\n        deleteProduct,\n        loadMoreProducts,\n        addProduct,\n        deleting,\n        loading,\n        rows,\n    } = useProductsPage();\n\n    const classes = useStyles();\n\n    return (\n        <>\n            <PageWrapper>\n                <PageHeader\n                    placeholder=\"Search Products\"\n                    loadedRows={rows.length}\n                    totalRows={props.numberOfProducts}\n                    openModal={openProductModal}\n                    label=\"products\"\n                />\n                <PageContent>\n                    <ProductsList\n                        rows={rows}\n                        onRowDelete={deleteProduct}\n                        deleting={deleting}\n                        onLoadMore={loadMoreProducts}\n                        allLoaded={rows.length === props.numberOfProducts}\n                        loading={loading}\n                    />\n                </PageContent>\n            </PageWrapper>\n            <FloatingAlert\n                severity=\"success\"\n                open={showSuccessMessage}\n                onClose={hideSuccessMessage}\n                message=\"Product added successfully\"\n            />\n            <ProductModal\n                open={modalOpen}\n                close={closeProductModal}\n                aria-labelledby=\"product_modal\"\n                onAdd={addProduct}\n            />\n        </>\n    );\n};\n\nexport default ProductsPage;\n","import {useState, useEffect} from 'react';\nimport api from '../../api';\nimport CustomerType from '../../model/customer';\nimport CityType from '../../model/city';\nlet customerDocs: any[] = [];\nconst useCustomersPage = () => {\n    const [modalOpen, setModalOpen] = useState(false);\n    const [showSuccessMessage, setShowSuccessMessage] = useState(false);\n\n    const [rows, setRows] = useState<CustomerType[]>([]);\n    const [cities, setCities] = useState<CityType[]>([]);\n    const [deleting, setDeleting] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [loadingCities, setLoadingCities] = useState(false);\n\n    const openCustomerModal = () => {\n        setModalOpen(true);\n    };\n\n    const closeCustomerModal = (created: boolean) => {\n        setModalOpen(false);\n        if (created) setShowSuccessMessage(true);\n    };\n\n    const hideSuccessMessage = () => {\n        setShowSuccessMessage(false);\n    };\n\n    const loadCustomers = () => {\n        setLoading(true);\n        api.customer.get(\n            (result: any) => {\n                customerDocs = [];\n                const items: any[] = [];\n                result.docs.forEach((doc: any) => {\n                    customerDocs.push(doc);\n                    const item: any = doc.data();\n                    item.id = doc.id;\n                    items.push(item);\n                });\n                setRows(items);\n                setLoading(false);\n            },\n            () => {\n                setLoading(false);\n            }\n        );\n    };\n\n    const loadCities = () => {\n        setLoadingCities(true);\n        api.city.get(\n            (result: any) => {\n                const items: any[] = [];\n                console.log('total', result.docs.length);\n                result.docs.forEach((doc: any) => {\n                    const item: any = doc.data();\n                    item.id = doc.id;\n                    items.push(item);\n                });\n                setCities(items);\n                setLoadingCities(false);\n            },\n            () => {\n                setLoadingCities(false);\n            }\n        );\n    };\n\n    const addCity = (name: string) => {\n        const now = Date.now();\n        const newCity: CityType = {\n            name,\n            createdAt: now,\n            updatedAt: now,\n        };\n\n        cities.push(newCity);\n        setCities(cities);\n    };\n\n    const loadMoreCustomers = () => {\n        setLoading(true);\n        api.customer.get(\n            (result: any) => {\n                const items: any[] = [];\n                result.docs.forEach((doc: any) => {\n                    customerDocs.push(doc);\n                    const item: any = doc.data();\n                    item.id = doc.id;\n                    items.push(item);\n                });\n                setRows((prev) => prev.concat(items));\n                setLoading(false);\n            },\n            () => {\n                setLoading(false);\n            },\n            customerDocs[customerDocs.length - 1]\n        );\n    };\n\n    const addCustomer = (newCustomer: CustomerType) => {\n        rows.push(newCustomer);\n        rows.sort(\n            (a: CustomerType, b: CustomerType) =>\n                (b.createdAt ? b.createdAt : 0) - (a.createdAt ? a.createdAt : 0)\n        );\n        setRows(rows);\n    };\n\n    const deleteCustomer = (index: number) => {\n        setDeleting(true);\n        api.customer.delete(\n            rows[index].id,\n            () => {\n                customerDocs.splice(index, 1);\n                const remaining = rows.filter((row, i) => i !== index);\n                setRows(remaining);\n                setDeleting(false);\n            },\n            () => {\n                setDeleting(false);\n            }\n        );\n    };\n\n    const editCustomer = () => {};\n\n    useEffect(() => {\n        loadCustomers();\n        loadCities();\n    }, []);\n\n    return {\n        openCustomerModal,\n        closeCustomerModal,\n        modalOpen,\n        showSuccessMessage,\n        hideSuccessMessage,\n        deleteCustomer,\n        addCustomer,\n        loadMoreCustomers,\n        deleting,\n        loading,\n        rows,\n        cities,\n        loadingCities,\n        addCity,\n    };\n};\nexport default useCustomersPage;\n","import CustomerType from '../../model/customer';\nimport {useState} from 'react';\nimport api from '../../api';\nimport CityType from '../../model/city';\n\nconst useCustomerModal = (\n    onAdd: (customer: CustomerType) => void,\n    close: (created: boolean) => void\n) => {\n    const [name, setName] = useState('');\n    const [mobile, setMobile] = useState('');\n    const [city, setCity] = useState<CityType>();\n    const [loading, setLoading] = useState(false);\n\n    const onNameChange = (value: string) => {\n        setName(value);\n    };\n\n    const onMobileChange = (value: string) => {\n        setMobile(value);\n    };\n\n    const handleClick = () => {\n        if (!loading) {\n            setLoading(true);\n            const now = Date.now();\n            const newCustomer: CustomerType = {\n                name,\n                mobile,\n                city: {name: city?.name || 'Dummy City', id: city?.id},\n                debt: 0,\n                createdAt: now,\n                updatedAt: now,\n            };\n            api.customer.add(\n                newCustomer,\n                (id: string) => {\n                    setLoading(false);\n                    newCustomer.id = id;\n                    onAdd(newCustomer);\n                    close(true);\n                },\n                () => {\n                    setLoading(false);\n                    //ToDo failed to add data\n                }\n            );\n        }\n    };\n    return {\n        handleClick,\n        onNameChange,\n        onMobileChange,\n        city,\n        loading,\n        setCity,\n    };\n};\n\nexport default useCustomerModal;\n","import React from 'react';\nimport {Dialog, DialogTitle, FormControl, TextField, Grid} from '@material-ui/core';\nimport Button from '../../components/Button/Button';\nimport useCustomerModal from './useCustomerModal';\nimport CustomerType from '../../model/customer';\nimport CityType from '../../model/city';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\n\nexport interface CustomerModalType {\n    open: boolean;\n    close: (created: boolean) => void;\n    onAdd: (product: CustomerType) => void;\n    cities: CityType[];\n}\nconst CustomerModal = (props: CustomerModalType) => {\n    const {open, close, onAdd} = props;\n    const {handleClick, onNameChange, setCity, onMobileChange, loading, city} = useCustomerModal(\n        onAdd,\n        close\n    );\n    return (\n        <Dialog open={open}>\n            <DialogTitle>Add New Customer</DialogTitle>\n            <Grid container spacing={2} style={{padding: 24}}>\n                <Grid item xs={12}>\n                    <Grid container spacing={2}>\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                label=\"Customer Name\"\n                                onChange={(event) => {\n                                    onNameChange(event.target.value);\n                                }}\n                            />\n                        </Grid>\n\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                label=\"Mobile Number\"\n                                onChange={(event) => {\n                                    onMobileChange(event.target.value);\n                                }}\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <Autocomplete\n                                id=\"city-search\"\n                                options={props.cities}\n                                getOptionLabel={(option) => {\n                                    return option.name;\n                                }}\n                                // style={{width: 300}}\n                                renderInput={(params) => (\n                                    <TextField {...params} label=\"City\" variant=\"outlined\" />\n                                )}\n                                onChange={(event: any, value: CityType | null) => {\n                                    value && setCity(value);\n                                }}\n                            />\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid item xs={12}>\n                    <Grid container spacing={2} justify={'flex-end'}>\n                        <Grid item>\n                            <Button\n                                variant=\"text\"\n                                onClick={() => {\n                                    close(false);\n                                }}\n                            >\n                                Cancel\n                            </Button>\n                        </Grid>\n                        <Grid item>\n                            <Button onClick={handleClick} loading={loading}>\n                                Add Customer\n                            </Button>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </Dialog>\n    );\n};\n\nexport default CustomerModal;\n","import React, {useState, useEffect} from 'react';\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\nimport EditIcon from '@material-ui/icons/Edit';\nimport {\n    Paper,\n    TableContainer,\n    Table,\n    TableHead,\n    TableRow,\n    TableCell,\n    TableSortLabel,\n    TableBody,\n    TablePagination,\n    makeStyles,\n    IconButton,\n    Card,\n    Typography,\n    Grid,\n} from '@material-ui/core';\nimport {firestore} from 'firebase';\nimport api from '../../api';\nimport CustomerType from '../../model/customer';\nimport Button from '../../components/Button/Button';\nimport {H3, Body, SH2, SH3, Caption} from '../../components/Typography/Typography';\nimport {colorPalette} from '../../theme';\nimport InboxIcon from '@material-ui/icons/Inbox';\nimport CallRoundedIcon from '@material-ui/icons/CallRounded';\nimport PinDropRoundedIcon from '@material-ui/icons/PinDropRounded';\n\nconst columns: string[] = ['Name', 'Average Rate', 'Quantity', 'Total', 'Details', 'Actions'];\n\ninterface CustomersListType {\n    rows: CustomerType[];\n    onRowDelete: Function;\n    deleting: boolean;\n    loading?: boolean;\n    allLoaded: boolean;\n    onLoadMore: () => void;\n}\n\nconst CustomersList = (props: CustomersListType) => {\n    return (\n        <div>\n            {props.rows.map((item: CustomerType, index) => (\n                <div\n                    style={{\n                        padding: 8,\n                        borderBottom: `1px solid ${colorPalette.grayscale[4]}`,\n                    }}\n                    key={index}\n                >\n                    <Grid container>\n                        <Grid item xs={1} style={{paddingTop: 8, paddingBottom: 8}}>\n                            <H3>\n                                <InboxIcon fontSize=\"small\" />\n                            </H3>\n                        </Grid>\n                        <Grid item xs={10} style={{paddingTop: 8, paddingBottom: 8}}>\n                            <H3>{item.name}</H3>\n                            <div style={{paddingTop: 4}}>\n                                <Grid container alignItems=\"baseline\" spacing={1}>\n                                    <Grid item>\n                                        <Caption>Debt:</Caption>\n                                    </Grid>\n                                    <Grid item>\n                                        <SH2 color={colorPalette.primary[2].interaction}>\n                                            {item.debt}\n                                        </SH2>\n                                    </Grid>\n                                </Grid>\n                            </div>\n                        </Grid>\n\n                        <Grid item xs={1}>\n                            <IconButton aria-label=\"edit\">\n                                <EditIcon fontSize=\"small\" />\n                            </IconButton>\n                            <IconButton\n                                aria-label=\"delete\"\n                                onClick={() => {\n                                    props.onRowDelete(index);\n                                }}\n                                disabled={props.deleting}\n                            >\n                                <DeleteOutlineIcon fontSize=\"small\" />\n                            </IconButton>\n                        </Grid>\n                    </Grid>\n                    <Grid container>\n                        <Grid item xs={6}>\n                            <Grid container justify=\"center\" spacing={1}>\n                                <Grid item>\n                                    <CallRoundedIcon\n                                        fontSize=\"small\"\n                                        style={{color: colorPalette.grayscale[7]}}\n                                    />\n                                </Grid>\n                                <Grid item>\n                                    <Body color={colorPalette.grayscale[7]}>{item.mobile}</Body>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <Grid container justify=\"center\" spacing={1}>\n                                <Grid item>\n                                    <PinDropRoundedIcon\n                                        fontSize=\"small\"\n                                        style={{color: colorPalette.grayscale[7]}}\n                                    />\n                                </Grid>\n                                <Grid item>\n                                    <Body color={colorPalette.grayscale[7]}>{item.city?.name}</Body>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                </div>\n            ))}\n            <Button\n                onClick={props.onLoadMore}\n                disabled={props.allLoaded}\n                loading={props.loading}\n                fullWidth\n                variant=\"text\"\n            >\n                Load More\n            </Button>\n        </div>\n    );\n};\n\nexport default CustomersList;\n","import React from 'react';\nimport CustomersTable from '../../layouts/CustomersTable/CustomersTable';\nimport {Typography, Grid, TextField, FormControl, Button} from '@material-ui/core';\nimport useCustomersPage from './useCustomersPage';\nimport CustomerModal from '../../layouts/CustomerModal/CustomerModal';\nimport FloatingAlert from '../../components/FloatingAlert/FloatingAlert';\nimport CustomerType from '../../model/customer';\nimport {PageWrapper, PageHeader, PageContent} from '../../components/PageContainer/PageContainer';\nimport CustomersList from '../../layouts/CustomersList/CustomersList';\n\ninterface CustomersPageType {\n    numberOfCustomers: number;\n}\nconst CustomersPage = (props: CustomersPageType) => {\n    const {\n        openCustomerModal,\n        closeCustomerModal,\n        modalOpen,\n        showSuccessMessage,\n        hideSuccessMessage,\n        deleteCustomer,\n        loadMoreCustomers,\n        addCustomer,\n        deleting,\n        loading,\n        rows,\n        cities,\n        loadingCities,\n        addCity,\n    } = useCustomersPage();\n    return (\n        <>\n            <PageWrapper>\n                <PageHeader\n                    placeholder=\"Search Customers\"\n                    loadedRows={rows.length}\n                    totalRows={props.numberOfCustomers}\n                    openModal={openCustomerModal}\n                    label=\"customers\"\n                />\n                <PageContent>\n                    <CustomersList\n                        rows={rows}\n                        onRowDelete={deleteCustomer}\n                        deleting={deleting}\n                        onLoadMore={loadMoreCustomers}\n                        allLoaded={rows.length === props.numberOfCustomers}\n                        loading={loading}\n                    />\n                </PageContent>\n            </PageWrapper>\n            <FloatingAlert\n                severity=\"success\"\n                open={showSuccessMessage}\n                onClose={hideSuccessMessage}\n                message=\"Customer added successfully\"\n            />\n            <CustomerModal\n                open={modalOpen}\n                close={closeCustomerModal}\n                aria-labelledby=\"customer_modal\"\n                onAdd={addCustomer}\n                cities={cities}\n            />\n        </>\n    );\n};\n\nexport default CustomersPage;\n","import {useState, useEffect} from 'react';\nimport api from '../../api';\nimport CityType from '../../model/city';\nlet cityDocs: any[] = [];\nconst useCitiesPage = () => {\n    const [showSuccessMessage, setShowSuccessMessage] = useState(false);\n    const [city, setCity] = useState('');\n    const [rows, setRows] = useState<CityType[]>([]);\n    const [deleting, setDeleting] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [adding, setAdding] = useState(false);\n\n    const hideSuccessMessage = () => {\n        setShowSuccessMessage(false);\n    };\n\n    const loadCities = () => {\n        setLoading(true);\n        api.city.get(\n            (result: any) => {\n                const items: any[] = [];\n                console.log('total', result.docs.length);\n                result.docs.forEach((doc: any) => {\n                    const item: any = doc.data();\n                    item.id = doc.id;\n                    items.push(item);\n                });\n                setRows(items);\n                setLoading(false);\n            },\n            () => {\n                setLoading(false);\n            }\n        );\n    };\n\n    const addCity = (city: string) => {\n        setAdding(true);\n        const now = Date.now();\n        const newCity: CityType = {\n            name: city,\n            createdAt: now,\n            updatedAt: now,\n        };\n        api.city.add(\n            newCity,\n            (id) => {\n                setAdding(false);\n                newCity.id = id;\n                setRows((oldRows) => oldRows.concat(newCity));\n                setCity('');\n            },\n            () => {\n                setAdding(false);\n            }\n        );\n    };\n\n    const deleteCity = (index: number) => {\n        setDeleting(true);\n        api.city.delete(\n            rows[index].id,\n            () => {\n                cityDocs.splice(index, 1);\n                const remaining = rows.filter((row, i) => i !== index);\n                setRows(remaining);\n                setDeleting(false);\n            },\n            () => {\n                setDeleting(false);\n            }\n        );\n    };\n\n    const editCity = () => {};\n\n    useEffect(() => {\n        loadCities();\n    }, []);\n\n    return {\n        showSuccessMessage,\n        hideSuccessMessage,\n        deleteCity,\n        addCity,\n        deleting,\n        loading,\n        adding,\n        rows,\n        setCity,\n        city,\n    };\n};\nexport default useCitiesPage;\n","import React from 'react';\nimport {\n    Typography,\n    Grid,\n    TextField,\n    FormControl,\n    List,\n    ListItem,\n    ListItemText,\n    CircularProgress,\n    IconButton,\n} from '@material-ui/core';\nimport useCitiesPage from './useCitiesPage';\nimport FloatingAlert from '../../components/FloatingAlert/FloatingAlert';\nimport CityType from '../../model/city';\nimport Button from '../../components/Button/Button';\nimport {PageWrapper, PageHeader, PageContent} from '../../components/PageContainer/PageContainer';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\n\ninterface CitiesPageType {\n    numberOfCities: number;\n}\nconst CitiesPage = (props: CitiesPageType) => {\n    const {\n        showSuccessMessage,\n        hideSuccessMessage,\n        deleteCity,\n        addCity,\n        deleting,\n        loading,\n        rows,\n        setCity,\n        adding,\n        city,\n    } = useCitiesPage();\n    return (\n        <>\n            <PageWrapper>\n                <PageHeader\n                    placeholder=\"Search Cities\"\n                    loadedRows={rows.length}\n                    totalRows={rows.length}\n                    openModal={() => {}}\n                    label=\"cities\"\n                />\n                <PageContent>\n                    <>\n                        {loading && <CircularProgress />}\n                        <List>\n                            {rows.map((city, index) => (\n                                <ListItem key={index}>\n                                    <Grid container alignItems=\"center\">\n                                        <Grid item xs={8}>\n                                            <ListItemText>{city.name}</ListItemText>\n                                        </Grid>\n                                        <Grid item xs={2}>\n                                            <IconButton>\n                                                <EditIcon />\n                                            </IconButton>\n                                        </Grid>\n                                        <Grid item xs={2}>\n                                            <IconButton\n                                                onClick={() => {\n                                                    deleteCity(index);\n                                                }}\n                                            >\n                                                <DeleteOutlineIcon />\n                                            </IconButton>\n                                        </Grid>\n                                    </Grid>\n                                </ListItem>\n                            ))}\n                        </List>\n                    </>\n                </PageContent>\n            </PageWrapper>\n\n            {/* <FloatingAlert\n                severity=\"success\"\n                open={showSuccessMessage}\n                onClose={hideSuccessMessage}\n                message=\"City added successfully\"\n            /> */}\n        </>\n    );\n};\n\nexport default CitiesPage;\n","import {useState, useEffect} from 'react';\nimport api from '../../api';\nimport VendorType from '../../model/vendor';\nimport CityType from '../../model/city';\nlet vendorDocs: any[] = [];\nconst useVendorsPage = () => {\n    const [modalOpen, setModalOpen] = useState(false);\n    const [showSuccessMessage, setShowSuccessMessage] = useState(false);\n\n    const [rows, setRows] = useState<VendorType[]>([]);\n    const [cities, setCities] = useState<CityType[]>([]);\n    const [deleting, setDeleting] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [loadingCities, setLoadingCities] = useState(false);\n\n    const openVendorModal = () => {\n        setModalOpen(true);\n    };\n\n    const closeVendorModal = (created: boolean) => {\n        setModalOpen(false);\n        if (created) setShowSuccessMessage(true);\n    };\n\n    const hideSuccessMessage = () => {\n        setShowSuccessMessage(false);\n    };\n\n    const loadVendors = () => {\n        setLoading(true);\n        api.vendor.get(\n            (result: any) => {\n                vendorDocs = [];\n                const items: any[] = [];\n                result.docs.forEach((doc: any) => {\n                    vendorDocs.push(doc);\n                    const item: any = doc.data();\n                    item.id = doc.id;\n                    items.push(item);\n                });\n                setRows(items);\n                setLoading(false);\n            },\n            () => {\n                setLoading(false);\n            }\n        );\n    };\n\n    const loadCities = () => {\n        setLoadingCities(true);\n        api.city.get(\n            (result: any) => {\n                const items: any[] = [];\n                console.log('total', result.docs.length);\n                result.docs.forEach((doc: any) => {\n                    const item: any = doc.data();\n                    item.id = doc.id;\n                    items.push(item);\n                });\n                setCities(items);\n                setLoadingCities(false);\n            },\n            () => {\n                setLoadingCities(false);\n            }\n        );\n    };\n\n    const addCity = (name: string) => {\n        const now = Date.now();\n        const newCity: CityType = {\n            name,\n            createdAt: now,\n            updatedAt: now,\n        };\n\n        cities.push(newCity);\n        setCities(cities);\n    };\n\n    const loadMoreVendors = () => {\n        setLoading(true);\n        api.vendor.get(\n            (result: any) => {\n                const items: any[] = [];\n                result.docs.forEach((doc: any) => {\n                    vendorDocs.push(doc);\n                    const item: any = doc.data();\n                    item.id = doc.id;\n                    items.push(item);\n                });\n                setRows((prev) => prev.concat(items));\n                setLoading(false);\n            },\n            () => {\n                setLoading(false);\n            },\n            vendorDocs[vendorDocs.length - 1]\n        );\n    };\n\n    const addVendor = (newVendor: VendorType) => {\n        rows.push(newVendor);\n        rows.sort(\n            (a: VendorType, b: VendorType) =>\n                (b.createdAt ? b.createdAt : 0) - (a.createdAt ? a.createdAt : 0)\n        );\n        setRows(rows);\n    };\n\n    const deleteVendor = (index: number) => {\n        setDeleting(true);\n        api.vendor.delete(\n            rows[index].id,\n            () => {\n                vendorDocs.splice(index, 1);\n                const remaining = rows.filter((row, i) => i !== index);\n                setRows(remaining);\n                setDeleting(false);\n            },\n            () => {\n                setDeleting(false);\n            }\n        );\n    };\n\n    const editVendor = () => {};\n\n    useEffect(() => {\n        loadVendors();\n        loadCities();\n    }, []);\n\n    return {\n        openVendorModal,\n        closeVendorModal,\n        modalOpen,\n        showSuccessMessage,\n        hideSuccessMessage,\n        deleteVendor,\n        addVendor,\n        loadMoreVendors,\n        deleting,\n        loading,\n        rows,\n        cities,\n        loadingCities,\n        addCity,\n    };\n};\nexport default useVendorsPage;\n","import VendorType from '../../model/vendor';\nimport {useState} from 'react';\nimport api from '../../api';\nimport CityType from '../../model/city';\n\nconst useVendorModal = (onAdd: (vendor: VendorType) => void, close: (created: boolean) => void) => {\n    const [name, setName] = useState('');\n    const [mobile, setMobile] = useState('');\n    const [city, setCity] = useState<CityType>();\n    const [loading, setLoading] = useState(false);\n\n    const onNameChange = (value: string) => {\n        setName(value);\n    };\n\n    const onMobileChange = (value: string) => {\n        setMobile(value);\n    };\n\n    const handleClick = () => {\n        if (!loading) {\n            setLoading(true);\n            const now = Date.now();\n            const newVendor: VendorType = {\n                name,\n                mobile,\n                city: {name: city?.name || 'Dummy City', id: city?.id},\n                debt: 0,\n                createdAt: now,\n                updatedAt: now,\n            };\n            api.vendor.add(\n                newVendor,\n                (id: string) => {\n                    setLoading(false);\n                    newVendor.id = id;\n                    onAdd(newVendor);\n                    close(true);\n                },\n                () => {\n                    setLoading(false);\n                    //ToDo failed to add data\n                }\n            );\n        }\n    };\n    return {\n        handleClick,\n        onNameChange,\n        onMobileChange,\n        city,\n        loading,\n        setCity,\n    };\n};\n\nexport default useVendorModal;\n","import React from 'react';\nimport {Dialog, DialogTitle, FormControl, TextField, Grid} from '@material-ui/core';\nimport Button from '../../components/Button/Button';\nimport useVendorModal from './useVendorModal';\nimport VendorType from '../../model/vendor';\nimport CityType from '../../model/city';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\n\nexport interface VendorModalType {\n    open: boolean;\n    close: (created: boolean) => void;\n    onAdd: (product: VendorType) => void;\n    addCity: (name: string) => void;\n    cities: CityType[];\n}\nconst VendorModal = (props: VendorModalType) => {\n    const {open, close, onAdd} = props;\n    const {handleClick, onNameChange, setCity, onMobileChange, loading, city} = useVendorModal(\n        onAdd,\n        close\n    );\n    return (\n        <Dialog open={open}>\n            <DialogTitle>Add New Vendor</DialogTitle>\n            <Grid container spacing={2} style={{padding: 24}}>\n                <Grid item xs={12}>\n                    <Grid container spacing={2}>\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                label=\"Vendor Name\"\n                                onChange={(event) => {\n                                    onNameChange(event.target.value);\n                                }}\n                            />\n                        </Grid>\n\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                label=\"Mobile Number\"\n                                onChange={(event) => {\n                                    onMobileChange(event.target.value);\n                                }}\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <Autocomplete\n                                id=\"city-search\"\n                                options={props.cities}\n                                getOptionLabel={(option) => {\n                                    return option.name;\n                                }}\n                                // style={{width: 300}}\n                                renderInput={(params) => (\n                                    <TextField {...params} label=\"City\" variant=\"outlined\" />\n                                )}\n                                onChange={(event: any, value: CityType | null) => {\n                                    value && setCity(value);\n                                }}\n                            />\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid item xs={12}>\n                    <Grid container spacing={2} justify={'flex-end'}>\n                        <Grid item>\n                            <Button\n                                variant=\"text\"\n                                onClick={() => {\n                                    close(false);\n                                }}\n                            >\n                                Cancel\n                            </Button>\n                        </Grid>\n                        <Grid item>\n                            <Button onClick={handleClick} loading={loading}>\n                                Add Vendor\n                            </Button>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </Dialog>\n    );\n};\n\nexport default VendorModal;\n","import React, {useState, useEffect} from 'react';\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\nimport EditIcon from '@material-ui/icons/Edit';\nimport {\n    Paper,\n    TableContainer,\n    Table,\n    TableHead,\n    TableRow,\n    TableCell,\n    TableSortLabel,\n    TableBody,\n    TablePagination,\n    makeStyles,\n    IconButton,\n    Card,\n    Typography,\n    Grid,\n} from '@material-ui/core';\nimport {firestore} from 'firebase';\nimport api from '../../api';\nimport VendorType from '../../model/vendor';\nimport Button from '../../components/Button/Button';\nimport {H3, Body, SH2, SH3, Caption} from '../../components/Typography/Typography';\nimport {colorPalette} from '../../theme';\nimport InboxIcon from '@material-ui/icons/Inbox';\nimport CallRoundedIcon from '@material-ui/icons/CallRounded';\nimport PinDropRoundedIcon from '@material-ui/icons/PinDropRounded';\n\nconst columns: string[] = ['Name', 'Average Rate', 'Quantity', 'Total', 'Details', 'Actions'];\n\ninterface VendorsListType {\n    rows: VendorType[];\n    onRowDelete: Function;\n    deleting: boolean;\n    loading?: boolean;\n    allLoaded: boolean;\n    onLoadMore: () => void;\n}\n\nconst VendorsList = (props: VendorsListType) => {\n    return (\n        <div>\n            {props.rows.map((item: VendorType, index) => (\n                <div\n                    style={{\n                        padding: 8,\n                        borderBottom: `1px solid ${colorPalette.grayscale[4]}`,\n                    }}\n                    key={index}\n                >\n                    <Grid container>\n                        <Grid item xs={1} style={{paddingTop: 8, paddingBottom: 8}}>\n                            <H3>\n                                <InboxIcon fontSize=\"small\" />\n                            </H3>\n                        </Grid>\n                        <Grid item xs={10} style={{paddingTop: 8, paddingBottom: 8}}>\n                            <H3>{item.name}</H3>\n                            <div style={{paddingTop: 4}}>\n                                <Grid container alignItems=\"baseline\" spacing={1}>\n                                    <Grid item>\n                                        <Caption>Debt:</Caption>\n                                    </Grid>\n                                    <Grid item>\n                                        <SH2 color={colorPalette.primary[1].interaction}>\n                                            {item.debt}\n                                        </SH2>\n                                    </Grid>\n                                </Grid>\n                            </div>\n                        </Grid>\n\n                        <Grid item xs={1}>\n                            <IconButton aria-label=\"edit\">\n                                <EditIcon fontSize=\"small\" />\n                            </IconButton>\n                            <IconButton\n                                aria-label=\"delete\"\n                                onClick={() => {\n                                    props.onRowDelete(index);\n                                }}\n                                disabled={props.deleting}\n                            >\n                                <DeleteOutlineIcon fontSize=\"small\" />\n                            </IconButton>\n                        </Grid>\n                    </Grid>\n                    <Grid container>\n                        <Grid item xs={6}>\n                            <Grid container justify=\"center\" spacing={1}>\n                                <Grid item>\n                                    <CallRoundedIcon\n                                        fontSize=\"small\"\n                                        style={{color: colorPalette.grayscale[7]}}\n                                    />\n                                </Grid>\n                                <Grid item>\n                                    <Body color={colorPalette.grayscale[7]}>{item.mobile}</Body>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <Grid container justify=\"center\" spacing={1}>\n                                <Grid item>\n                                    <PinDropRoundedIcon\n                                        fontSize=\"small\"\n                                        style={{color: colorPalette.grayscale[7]}}\n                                    />\n                                </Grid>\n                                <Grid item>\n                                    <Body color={colorPalette.grayscale[7]}>{item.city?.name}</Body>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                </div>\n            ))}\n            <Button\n                onClick={props.onLoadMore}\n                disabled={props.allLoaded}\n                loading={props.loading}\n                fullWidth\n                variant=\"text\"\n            >\n                Load More\n            </Button>\n        </div>\n    );\n};\n\nexport default VendorsList;\n","import React from 'react';\nimport VendorsTable from '../../layouts/VendorsTable/VendorsTable';\nimport {Typography, Grid, TextField, FormControl, Button} from '@material-ui/core';\nimport useVendorsPage from './useVendorsPage';\nimport VendorModal from '../../layouts/VendorModal/VendorModal';\nimport FloatingAlert from '../../components/FloatingAlert/FloatingAlert';\nimport VendorType from '../../model/vendor';\nimport VendorsList from '../../layouts/VendorsList/VendorsList';\nimport {PageWrapper, PageHeader, PageContent} from '../../components/PageContainer/PageContainer';\n\ninterface VendorsPageType {\n    numberOfVendors: number;\n}\nconst VendorsPage = (props: VendorsPageType) => {\n    const {\n        openVendorModal,\n        closeVendorModal,\n        modalOpen,\n        showSuccessMessage,\n        hideSuccessMessage,\n        deleteVendor,\n        loadMoreVendors,\n        addVendor,\n        deleting,\n        loading,\n        rows,\n        cities,\n        loadingCities,\n        addCity,\n    } = useVendorsPage();\n    return (\n        <>\n            <PageWrapper>\n                <PageHeader\n                    placeholder=\"Search Vendors\"\n                    loadedRows={rows.length}\n                    totalRows={props.numberOfVendors}\n                    openModal={openVendorModal}\n                    label=\"vendors\"\n                />\n                <PageContent>\n                    <VendorsList\n                        rows={rows}\n                        onRowDelete={deleteVendor}\n                        deleting={deleting}\n                        onLoadMore={loadMoreVendors}\n                        allLoaded={rows.length === props.numberOfVendors}\n                        loading={loading}\n                    />\n                </PageContent>\n            </PageWrapper>\n\n            <FloatingAlert\n                severity=\"success\"\n                open={showSuccessMessage}\n                onClose={hideSuccessMessage}\n                message=\"Vendor added successfully\"\n            />\n            <VendorModal\n                open={modalOpen}\n                close={closeVendorModal}\n                aria-labelledby=\"vendor_modal\"\n                onAdd={addVendor}\n                cities={cities}\n                addCity={addCity}\n            />\n        </>\n    );\n};\n\nexport default VendorsPage;\n","import {useState, useEffect} from 'react';\nimport api from '../../api';\nimport AccountType from '../../model/account';\nlet accountDocs: any[] = [];\nconst useAccountsPage = () => {\n    const [modalOpen, setModalOpen] = useState(false);\n    const [showSuccessMessage, setShowSuccessMessage] = useState(false);\n\n    const [rows, setRows] = useState<AccountType[]>([]);\n    const [deleting, setDeleting] = useState(false);\n    const [loading, setLoading] = useState(false);\n\n    const openAccountModal = () => {\n        setModalOpen(true);\n    };\n\n    const closeAccountModal = (created: boolean) => {\n        setModalOpen(false);\n        if (created) setShowSuccessMessage(true);\n    };\n\n    const hideSuccessMessage = () => {\n        setShowSuccessMessage(false);\n    };\n\n    const loadAccounts = () => {\n        setLoading(true);\n        api.account.get(\n            (result: any) => {\n                accountDocs = [];\n                const items: any[] = [];\n                result.docs.forEach((doc: any) => {\n                    accountDocs.push(doc);\n                    const item: any = doc.data();\n                    item.id = doc.id;\n                    items.push(item);\n                });\n                setRows(items);\n                setLoading(false);\n            },\n            () => {\n                setLoading(false);\n            }\n        );\n    };\n\n    const loadMoreAccounts = () => {\n        setLoading(true);\n        api.account.get(\n            (result: any) => {\n                const items: any[] = [];\n                result.docs.forEach((doc: any) => {\n                    accountDocs.push(doc);\n                    const item: any = doc.data();\n                    item.id = doc.id;\n                    items.push(item);\n                });\n                setRows((prev) => prev.concat(items));\n                setLoading(false);\n            },\n            () => {\n                setLoading(false);\n            },\n            accountDocs[accountDocs.length - 1]\n        );\n    };\n\n    const addAccount = (newAccount: AccountType) => {\n        rows.push(newAccount);\n        rows.sort(\n            (a: AccountType, b: AccountType) =>\n                (b.createdAt ? b.createdAt : 0) - (a.createdAt ? a.createdAt : 0)\n        );\n        setRows(rows);\n    };\n\n    const deleteAccount = (index: number) => {\n        setDeleting(true);\n        api.account.delete(\n            rows[index].id,\n            () => {\n                accountDocs.splice(index, 1);\n                const remaining = rows.filter((row, i) => i !== index);\n                setRows(remaining);\n                setDeleting(false);\n            },\n            () => {\n                setDeleting(false);\n            }\n        );\n    };\n\n    const editAccount = () => {};\n\n    useEffect(() => {\n        loadAccounts();\n    }, []);\n\n    return {\n        openAccountModal,\n        closeAccountModal,\n        modalOpen,\n        showSuccessMessage,\n        hideSuccessMessage,\n        deleteAccount,\n        addAccount,\n        loadMoreAccounts,\n        deleting,\n        loading,\n        rows,\n    };\n};\nexport default useAccountsPage;\n","import firebase from 'firebase';\nimport AccountType from '../../model/account';\nimport {useState} from 'react';\nimport api from '../../api';\n\nconst useAccountModal = (\n    onAdd: (account: AccountType) => void,\n    close: (created: boolean) => void\n) => {\n    const [name, setName] = useState('');\n    const [type, setType] = useState('');\n    const [amount, setAmount] = useState(0);\n    const [details, setDetails] = useState('');\n    const [loading, setLoading] = useState(false);\n\n    const onNameChange = (value: string) => {\n        setName(value);\n    };\n\n    const onDetailsChange = (value: string) => {\n        setDetails(value);\n    };\n\n    const onTypeChange = (value: string) => {\n        setType(value);\n    };\n\n    const onAmountChange = (value: number) => {\n        setAmount(value);\n    };\n\n    const handleClick = () => {\n        if (!loading) {\n            setLoading(true);\n            const now = Date.now();\n            const newAccount: AccountType = {\n                name,\n                details,\n                type,\n                amount,\n                createdAt: now,\n                updatedAt: now,\n            };\n            api.account.add(\n                newAccount,\n                (id: string) => {\n                    setLoading(false);\n                    newAccount.id = id;\n                    onAdd(newAccount);\n                    close(true);\n                },\n                () => {\n                    setLoading(false);\n                    //ToDo failed to add data\n                }\n            );\n        }\n    };\n    return {\n        handleClick,\n        onNameChange,\n        onDetailsChange,\n        onTypeChange,\n        onAmountChange,\n        loading,\n    };\n};\n\nexport default useAccountModal;\n","import React from 'react';\nimport {Dialog, DialogTitle, FormControl, TextField, Grid} from '@material-ui/core';\nimport Button from '../../components/Button/Button';\nimport useAccountModal from './useAccountModal';\nimport AccountType from '../../model/account';\n\nexport interface AccountModalType {\n    open: boolean;\n    close: (created: boolean) => void;\n    onAdd: (account: AccountType) => void;\n}\nconst AccountModal = (props: AccountModalType) => {\n    const {open, close, onAdd} = props;\n    const {\n        handleClick,\n        onNameChange,\n        onDetailsChange,\n        onTypeChange,\n        onAmountChange,\n        loading,\n    } = useAccountModal(onAdd, close);\n    return (\n        <Dialog open={open}>\n            <DialogTitle>Add New Account</DialogTitle>\n            <Grid container spacing={2} style={{padding: 24}}>\n                <Grid item xs={12}>\n                    <Grid container spacing={2}>\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                label=\"Account Name\"\n                                onChange={(event) => {\n                                    onNameChange(event.target.value);\n                                }}\n                            />\n                        </Grid>\n\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                label=\"Account Type\"\n                                onChange={(event) => {\n                                    onTypeChange(event.target.value);\n                                }}\n                            />\n                        </Grid>\n\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                label=\"Account Amount\"\n                                type=\"number\"\n                                onChange={(event) => {\n                                    onAmountChange(parseInt(event.target.value));\n                                }}\n                            />\n                        </Grid>\n\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                label=\"Details\"\n                                multiline\n                                rows={3}\n                                onChange={(event) => {\n                                    onDetailsChange(event.target.value);\n                                }}\n                            />\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid item xs={12}>\n                    <Grid container spacing={2} justify={'flex-end'}>\n                        <Grid item>\n                            <Button\n                                variant=\"text\"\n                                onClick={() => {\n                                    close(false);\n                                }}\n                            >\n                                Cancel\n                            </Button>\n                        </Grid>\n                        <Grid item>\n                            <Button onClick={handleClick} loading={loading}>\n                                Add Account\n                            </Button>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </Dialog>\n    );\n};\n\nexport default AccountModal;\n","import React, {useState, useEffect} from 'react';\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\nimport EditIcon from '@material-ui/icons/Edit';\nimport {\n    Paper,\n    TableContainer,\n    Table,\n    TableHead,\n    TableRow,\n    TableCell,\n    TableSortLabel,\n    TableBody,\n    TablePagination,\n    makeStyles,\n    IconButton,\n    Card,\n    Typography,\n    Grid,\n} from '@material-ui/core';\nimport {firestore} from 'firebase';\nimport api from '../../api';\nimport AccountType from '../../model/account';\nimport Button from '../../components/Button/Button';\nimport {H3, Body, SH2, SH3, Caption} from '../../components/Typography/Typography';\nimport {colorPalette} from '../../theme';\nimport InboxIcon from '@material-ui/icons/Inbox';\nimport CallRoundedIcon from '@material-ui/icons/CallRounded';\nimport PinDropRoundedIcon from '@material-ui/icons/PinDropRounded';\nimport Chip from '@material-ui/core/Chip';\n\nconst columns: string[] = ['Name', 'Average Rate', 'Quantity', 'Total', 'Details', 'Actions'];\n\ninterface AccountsListType {\n    rows: AccountType[];\n    onRowDelete: Function;\n    deleting: boolean;\n    loading?: boolean;\n    allLoaded: boolean;\n    onLoadMore: () => void;\n}\n\nconst AccountsList = (props: AccountsListType) => {\n    return (\n        <div>\n            {props.rows.map((item: AccountType, index) => (\n                <div\n                    style={{\n                        padding: 8,\n                        borderBottom: `1px solid ${colorPalette.grayscale[4]}`,\n                    }}\n                    key={index}\n                >\n                    <Grid container>\n                        <Grid item xs={10} style={{paddingTop: 8, paddingBottom: 8}}>\n                            <H3>{item.name}</H3>\n                            <Body>{item.details}</Body>\n                            <Grid container alignItems=\"center\" spacing={1}>\n                                <Grid>\n                                    <Chip label={item.type} size=\"small\" />\n                                </Grid>\n                                <Grid item>\n                                    <SH2 color={colorPalette.primary[0].interaction}>\n                                        {item.amount}\n                                    </SH2>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n\n                        <Grid item xs={1}>\n                            <IconButton aria-label=\"edit\">\n                                <EditIcon fontSize=\"small\" />\n                            </IconButton>\n                            <IconButton\n                                aria-label=\"delete\"\n                                onClick={() => {\n                                    props.onRowDelete(index);\n                                }}\n                                disabled={props.deleting}\n                            >\n                                <DeleteOutlineIcon fontSize=\"small\" />\n                            </IconButton>\n                        </Grid>\n                    </Grid>\n                </div>\n            ))}\n            <Button\n                onClick={props.onLoadMore}\n                disabled={props.allLoaded}\n                loading={props.loading}\n                fullWidth\n                variant=\"text\"\n            >\n                Load More\n            </Button>\n        </div>\n    );\n};\n\nexport default AccountsList;\n","import React from 'react';\nimport AccountsTable from '../../layouts/AccountsTable/AccountsTable';\nimport {Typography, Grid, TextField, FormControl, Button} from '@material-ui/core';\nimport useAccountsPage from './useAccountsPage';\nimport AccountModal from '../../layouts/AccountModal/AccountModal';\nimport FloatingAlert from '../../components/FloatingAlert/FloatingAlert';\nimport AccountType from '../../model/account';\nimport {PageWrapper, PageHeader, PageContent} from '../../components/PageContainer/PageContainer';\nimport AccountsList from '../../layouts/AccountsList/AccountsList';\n\ninterface AccountsPageType {\n    numberOfAccounts: number;\n}\nconst AccountsPage = (props: AccountsPageType) => {\n    const {\n        openAccountModal,\n        closeAccountModal,\n        modalOpen,\n        showSuccessMessage,\n        hideSuccessMessage,\n        deleteAccount,\n        loadMoreAccounts,\n        addAccount,\n        deleting,\n        loading,\n        rows,\n    } = useAccountsPage();\n    return (\n        <>\n            <PageWrapper>\n                <PageHeader\n                    placeholder=\"Search Accounts\"\n                    loadedRows={rows.length}\n                    totalRows={props.numberOfAccounts}\n                    openModal={openAccountModal}\n                    label=\"accounts\"\n                />\n                <PageContent>\n                    <AccountsList\n                        rows={rows}\n                        onRowDelete={deleteAccount}\n                        deleting={deleting}\n                        onLoadMore={loadMoreAccounts}\n                        allLoaded={rows.length === props.numberOfAccounts}\n                        loading={loading}\n                    />\n                </PageContent>\n            </PageWrapper>\n            <FloatingAlert\n                severity=\"success\"\n                open={showSuccessMessage}\n                onClose={hideSuccessMessage}\n                message=\"Account added successfully\"\n            />\n            <AccountModal\n                open={modalOpen}\n                close={closeAccountModal}\n                aria-labelledby=\"account_modal\"\n                onAdd={addAccount}\n            />\n        </>\n    );\n};\n\nexport default AccountsPage;\n","import {useState, useEffect} from 'react';\nimport api from '../../api';\nimport PurchaseType from '../../model/purchase';\nimport CityType from '../../model/city';\nimport ProductType from '../../model/product';\nimport VendorType from '../../model/vendor';\nlet purchaseDocs: any[] = [];\nconst usePurchasesPage = () => {\n    const [modalOpen, setModalOpen] = useState(false);\n    const [showSuccessMessage, setShowSuccessMessage] = useState(false);\n\n    const [rows, setRows] = useState<PurchaseType[]>([]);\n    const [products, setProducts] = useState<ProductType[]>([]);\n    const [vendors, setVendors] = useState<VendorType[]>([]);\n    const [deleting, setDeleting] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [loadingProducts, setLoadingProducts] = useState(false);\n    const [loadingVendors, setLoadingVendors] = useState(false);\n\n    const openPurchaseModal = () => {\n        setModalOpen(true);\n    };\n\n    const closePurchaseModal = (created: boolean) => {\n        setModalOpen(false);\n        if (created) setShowSuccessMessage(true);\n    };\n\n    const hideSuccessMessage = () => {\n        setShowSuccessMessage(false);\n    };\n\n    const loadPurchases = () => {\n        setLoading(true);\n        api.purchase.get(\n            (result: any) => {\n                purchaseDocs = [];\n                const items: any[] = [];\n                result.docs.forEach((doc: any) => {\n                    purchaseDocs.push(doc);\n                    const item: any = doc.data();\n                    item.id = doc.id;\n                    items.push(item);\n                });\n                setRows(items);\n                setLoading(false);\n            },\n            () => {\n                setLoading(false);\n            }\n        );\n    };\n\n    const loadProducts = () => {\n        setLoadingProducts(true);\n        api.product.get(\n            (result: any) => {\n                const items: any[] = [];\n                result.docs.forEach((doc: any) => {\n                    const item: any = doc.data();\n                    item.id = doc.id;\n                    items.push(item);\n                });\n                setProducts(items);\n                setLoadingProducts(false);\n            },\n            () => {\n                setLoadingProducts(false);\n            }\n        );\n    };\n\n    const loadVendors = () => {\n        setLoadingVendors(true);\n        api.vendor.get(\n            (result: any) => {\n                const items: any[] = [];\n                result.docs.forEach((doc: any) => {\n                    const item: any = doc.data();\n                    item.id = doc.id;\n                    items.push(item);\n                });\n                setVendors(items);\n                setLoadingVendors(false);\n            },\n            () => {\n                setLoadingVendors(false);\n            }\n        );\n    };\n\n    const loadMorePurchases = () => {\n        setLoading(true);\n        api.purchase.get(\n            (result: any) => {\n                const items: any[] = [];\n                result.docs.forEach((doc: any) => {\n                    purchaseDocs.push(doc);\n                    const item: any = doc.data();\n                    item.id = doc.id;\n                    items.push(item);\n                });\n                setRows((prev) => prev.concat(items));\n                setLoading(false);\n            },\n            () => {\n                setLoading(false);\n            },\n            purchaseDocs[purchaseDocs.length - 1]\n        );\n    };\n\n    const addPurchase = (newPurchase: PurchaseType) => {\n        rows.push(newPurchase);\n        rows.sort((a: PurchaseType, b: PurchaseType) => b.createdAt - a.createdAt);\n        setRows(rows);\n    };\n\n    const deletePurchase = (index: number) => {\n        setDeleting(true);\n        api.purchase.delete(\n            rows[index].id,\n            () => {\n                purchaseDocs.splice(index, 1);\n                const remaining = rows.filter((row, i) => i !== index);\n                setRows(remaining);\n                setDeleting(false);\n            },\n            () => {\n                setDeleting(false);\n            }\n        );\n    };\n\n    const editPurchase = () => {};\n\n    useEffect(() => {\n        loadPurchases();\n        loadProducts();\n        loadVendors();\n    }, []);\n\n    return {\n        openPurchaseModal,\n        closePurchaseModal,\n        modalOpen,\n        showSuccessMessage,\n        hideSuccessMessage,\n        deletePurchase,\n        addPurchase,\n        loadMorePurchases,\n        deleting,\n        loading,\n        rows,\n        products,\n        vendors,\n        loadingProducts,\n        loadingVendors,\n    };\n};\nexport default usePurchasesPage;\n","import PurchaseType from '../../model/purchase';\nimport {useState} from 'react';\nimport api from '../../api';\nimport CityType from '../../model/city';\nimport ProductType from '../../model/product';\nimport VendorType from '../../model/vendor';\n\nconst usePurchaseModal = (\n    onAdd: (purchase: PurchaseType) => void,\n    close: (created: boolean) => void\n) => {\n    const [product, setProduct] = useState<ProductType>();\n    const [vendor, setVendor] = useState<VendorType>();\n    const [quantity, setQuantity] = useState(0);\n    const [rate, setRate] = useState(0);\n\n    const [loading, setLoading] = useState(false);\n\n    const onQuantityChange = (value: number) => {\n        setQuantity(value);\n    };\n\n    const onRateChange = (value: number) => {\n        setRate(value);\n    };\n\n    const handleClick = () => {\n        if (!loading) {\n            setLoading(true);\n            const now = Date.now();\n            const newPurchase: PurchaseType = {\n                product: {id: product?.id, name: product?.name},\n                vendor: {id: vendor?.id, name: vendor?.name},\n                quantity: quantity,\n                rate: rate,\n                createdAt: now,\n                updatedAt: now,\n            };\n            api.purchase.add(\n                newPurchase,\n                (id: string) => {\n                    setLoading(false);\n                    newPurchase.id = id;\n                    onAdd(newPurchase);\n                    close(true);\n                },\n                () => {\n                    setLoading(false);\n                    //ToDo failed to add data\n                }\n            );\n        }\n    };\n    return {\n        handleClick,\n        onQuantityChange,\n        onRateChange,\n        setProduct,\n        setVendor,\n        loading,\n    };\n};\n\nexport default usePurchaseModal;\n","import React from 'react';\nimport {Dialog, DialogTitle, FormControl, TextField, Grid} from '@material-ui/core';\nimport Button from '../../components/Button/Button';\nimport usePurchaseModal from './usePurchaseModal';\nimport PurchaseType from '../../model/purchase';\nimport CityType from '../../model/city';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport VendorType from '../../model/vendor';\nimport ProductType from '../../model/product';\n\nexport interface PurchaseModalType {\n    open: boolean;\n    close: (created: boolean) => void;\n    onAdd: (product: PurchaseType) => void;\n    vendors: VendorType[];\n    products: ProductType[];\n}\nconst PurchaseModal = (props: PurchaseModalType) => {\n    const {open, close, onAdd} = props;\n    const {\n        handleClick,\n        onQuantityChange,\n        onRateChange,\n        loading,\n        setProduct,\n        setVendor,\n    } = usePurchaseModal(onAdd, close);\n    return (\n        <Dialog open={open}>\n            <DialogTitle>Add New Purchase</DialogTitle>\n            <Grid container spacing={2} style={{padding: 24}}>\n                <Grid item xs={12}>\n                    <Grid container spacing={2}>\n                        <Grid item xs={12}>\n                            <Autocomplete\n                                id=\"vendor-search\"\n                                options={props.vendors}\n                                getOptionLabel={(option) => {\n                                    return option.name || 'Dummy Vendor';\n                                }}\n                                renderInput={(params) => (\n                                    <TextField\n                                        {...params}\n                                        label=\"Search Vendor\"\n                                        variant=\"outlined\"\n                                    />\n                                )}\n                                onChange={(event: any, value: VendorType | null) => {\n                                    value && setVendor(value);\n                                }}\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <Autocomplete\n                                id=\"product-search\"\n                                options={props.products}\n                                getOptionLabel={(option) => {\n                                    return option.name || 'Dummy Product';\n                                }}\n                                renderInput={(params) => (\n                                    <TextField\n                                        {...params}\n                                        label=\"Search Product\"\n                                        variant=\"outlined\"\n                                    />\n                                )}\n                                onChange={(event: any, value: ProductType | null) => {\n                                    value && setProduct(value);\n                                }}\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                label=\"Quantity\"\n                                type=\"number\"\n                                onChange={(event) => {\n                                    onQuantityChange(parseInt(event.target.value));\n                                }}\n                            />\n                        </Grid>\n\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                label=\"Rate\"\n                                type=\"number\"\n                                onChange={(event) => {\n                                    onRateChange(parseInt(event.target.value));\n                                }}\n                            />\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid item xs={12}>\n                    <Grid container spacing={2} justify={'flex-end'}>\n                        <Grid item>\n                            <Button\n                                variant=\"text\"\n                                onClick={() => {\n                                    close(false);\n                                }}\n                            >\n                                Cancel\n                            </Button>\n                        </Grid>\n                        <Grid item>\n                            <Button onClick={handleClick} loading={loading}>\n                                Add Purchase\n                            </Button>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </Dialog>\n    );\n};\n\nexport default PurchaseModal;\n","import React, {useState, useEffect} from 'react';\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\nimport EditIcon from '@material-ui/icons/Edit';\nimport {\n    Paper,\n    TableContainer,\n    Table,\n    TableHead,\n    TableRow,\n    TableCell,\n    TableSortLabel,\n    TableBody,\n    TablePagination,\n    makeStyles,\n    IconButton,\n    Card,\n    Typography,\n    Grid,\n} from '@material-ui/core';\nimport {firestore} from 'firebase';\nimport api from '../../api';\nimport Button from '../../components/Button/Button';\nimport {H3, Body} from '../../components/Typography/Typography';\nimport {colorPalette} from '../../theme';\nimport InboxIcon from '@material-ui/icons/Inbox';\nimport MoreButton from '../../components/MoreButton/MoreButton';\nimport PurchaseType from '../../model/purchase';\n\nconst columns: string[] = ['Name', 'Average Rate', 'Quantity', 'Total', 'Details', 'Actions'];\n\nconst useStyles = makeStyles({\n    head: {},\n});\n\ninterface PurchasesListType {\n    rows: PurchaseType[];\n    onRowDelete: Function;\n    deleting: boolean;\n    loading?: boolean;\n    allLoaded: boolean;\n    onLoadMore: () => void;\n}\n\nconst PurchasesList = (props: PurchasesListType) => {\n    const classes = useStyles();\n    return (\n        <div className={classes.head}>\n            {props.rows.map((item: PurchaseType, index) => (\n                <div\n                    style={{\n                        padding: 8,\n                        borderBottom: `1px solid ${colorPalette.grayscale[4]}`,\n                    }}\n                    key={index}\n                >\n                    <Grid container>\n                        <Grid item xs={1} style={{paddingTop: 8, paddingBottom: 8}}>\n                            <H3>\n                                <InboxIcon fontSize=\"small\" />\n                            </H3>\n                        </Grid>\n                        <Grid item xs={6} style={{paddingTop: 8, paddingBottom: 8}}>\n                            <H3>{item.product.name}</H3>\n                            <div style={{paddingTop: 4}}>\n                                <Body color={colorPalette.grayscale[7]}>{item.vendor.name}</Body>\n                            </div>\n                        </Grid>\n                        <Grid\n                            item\n                            style={{\n                                borderLeft: `1px solid ${colorPalette.grayscale[3]}`,\n                                paddingLeft: 16,\n                                paddingRight: 8,\n                                paddingTop: 16,\n                                paddingBottom: 16,\n                            }}\n                        >\n                            <Body color={colorPalette.grayscale[7]}>Rs.</Body>\n                            <Body color={colorPalette.grayscale[7]}>Qt.</Body>\n                            <Body color={colorPalette.primary[0].base}>Tl.</Body>\n                        </Grid>\n                        <Grid\n                            item\n                            xs={2}\n                            style={{\n                                paddingTop: 16,\n                                paddingBottom: 16,\n                            }}\n                        >\n                            <Body color={colorPalette.grayscale[7]}>{item.rate}</Body>\n                            <Body color={colorPalette.grayscale[7]}>{item.quantity}</Body>\n                            <Body color={colorPalette.primary[0].base}>\n                                {(item.quantity || 0) * (item.rate || 0)}\n                            </Body>\n                        </Grid>\n                        <Grid item xs={1}>\n                            <IconButton aria-label=\"edit\">\n                                <EditIcon fontSize=\"small\" />\n                            </IconButton>\n                            <IconButton\n                                aria-label=\"delete\"\n                                onClick={() => {\n                                    props.onRowDelete(index);\n                                }}\n                                disabled={props.deleting}\n                            >\n                                <DeleteOutlineIcon fontSize=\"small\" />\n                            </IconButton>\n                        </Grid>\n                    </Grid>\n                </div>\n            ))}\n            <Button\n                onClick={props.onLoadMore}\n                disabled={props.allLoaded}\n                loading={props.loading}\n                fullWidth\n                variant=\"text\"\n            >\n                Load More\n            </Button>\n        </div>\n    );\n};\n\nexport default PurchasesList;\n","import React from 'react';\nimport PurchasesTable from '../../layouts/PurchasesTable/PurchasesTable';\nimport {Typography, Grid, TextField, FormControl, Button} from '@material-ui/core';\nimport usePurchasesPage from './usePurchasesPage';\nimport PurchaseModal from '../../layouts/PurchaseModal/PurchaseModal';\nimport FloatingAlert from '../../components/FloatingAlert/FloatingAlert';\nimport PurchaseType from '../../model/purchase';\nimport {PageWrapper, PageHeader, PageContent} from '../../components/PageContainer/PageContainer';\nimport PurchasesList from '../../layouts/PurchaseList/PurchaseList';\n\ninterface PurchasesPageType {\n    numberOfPurchases: number;\n}\nconst PurchasesPage = (props: PurchasesPageType) => {\n    const {\n        openPurchaseModal,\n        closePurchaseModal,\n        modalOpen,\n        showSuccessMessage,\n        hideSuccessMessage,\n        deletePurchase,\n        loadMorePurchases,\n        addPurchase,\n        deleting,\n        loading,\n        rows,\n        products,\n        loadingProducts,\n        vendors,\n        loadingVendors,\n    } = usePurchasesPage();\n    return (\n        <>\n            <PageWrapper>\n                <PageHeader\n                    placeholder=\"Search Purchases\"\n                    loadedRows={rows.length}\n                    totalRows={props.numberOfPurchases}\n                    openModal={openPurchaseModal}\n                    label=\"purchases\"\n                />\n                <PageContent>\n                    <PurchasesList\n                        rows={rows}\n                        onRowDelete={deletePurchase}\n                        deleting={deleting}\n                        onLoadMore={loadMorePurchases}\n                        allLoaded={rows.length === props.numberOfPurchases}\n                        loading={loading}\n                    />\n                </PageContent>\n            </PageWrapper>\n            <FloatingAlert\n                severity=\"success\"\n                open={showSuccessMessage}\n                onClose={hideSuccessMessage}\n                message=\"Purchase added successfully\"\n            />\n            <PurchaseModal\n                open={modalOpen}\n                close={closePurchaseModal}\n                aria-labelledby=\"purchase_modal\"\n                onAdd={addPurchase}\n                products={products}\n                vendors={vendors}\n            />\n        </>\n    );\n};\n\nexport default PurchasesPage;\n","import {useState, useEffect} from 'react';\nimport api from '../../api';\nimport InvoiceType from '../../model/invoice';\nimport CityType from '../../model/city';\nimport ProductType from '../../model/product';\nimport CustomerType from '../../model/customer';\nlet invoiceDocs: any[] = [];\nconst useInvoicesPage = () => {\n    const [modalOpen, setModalOpen] = useState(false);\n    const [showSuccessMessage, setShowSuccessMessage] = useState(false);\n\n    const [rows, setRows] = useState<InvoiceType[]>([]);\n    const [products, setProducts] = useState<ProductType[]>([]);\n    const [customers, setCustomers] = useState<CustomerType[]>([]);\n    const [deleting, setDeleting] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [loadingProducts, setLoadingProducts] = useState(false);\n    const [loadingCustomers, setLoadingCustomers] = useState(false);\n\n    const openInvoiceModal = () => {\n        setModalOpen(true);\n    };\n\n    const closeInvoiceModal = (created: boolean) => {\n        setModalOpen(false);\n        if (created) setShowSuccessMessage(true);\n    };\n\n    const hideSuccessMessage = () => {\n        setShowSuccessMessage(false);\n    };\n\n    const loadInvoices = () => {\n        setLoading(true);\n        api.invoice.get(\n            (result: any) => {\n                invoiceDocs = [];\n                const items: any[] = [];\n                result.docs.forEach((doc: any) => {\n                    invoiceDocs.push(doc);\n                    const item: any = doc.data();\n                    item.id = doc.id;\n                    items.push(item);\n                });\n                setRows(items);\n                setLoading(false);\n            },\n            () => {\n                setLoading(false);\n            }\n        );\n    };\n\n    const loadProducts = () => {\n        setLoadingProducts(true);\n        api.product.get(\n            (result: any) => {\n                const items: any[] = [];\n                result.docs.forEach((doc: any) => {\n                    const item: any = doc.data();\n                    item.id = doc.id;\n                    items.push(item);\n                });\n                setProducts(items);\n                setLoadingProducts(false);\n            },\n            () => {\n                setLoadingProducts(false);\n            }\n        );\n    };\n\n    const loadCustomers = () => {\n        setLoadingCustomers(true);\n        api.customer.get(\n            (result: any) => {\n                const items: any[] = [];\n                result.docs.forEach((doc: any) => {\n                    const item: any = doc.data();\n                    item.id = doc.id;\n                    items.push(item);\n                });\n                setCustomers(items);\n                setLoadingCustomers(false);\n            },\n            () => {\n                setLoadingCustomers(false);\n            }\n        );\n    };\n\n    const loadMoreInvoices = () => {\n        setLoading(true);\n        api.invoice.get(\n            (result: any) => {\n                const items: any[] = [];\n                result.docs.forEach((doc: any) => {\n                    invoiceDocs.push(doc);\n                    const item: any = doc.data();\n                    item.id = doc.id;\n                    items.push(item);\n                });\n                setRows((prev) => prev.concat(items));\n                setLoading(false);\n            },\n            () => {\n                setLoading(false);\n            },\n            invoiceDocs[invoiceDocs.length - 1]\n        );\n    };\n\n    const addInvoice = (newInvoice: InvoiceType) => {\n        rows.push(newInvoice);\n        rows.sort((a: InvoiceType, b: InvoiceType) => b.createdAt - a.createdAt);\n        setRows(rows);\n    };\n\n    const deleteInvoice = (index: number) => {\n        setDeleting(true);\n        api.invoice.delete(\n            rows[index].id,\n            () => {\n                invoiceDocs.splice(index, 1);\n                const remaining = rows.filter((row, i) => i !== index);\n                setRows(remaining);\n                setDeleting(false);\n            },\n            () => {\n                setDeleting(false);\n            }\n        );\n    };\n\n    const editInvoice = () => {};\n\n    useEffect(() => {\n        loadInvoices();\n        loadProducts();\n        loadCustomers();\n    }, []);\n\n    return {\n        openInvoiceModal,\n        closeInvoiceModal,\n        modalOpen,\n        showSuccessMessage,\n        hideSuccessMessage,\n        deleteInvoice,\n        addInvoice,\n        loadMoreInvoices,\n        deleting,\n        loading,\n        rows,\n        products,\n        customers,\n        loadingProducts,\n        loadingCustomers,\n    };\n};\nexport default useInvoicesPage;\n","import InvoiceType, {SalesType} from '../../model/invoice';\nimport {useState} from 'react';\nimport api from '../../api';\nimport CityType from '../../model/city';\nimport ProductType from '../../model/product';\nimport CustomerType from '../../model/customer';\n\nconst useInvoiceModal = (\n    onAdd: (invoice: InvoiceType) => void,\n    close: (created: boolean) => void\n) => {\n    const [customer, setCustomer] = useState<CustomerType>();\n    const [sales, setSales] = useState<SalesType[]>([{} as SalesType]);\n    const [loading, setLoading] = useState(false);\n\n    const addSale = () => {\n        const newSales = sales.concat({} as SalesType);\n        setSales(newSales);\n    };\n\n    const handleClick = () => {\n        if (!loading) {\n            setLoading(true);\n            const now = Date.now();\n            const newInvoice: InvoiceType = {\n                sales: sales ? sales : [],\n                customer: {id: customer?.id, name: customer?.name},\n                createdAt: now,\n                updatedAt: now,\n            };\n            api.invoice.add(\n                newInvoice,\n                (id: string) => {\n                    setLoading(false);\n                    newInvoice.id = id;\n                    onAdd(newInvoice);\n                    close(true);\n                },\n                () => {\n                    setLoading(false);\n                    //ToDo failed to add data\n                }\n            );\n        }\n    };\n    return {\n        handleClick,\n        sales,\n        setCustomer,\n        loading,\n        addSale,\n    };\n};\n\nexport default useInvoiceModal;\n","import React from 'react';\nimport {Dialog, DialogTitle, FormControl, TextField, Grid} from '@material-ui/core';\nimport Button from '../../components/Button/Button';\nimport useInvoiceModal from './useInvoiceModal';\nimport InvoiceType from '../../model/invoice';\nimport CityType from '../../model/city';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport CustomerType from '../../model/customer';\nimport ProductType from '../../model/product';\n\nexport interface InvoiceModalType {\n    open: boolean;\n    close: (created: boolean) => void;\n    onAdd: (product: InvoiceType) => void;\n    customers: CustomerType[];\n    products: ProductType[];\n}\nconst InvoiceModal = (props: InvoiceModalType) => {\n    const {open, close, onAdd} = props;\n    const {\n        handleClick,\n\n        loading,\n        sales,\n        setCustomer,\n        addSale,\n    } = useInvoiceModal(onAdd, close);\n    return (\n        <Dialog open={open}>\n            <DialogTitle>Add New Invoice</DialogTitle>\n            <Grid container spacing={2} style={{padding: 24}}>\n                <Grid item xs={12}>\n                    <Grid container spacing={2}>\n                        <Grid item xs={12}>\n                            <Autocomplete\n                                id=\"customer-search\"\n                                options={props.customers}\n                                getOptionLabel={(option) => {\n                                    return option.name || 'Dummy Customer';\n                                }}\n                                renderInput={(params) => (\n                                    <TextField\n                                        {...params}\n                                        label=\"Search Customer\"\n                                        variant=\"outlined\"\n                                    />\n                                )}\n                                onChange={(event: any, value: CustomerType | null) => {\n                                    value && setCustomer(value);\n                                }}\n                            />\n                        </Grid>\n                        {sales?.map((sale, index) => (\n                            <Grid item xs={12}>\n                                <Grid container spacing={2}>\n                                    <Grid item xs={6}>\n                                        <Autocomplete\n                                            id=\"product-search\"\n                                            options={props.products}\n                                            getOptionLabel={(option) => {\n                                                return option.name || 'Dummy Product';\n                                            }}\n                                            renderInput={(params) => (\n                                                <TextField\n                                                    {...params}\n                                                    label=\"Search Product\"\n                                                    variant=\"outlined\"\n                                                />\n                                            )}\n                                            onChange={(event: any, value: ProductType | null) => {\n                                                // value && setProduct(value);\n                                                sale.product = value ? value : ({} as ProductType);\n                                            }}\n                                        />\n                                    </Grid>\n                                    <Grid item xs={3}>\n                                        <TextField\n                                            fullWidth\n                                            label=\"Quantity\"\n                                            type=\"number\"\n                                            onChange={(event) => {\n                                                // onQuantityChange(parseInt(event.target.value));\n                                                sale.quantity = parseInt(event.target.value);\n                                            }}\n                                        />\n                                    </Grid>\n                                    <Grid item xs={3}>\n                                        <TextField\n                                            fullWidth\n                                            label=\"Rate\"\n                                            type=\"number\"\n                                            onChange={(event) => {\n                                                // onRateChange(parseInt(event.target.value));\n                                                sale.rate = parseInt(event.target.value);\n                                            }}\n                                        />\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        ))}\n                        <Grid item xs={12}>\n                            <Button\n                                onClick={() => {\n                                    addSale();\n                                }}\n                            >\n                                Add Sale\n                            </Button>\n                        </Grid>\n                        {/* <Grid item xs={12}>\n                            <Autocomplete\n                                id=\"product-search\"\n                                options={props.products}\n                                getOptionLabel={(option) => {\n                                    return option.name || 'Dummy Product';\n                                }}\n                                renderInput={(params) => (\n                                    <TextField\n                                        {...params}\n                                        label=\"Search Product\"\n                                        variant=\"outlined\"\n                                    />\n                                )}\n                                onChange={(event: any, value: ProductType | null) => {\n                                    value && setProduct(value);\n                                }}\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                label=\"Quantity\"\n                                type=\"number\"\n                                onChange={(event) => {\n                                    onQuantityChange(parseInt(event.target.value));\n                                }}\n                            />\n                        </Grid>\n\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                label=\"Rate\"\n                                type=\"number\"\n                                onChange={(event) => {\n                                    onRateChange(parseInt(event.target.value));\n                                }}\n                            />\n                        </Grid> */}\n                    </Grid>\n                </Grid>\n                <Grid item xs={12}>\n                    <Grid container spacing={2} justify={'flex-end'}>\n                        <Grid item>\n                            <Button\n                                variant=\"text\"\n                                onClick={() => {\n                                    close(false);\n                                }}\n                            >\n                                Cancel\n                            </Button>\n                        </Grid>\n                        <Grid item>\n                            <Button onClick={handleClick} loading={loading}>\n                                Add Invoice\n                            </Button>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </Dialog>\n    );\n};\n\nexport default InvoiceModal;\n","import React, {useState, useEffect} from 'react';\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\nimport EditIcon from '@material-ui/icons/Edit';\nimport {\n    Paper,\n    TableContainer,\n    Table,\n    TableHead,\n    TableRow,\n    TableCell,\n    TableSortLabel,\n    TableBody,\n    TablePagination,\n    makeStyles,\n    IconButton,\n    Card,\n    Typography,\n    Grid,\n} from '@material-ui/core';\nimport {firestore} from 'firebase';\nimport api from '../../api';\nimport InvoiceType from '../../model/invoice';\nimport Button from '../../components/Button/Button';\nimport {H3, Body, SH2, SH3, Caption} from '../../components/Typography/Typography';\nimport {colorPalette} from '../../theme';\nimport InboxIcon from '@material-ui/icons/Inbox';\nimport CallRoundedIcon from '@material-ui/icons/CallRounded';\nimport PinDropRoundedIcon from '@material-ui/icons/PinDropRounded';\nimport {getTotalSalesAmount} from '../../utils';\n\nconst columns: string[] = ['Name', 'Average Rate', 'Quantity', 'Total', 'Details', 'Actions'];\n\ninterface InvoicesListType {\n    rows: InvoiceType[];\n    onRowDelete: Function;\n    deleting: boolean;\n    loading?: boolean;\n    allLoaded: boolean;\n    onLoadMore: () => void;\n}\n\nconst InvoicesList = (props: InvoicesListType) => {\n    return (\n        <div>\n            {props.rows.map((item: InvoiceType, index) => (\n                <div\n                    style={{\n                        padding: 8,\n                        borderBottom: `1px solid ${colorPalette.grayscale[4]}`,\n                    }}\n                    key={index}\n                >\n                    <Grid container>\n                        <Grid item xs={11} style={{paddingTop: 8, paddingBottom: 8}}>\n                            <H3>{item.customer.name}</H3>\n                            <SH2 color={colorPalette.primary[0].interaction}>\n                                {getTotalSalesAmount(item.sales)}\n                            </SH2>\n                            <Caption>{item.sales.length} sales</Caption>\n                        </Grid>\n\n                        <Grid item xs={1}>\n                            <IconButton aria-label=\"edit\">\n                                <EditIcon fontSize=\"small\" />\n                            </IconButton>\n                            <IconButton\n                                aria-label=\"delete\"\n                                onClick={() => {\n                                    props.onRowDelete(index);\n                                }}\n                                disabled={props.deleting}\n                            >\n                                <DeleteOutlineIcon fontSize=\"small\" />\n                            </IconButton>\n                        </Grid>\n                    </Grid>\n                </div>\n            ))}\n            <Button\n                onClick={props.onLoadMore}\n                disabled={props.allLoaded}\n                loading={props.loading}\n                fullWidth\n                variant=\"text\"\n            >\n                Load More\n            </Button>\n        </div>\n    );\n};\n\nexport default InvoicesList;\n","import {SalesType} from './model/invoice';\n\nexport const getTotalSalesAmount = (sales: SalesType[]) => {\n    let total = 0;\n    sales.forEach((sale) => {\n        total += sale.quantity * sale.rate;\n    });\n\n    return total;\n};\n","import React from 'react';\nimport InvoicesTable from '../../layouts/InvoicesTable/InvoicesTable';\nimport {Typography, Grid, TextField, FormControl, Button} from '@material-ui/core';\nimport useInvoicesPage from './useInvoicesPage';\nimport InvoiceModal from '../../layouts/InvoiceModal/InvoiceModal';\nimport FloatingAlert from '../../components/FloatingAlert/FloatingAlert';\nimport InvoiceType from '../../model/invoice';\nimport {PageWrapper, PageHeader, PageContent} from '../../components/PageContainer/PageContainer';\nimport InvoicesList from '../../layouts/InvoicesList/InvoicesList';\n\ninterface InvoicesPageType {\n    numberOfInvoices: number;\n}\nconst InvoicesPage = (props: InvoicesPageType) => {\n    const {\n        openInvoiceModal,\n        closeInvoiceModal,\n        modalOpen,\n        showSuccessMessage,\n        hideSuccessMessage,\n        deleteInvoice,\n        loadMoreInvoices,\n        addInvoice,\n        deleting,\n        loading,\n        rows,\n        products,\n        customers,\n    } = useInvoicesPage();\n    return (\n        <>\n            <PageWrapper>\n                <PageHeader\n                    placeholder=\"Search Invoices\"\n                    loadedRows={rows.length}\n                    totalRows={props.numberOfInvoices}\n                    openModal={openInvoiceModal}\n                    label=\"Invoices\"\n                />\n                <PageContent>\n                    <InvoicesList\n                        rows={rows}\n                        onRowDelete={deleteInvoice}\n                        deleting={deleting}\n                        onLoadMore={loadMoreInvoices}\n                        allLoaded={rows.length === props.numberOfInvoices}\n                        loading={loading}\n                    />\n                </PageContent>\n            </PageWrapper>\n            <FloatingAlert\n                severity=\"success\"\n                open={showSuccessMessage}\n                onClose={hideSuccessMessage}\n                message=\"Invoice added successfully\"\n            />\n            <InvoiceModal\n                open={modalOpen}\n                close={closeInvoiceModal}\n                aria-labelledby=\"invoice_modal\"\n                onAdd={addInvoice}\n                products={products}\n                customers={customers}\n            />\n        </>\n    );\n};\n\nexport default InvoicesPage;\n","import {useState, useEffect} from 'react';\nimport api from '../../api';\nimport VendorPaymentType from '../../model/vendorPayment';\nimport CityType from '../../model/city';\nimport ProductType from '../../model/product';\nimport VendorType from '../../model/vendor';\nimport AccountType from '../../model/account';\nlet vendorPaymentDocs: any[] = [];\nconst useVendorPaymentsPage = () => {\n    const [modalOpen, setModalOpen] = useState(false);\n    const [showSuccessMessage, setShowSuccessMessage] = useState(false);\n\n    const [rows, setRows] = useState<VendorPaymentType[]>([]);\n    const [vendors, setVendors] = useState<VendorType[]>([]);\n    const [accounts, setAccounts] = useState<AccountType[]>([]);\n    const [deleting, setDeleting] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [loadingVendors, setLoadingVendors] = useState(false);\n    const [loadingAccounts, setLoadingAccounts] = useState(false);\n\n    const openVendorPaymentModal = () => {\n        setModalOpen(true);\n    };\n\n    const closeVendorPaymentModal = (created: boolean) => {\n        setModalOpen(false);\n        if (created) setShowSuccessMessage(true);\n    };\n\n    const hideSuccessMessage = () => {\n        setShowSuccessMessage(false);\n    };\n\n    const loadVendorPayments = () => {\n        setLoading(true);\n        api.vendorPayment.get(\n            (result: any) => {\n                vendorPaymentDocs = [];\n                const items: any[] = [];\n                result.docs.forEach((doc: any) => {\n                    vendorPaymentDocs.push(doc);\n                    const item: any = doc.data();\n                    item.id = doc.id;\n                    items.push(item);\n                });\n                setRows(items);\n                setLoading(false);\n            },\n            () => {\n                setLoading(false);\n            }\n        );\n    };\n\n    const loadVendors = () => {\n        setLoadingVendors(true);\n        api.vendor.get(\n            (result: any) => {\n                const items: any[] = [];\n                result.docs.forEach((doc: any) => {\n                    const item: any = doc.data();\n                    item.id = doc.id;\n                    items.push(item);\n                });\n                setVendors(items);\n                setLoadingVendors(false);\n            },\n            () => {\n                setLoadingVendors(false);\n            }\n        );\n    };\n\n    const loadAccounts = () => {\n        setLoadingAccounts(true);\n        api.account.get(\n            (result: any) => {\n                const items: any[] = [];\n                result.docs.forEach((doc: any) => {\n                    const item: any = doc.data();\n                    item.id = doc.id;\n                    items.push(item);\n                });\n                setAccounts(items);\n                setLoadingAccounts(false);\n            },\n            () => {\n                setLoadingAccounts(false);\n            }\n        );\n    };\n\n    const loadMoreVendorPayments = () => {\n        setLoading(true);\n        api.vendorPayment.get(\n            (result: any) => {\n                const items: any[] = [];\n                result.docs.forEach((doc: any) => {\n                    vendorPaymentDocs.push(doc);\n                    const item: any = doc.data();\n                    item.id = doc.id;\n                    items.push(item);\n                });\n                setRows((prev) => prev.concat(items));\n                setLoading(false);\n            },\n            () => {\n                setLoading(false);\n            },\n            vendorPaymentDocs[vendorPaymentDocs.length - 1]\n        );\n    };\n\n    const addVendorPayment = (newVendorPayment: VendorPaymentType) => {\n        rows.push(newVendorPayment);\n        rows.sort((a: VendorPaymentType, b: VendorPaymentType) => b.createdAt - a.createdAt);\n        setRows(rows);\n    };\n\n    const deleteVendorPayment = (index: number) => {\n        setDeleting(true);\n        api.vendorPayment.delete(\n            rows[index].id,\n            () => {\n                vendorPaymentDocs.splice(index, 1);\n                const remaining = rows.filter((row, i) => i !== index);\n                setRows(remaining);\n                setDeleting(false);\n            },\n            () => {\n                setDeleting(false);\n            }\n        );\n    };\n\n    const editVendorPayment = () => {};\n\n    useEffect(() => {\n        loadVendorPayments();\n        loadVendors();\n        loadAccounts();\n    }, []);\n\n    return {\n        openVendorPaymentModal,\n        closeVendorPaymentModal,\n        modalOpen,\n        showSuccessMessage,\n        hideSuccessMessage,\n        deleteVendorPayment,\n        addVendorPayment,\n        loadMoreVendorPayments,\n        deleting,\n        loading,\n        rows,\n        vendors,\n        accounts,\n        loadingVendors,\n        loadingAccounts,\n    };\n};\nexport default useVendorPaymentsPage;\n","import VendorPaymentType from '../../model/vendorPayment';\nimport {useState} from 'react';\nimport api from '../../api';\nimport CityType from '../../model/city';\nimport ProductType from '../../model/product';\nimport VendorType from '../../model/vendor';\nimport AccountType from '../../model/account';\n\nconst useVendorPaymentModal = (\n    onAdd: (vendorPayment: VendorPaymentType) => void,\n    close: (created: boolean) => void\n) => {\n    const [vendor, setVendor] = useState<VendorType>();\n    const [account, setAccount] = useState<AccountType>();\n    const [amount, setAmount] = useState(0);\n    const [details, setDetails] = useState('');\n\n    const [loading, setLoading] = useState(false);\n\n    const onAmountChange = (value: number) => {\n        setAmount(value);\n    };\n\n    const onDetailsChange = (value: string) => {\n        setDetails(value);\n    };\n\n    const handleClick = () => {\n        if (!loading) {\n            setLoading(true);\n            const now = Date.now();\n            const newVendorPayment: VendorPaymentType = {\n                vendor: {id: vendor?.id, name: vendor?.name},\n                amount: amount,\n                account: {id: account?.id, name: account?.name},\n                details: details,\n                createdAt: now,\n                updatedAt: now,\n            };\n            api.vendorPayment.add(\n                newVendorPayment,\n                (id: string) => {\n                    setLoading(false);\n                    newVendorPayment.id = id;\n                    onAdd(newVendorPayment);\n                    close(true);\n                },\n                () => {\n                    setLoading(false);\n                    //ToDo failed to add data\n                }\n            );\n        }\n    };\n    return {\n        handleClick,\n        onAmountChange,\n        onDetailsChange,\n        setVendor,\n        setAccount,\n        loading,\n    };\n};\n\nexport default useVendorPaymentModal;\n","import React from 'react';\nimport {Dialog, DialogTitle, FormControl, TextField, Grid} from '@material-ui/core';\nimport Button from '../../components/Button/Button';\nimport useVendorPaymentModal from './useVendorPaymentModal';\nimport VendorPaymentType from '../../model/vendorPayment';\nimport CityType from '../../model/city';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport VendorType from '../../model/vendor';\nimport ProductType from '../../model/product';\nimport AccountType from '../../model/account';\n\nexport interface VendorPaymentModalType {\n    open: boolean;\n    close: (created: boolean) => void;\n    onAdd: (product: VendorPaymentType) => void;\n    vendors: VendorType[];\n    accounts: AccountType[];\n}\nconst VendorPaymentModal = (props: VendorPaymentModalType) => {\n    const {open, close, onAdd} = props;\n    const {\n        handleClick,\n        loading,\n        onAmountChange,\n        onDetailsChange,\n        setVendor,\n        setAccount,\n    } = useVendorPaymentModal(onAdd, close);\n    return (\n        <Dialog open={open}>\n            <DialogTitle>Add New VendorPayment</DialogTitle>\n            <Grid container spacing={2} style={{padding: 24}}>\n                <Grid item xs={12}>\n                    <Grid container spacing={2}>\n                        <Grid item xs={12}>\n                            <Autocomplete\n                                id=\"vendor-search\"\n                                options={props.vendors}\n                                getOptionLabel={(option) => {\n                                    return option.name || 'Dummy Vendor';\n                                }}\n                                renderInput={(params) => (\n                                    <TextField\n                                        {...params}\n                                        label=\"Search Vendor\"\n                                        variant=\"outlined\"\n                                    />\n                                )}\n                                onChange={(event: any, value: VendorType | null) => {\n                                    value && setVendor(value);\n                                }}\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <Autocomplete\n                                id=\"account-search\"\n                                options={props.accounts}\n                                getOptionLabel={(option) => {\n                                    return option.name || 'Dummy Account';\n                                }}\n                                renderInput={(params) => (\n                                    <TextField\n                                        {...params}\n                                        label=\"Search Account\"\n                                        variant=\"outlined\"\n                                    />\n                                )}\n                                onChange={(event: any, value: AccountType | null) => {\n                                    value && setAccount(value);\n                                }}\n                            />\n                        </Grid>\n\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                label=\"Amount\"\n                                type=\"number\"\n                                onChange={(event) => {\n                                    onAmountChange(parseInt(event.target.value));\n                                }}\n                            />\n                        </Grid>\n\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                label=\"Details\"\n                                multiline\n                                rows={3}\n                                onChange={(event) => {\n                                    onDetailsChange(event.target.value);\n                                }}\n                            />\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid item xs={12}>\n                    <Grid container spacing={2} justify={'flex-end'}>\n                        <Grid item>\n                            <Button\n                                variant=\"text\"\n                                onClick={() => {\n                                    close(false);\n                                }}\n                            >\n                                Cancel\n                            </Button>\n                        </Grid>\n                        <Grid item>\n                            <Button onClick={handleClick} loading={loading}>\n                                Add VendorPayment\n                            </Button>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </Dialog>\n    );\n};\n\nexport default VendorPaymentModal;\n","import React, {useState, useEffect} from 'react';\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\nimport EditIcon from '@material-ui/icons/Edit';\nimport {\n    Paper,\n    TableContainer,\n    Table,\n    TableHead,\n    TableRow,\n    TableCell,\n    TableSortLabel,\n    TableBody,\n    TablePagination,\n    makeStyles,\n    IconButton,\n    Card,\n    Typography,\n    Grid,\n} from '@material-ui/core';\nimport {firestore} from 'firebase';\nimport api from '../../api';\nimport VendorPaymentType from '../../model/vendorPayment';\nimport Button from '../../components/Button/Button';\nimport {H3, Body, SH2, SH3, Caption} from '../../components/Typography/Typography';\nimport {colorPalette} from '../../theme';\nimport InboxIcon from '@material-ui/icons/Inbox';\nimport CallRoundedIcon from '@material-ui/icons/CallRounded';\nimport PinDropRoundedIcon from '@material-ui/icons/PinDropRounded';\nimport Chip from '@material-ui/core/Chip';\nimport AccountBalanceRoundedIcon from '@material-ui/icons/AccountBalanceRounded';\n\nconst columns: string[] = ['Name', 'Average Rate', 'Quantity', 'Total', 'Details', 'Actions'];\n\ninterface VendorPaymentsListType {\n    rows: VendorPaymentType[];\n    onRowDelete: Function;\n    deleting: boolean;\n    loading?: boolean;\n    allLoaded: boolean;\n    onLoadMore: () => void;\n}\n\nconst VendorPaymentsList = (props: VendorPaymentsListType) => {\n    return (\n        <div>\n            {props.rows.map((item: VendorPaymentType, index) => (\n                <div\n                    style={{\n                        padding: 8,\n                        borderBottom: `1px solid ${colorPalette.grayscale[4]}`,\n                    }}\n                    key={index}\n                >\n                    <Grid container>\n                        <Grid item xs={10} style={{paddingTop: 8, paddingBottom: 8}}>\n                            <H3>{item.vendor.name}</H3>\n                            <Body>{item.details}</Body>\n                            <SH2 color={colorPalette.primary[0].interaction}>{item.amount}</SH2>\n                            <Grid container spacing={1} style={{paddingTop: 8}}>\n                                <Grid item>\n                                    <AccountBalanceRoundedIcon\n                                        fontSize=\"small\"\n                                        style={{color: colorPalette.grayscale[6]}}\n                                    />\n                                </Grid>\n                                <Grid item>\n                                    <Caption color={colorPalette.grayscale[7]}>\n                                        {item.account.name}\n                                    </Caption>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n\n                        <Grid item xs={1}>\n                            <IconButton aria-label=\"edit\">\n                                <EditIcon fontSize=\"small\" />\n                            </IconButton>\n                            <IconButton\n                                aria-label=\"delete\"\n                                onClick={() => {\n                                    props.onRowDelete(index);\n                                }}\n                                disabled={props.deleting}\n                            >\n                                <DeleteOutlineIcon fontSize=\"small\" />\n                            </IconButton>\n                        </Grid>\n                    </Grid>\n                </div>\n            ))}\n            <Button\n                onClick={props.onLoadMore}\n                disabled={props.allLoaded}\n                loading={props.loading}\n                fullWidth\n                variant=\"text\"\n            >\n                Load More\n            </Button>\n        </div>\n    );\n};\n\nexport default VendorPaymentsList;\n","import React from 'react';\nimport VendorPaymentsTable from '../../layouts/VendorPaymentsTable/VendorPaymentsTable';\nimport {Typography, Grid, TextField, FormControl, Button} from '@material-ui/core';\nimport useVendorPaymentsPage from './useVendorPaymentsPage';\nimport VendorPaymentModal from '../../layouts/VendorPaymentModal/VendorPaymentModal';\nimport FloatingAlert from '../../components/FloatingAlert/FloatingAlert';\nimport VendorPaymentType from '../../model/vendorPayment';\nimport {PageWrapper, PageHeader, PageContent} from '../../components/PageContainer/PageContainer';\nimport VendorPaymentsList from '../../layouts/VendorPaymentsList/VendorPaymentsList';\n\ninterface VendorPaymentsPageType {\n    numberOfVendorPayments: number;\n}\nconst VendorPaymentsPage = (props: VendorPaymentsPageType) => {\n    const {\n        openVendorPaymentModal,\n        closeVendorPaymentModal,\n        modalOpen,\n        showSuccessMessage,\n        hideSuccessMessage,\n        deleteVendorPayment,\n        loadMoreVendorPayments,\n        addVendorPayment,\n        deleting,\n        loading,\n        rows,\n        vendors,\n        accounts,\n        loadingVendors,\n        loadingAccounts,\n    } = useVendorPaymentsPage();\n    return (\n        <>\n            <PageWrapper>\n                <PageHeader\n                    placeholder=\"Search Vendor Payments\"\n                    loadedRows={rows.length}\n                    totalRows={props.numberOfVendorPayments}\n                    openModal={openVendorPaymentModal}\n                    label=\"vendor payments\"\n                />\n                <PageContent>\n                    <VendorPaymentsList\n                        rows={rows}\n                        onRowDelete={deleteVendorPayment}\n                        deleting={deleting}\n                        onLoadMore={loadMoreVendorPayments}\n                        allLoaded={rows.length === props.numberOfVendorPayments}\n                        loading={loading}\n                    />\n                </PageContent>\n            </PageWrapper>\n            <FloatingAlert\n                severity=\"success\"\n                open={showSuccessMessage}\n                onClose={hideSuccessMessage}\n                message=\"VendorPayment added successfully\"\n            />\n            <VendorPaymentModal\n                open={modalOpen}\n                close={closeVendorPaymentModal}\n                aria-labelledby=\"vendorPayment_modal\"\n                onAdd={addVendorPayment}\n                vendors={vendors}\n                accounts={accounts}\n            />\n        </>\n    );\n};\n\nexport default VendorPaymentsPage;\n","import {useState, useEffect} from 'react';\nimport api from '../../api';\nimport CustomerPaymentType from '../../model/customerPayment';\nimport CityType from '../../model/city';\nimport ProductType from '../../model/product';\nimport CustomerType from '../../model/customer';\nimport AccountType from '../../model/account';\nlet customerPaymentDocs: any[] = [];\nconst useCustomerPaymentsPage = () => {\n    const [modalOpen, setModalOpen] = useState(false);\n    const [showSuccessMessage, setShowSuccessMessage] = useState(false);\n\n    const [rows, setRows] = useState<CustomerPaymentType[]>([]);\n    const [customers, setCustomers] = useState<CustomerType[]>([]);\n    const [accounts, setAccounts] = useState<AccountType[]>([]);\n    const [deleting, setDeleting] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [loadingCustomers, setLoadingCustomers] = useState(false);\n    const [loadingAccounts, setLoadingAccounts] = useState(false);\n\n    const openCustomerPaymentModal = () => {\n        setModalOpen(true);\n    };\n\n    const closeCustomerPaymentModal = (created: boolean) => {\n        setModalOpen(false);\n        if (created) setShowSuccessMessage(true);\n    };\n\n    const hideSuccessMessage = () => {\n        setShowSuccessMessage(false);\n    };\n\n    const loadCustomerPayments = () => {\n        setLoading(true);\n        api.customerPayment.get(\n            (result: any) => {\n                customerPaymentDocs = [];\n                const items: any[] = [];\n                result.docs.forEach((doc: any) => {\n                    customerPaymentDocs.push(doc);\n                    const item: any = doc.data();\n                    item.id = doc.id;\n                    items.push(item);\n                });\n                setRows(items);\n                setLoading(false);\n            },\n            () => {\n                setLoading(false);\n            }\n        );\n    };\n\n    const loadCustomers = () => {\n        setLoadingCustomers(true);\n        api.customer.get(\n            (result: any) => {\n                const items: any[] = [];\n                result.docs.forEach((doc: any) => {\n                    const item: any = doc.data();\n                    item.id = doc.id;\n                    items.push(item);\n                });\n                setCustomers(items);\n                setLoadingCustomers(false);\n            },\n            () => {\n                setLoadingCustomers(false);\n            }\n        );\n    };\n\n    const loadAccounts = () => {\n        setLoadingAccounts(true);\n        api.account.get(\n            (result: any) => {\n                const items: any[] = [];\n                result.docs.forEach((doc: any) => {\n                    const item: any = doc.data();\n                    item.id = doc.id;\n                    items.push(item);\n                });\n                setAccounts(items);\n                setLoadingAccounts(false);\n            },\n            () => {\n                setLoadingAccounts(false);\n            }\n        );\n    };\n\n    const loadMoreCustomerPayments = () => {\n        setLoading(true);\n        api.customerPayment.get(\n            (result: any) => {\n                const items: any[] = [];\n                result.docs.forEach((doc: any) => {\n                    customerPaymentDocs.push(doc);\n                    const item: any = doc.data();\n                    item.id = doc.id;\n                    items.push(item);\n                });\n                setRows((prev) => prev.concat(items));\n                setLoading(false);\n            },\n            () => {\n                setLoading(false);\n            },\n            customerPaymentDocs[customerPaymentDocs.length - 1]\n        );\n    };\n\n    const addCustomerPayment = (newCustomerPayment: CustomerPaymentType) => {\n        rows.push(newCustomerPayment);\n        rows.sort((a: CustomerPaymentType, b: CustomerPaymentType) => b.createdAt - a.createdAt);\n        setRows(rows);\n    };\n\n    const deleteCustomerPayment = (index: number) => {\n        setDeleting(true);\n        api.customerPayment.delete(\n            rows[index].id,\n            () => {\n                customerPaymentDocs.splice(index, 1);\n                const remaining = rows.filter((row, i) => i !== index);\n                setRows(remaining);\n                setDeleting(false);\n            },\n            () => {\n                setDeleting(false);\n            }\n        );\n    };\n\n    const editCustomerPayment = () => {};\n\n    useEffect(() => {\n        loadCustomerPayments();\n        loadCustomers();\n        loadAccounts();\n    }, []);\n\n    return {\n        openCustomerPaymentModal,\n        closeCustomerPaymentModal,\n        modalOpen,\n        showSuccessMessage,\n        hideSuccessMessage,\n        deleteCustomerPayment,\n        addCustomerPayment,\n        loadMoreCustomerPayments,\n        deleting,\n        loading,\n        rows,\n        customers,\n        accounts,\n        loadingCustomers,\n        loadingAccounts,\n    };\n};\nexport default useCustomerPaymentsPage;\n","import CustomerPaymentType from '../../model/customerPayment';\nimport {useState} from 'react';\nimport api from '../../api';\nimport CityType from '../../model/city';\nimport ProductType from '../../model/product';\nimport CustomerType from '../../model/customer';\nimport AccountType from '../../model/account';\n\nconst useCustomerPaymentModal = (\n    onAdd: (customerPayment: CustomerPaymentType) => void,\n    close: (created: boolean) => void\n) => {\n    const [customer, setCustomer] = useState<CustomerType>();\n    const [account, setAccount] = useState<AccountType>();\n    const [amount, setAmount] = useState(0);\n    const [details, setDetails] = useState('');\n\n    const [loading, setLoading] = useState(false);\n\n    const onAmountChange = (value: number) => {\n        setAmount(value);\n    };\n\n    const onDetailsChange = (value: string) => {\n        setDetails(value);\n    };\n\n    const handleClick = () => {\n        if (!loading) {\n            setLoading(true);\n            const now = Date.now();\n            const newCustomerPayment: CustomerPaymentType = {\n                customer: {id: customer?.id, name: customer?.name},\n                amount: amount,\n                account: {id: account?.id, name: account?.name},\n                details: details,\n                createdAt: now,\n                updatedAt: now,\n            };\n            api.customerPayment.add(\n                newCustomerPayment,\n                (id: string) => {\n                    setLoading(false);\n                    newCustomerPayment.id = id;\n                    onAdd(newCustomerPayment);\n                    close(true);\n                },\n                () => {\n                    setLoading(false);\n                    //ToDo failed to add data\n                }\n            );\n        }\n    };\n    return {\n        handleClick,\n        onAmountChange,\n        onDetailsChange,\n        setCustomer,\n        setAccount,\n        loading,\n    };\n};\n\nexport default useCustomerPaymentModal;\n","import React from 'react';\nimport {Dialog, DialogTitle, FormControl, TextField, Grid} from '@material-ui/core';\nimport Button from '../../components/Button/Button';\nimport useCustomerPaymentModal from './useCustomerPaymentModal';\nimport CustomerPaymentType from '../../model/customerPayment';\nimport CityType from '../../model/city';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport CustomerType from '../../model/customer';\nimport ProductType from '../../model/product';\nimport AccountType from '../../model/account';\n\nexport interface CustomerPaymentModalType {\n    open: boolean;\n    close: (created: boolean) => void;\n    onAdd: (product: CustomerPaymentType) => void;\n    customers: CustomerType[];\n    accounts: AccountType[];\n}\nconst CustomerPaymentModal = (props: CustomerPaymentModalType) => {\n    const {open, close, onAdd} = props;\n    const {\n        handleClick,\n        loading,\n        onAmountChange,\n        onDetailsChange,\n        setCustomer,\n        setAccount,\n    } = useCustomerPaymentModal(onAdd, close);\n    return (\n        <Dialog open={open}>\n            <DialogTitle>Add New CustomerPayment</DialogTitle>\n            <Grid container spacing={2} style={{padding: 24}}>\n                <Grid item xs={12}>\n                    <Grid container spacing={2}>\n                        <Grid item xs={12}>\n                            <Autocomplete\n                                id=\"customer-search\"\n                                options={props.customers}\n                                getOptionLabel={(option) => {\n                                    return option.name || 'Dummy Customer';\n                                }}\n                                renderInput={(params) => (\n                                    <TextField\n                                        {...params}\n                                        label=\"Search Customer\"\n                                        variant=\"outlined\"\n                                    />\n                                )}\n                                onChange={(event: any, value: CustomerType | null) => {\n                                    value && setCustomer(value);\n                                }}\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <Autocomplete\n                                id=\"account-search\"\n                                options={props.accounts}\n                                getOptionLabel={(option) => {\n                                    return option.name || 'Dummy Account';\n                                }}\n                                renderInput={(params) => (\n                                    <TextField\n                                        {...params}\n                                        label=\"Search Account\"\n                                        variant=\"outlined\"\n                                    />\n                                )}\n                                onChange={(event: any, value: AccountType | null) => {\n                                    value && setAccount(value);\n                                }}\n                            />\n                        </Grid>\n\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                label=\"Amount\"\n                                type=\"number\"\n                                onChange={(event) => {\n                                    onAmountChange(parseInt(event.target.value));\n                                }}\n                            />\n                        </Grid>\n\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                label=\"Details\"\n                                multiline\n                                rows={3}\n                                onChange={(event) => {\n                                    onDetailsChange(event.target.value);\n                                }}\n                            />\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid item xs={12}>\n                    <Grid container spacing={2} justify={'flex-end'}>\n                        <Grid item>\n                            <Button\n                                variant=\"text\"\n                                onClick={() => {\n                                    close(false);\n                                }}\n                            >\n                                Cancel\n                            </Button>\n                        </Grid>\n                        <Grid item>\n                            <Button onClick={handleClick} loading={loading}>\n                                Add CustomerPayment\n                            </Button>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </Dialog>\n    );\n};\n\nexport default CustomerPaymentModal;\n","import React, {useState, useEffect} from 'react';\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\nimport EditIcon from '@material-ui/icons/Edit';\nimport {\n    Paper,\n    TableContainer,\n    Table,\n    TableHead,\n    TableRow,\n    TableCell,\n    TableSortLabel,\n    TableBody,\n    TablePagination,\n    makeStyles,\n    IconButton,\n    Card,\n    Typography,\n    Grid,\n} from '@material-ui/core';\nimport {firestore} from 'firebase';\nimport api from '../../api';\nimport CustomerPaymentType from '../../model/customerPayment';\nimport Button from '../../components/Button/Button';\nimport {H3, Body, SH2, SH3, Caption} from '../../components/Typography/Typography';\nimport {colorPalette} from '../../theme';\nimport InboxIcon from '@material-ui/icons/Inbox';\nimport CallRoundedIcon from '@material-ui/icons/CallRounded';\nimport PinDropRoundedIcon from '@material-ui/icons/PinDropRounded';\nimport Chip from '@material-ui/core/Chip';\nimport AccountBalanceRoundedIcon from '@material-ui/icons/AccountBalanceRounded';\n\nconst columns: string[] = ['Name', 'Average Rate', 'Quantity', 'Total', 'Details', 'Actions'];\n\ninterface CustomerPaymentsListType {\n    rows: CustomerPaymentType[];\n    onRowDelete: Function;\n    deleting: boolean;\n    loading?: boolean;\n    allLoaded: boolean;\n    onLoadMore: () => void;\n}\n\nconst CustomerPaymentsList = (props: CustomerPaymentsListType) => {\n    return (\n        <div>\n            {props.rows.map((item: CustomerPaymentType, index) => (\n                <div\n                    style={{\n                        padding: 8,\n                        borderBottom: `1px solid ${colorPalette.grayscale[4]}`,\n                    }}\n                    key={index}\n                >\n                    <Grid container>\n                        <Grid item xs={10} style={{paddingTop: 8, paddingBottom: 8}}>\n                            <H3>{item.customer.name}</H3>\n                            <Body>{item.details}</Body>\n                            <SH2 color={colorPalette.primary[0].interaction}>{item.amount}</SH2>\n                            <Grid container spacing={1} style={{paddingTop: 8}}>\n                                <Grid item>\n                                    <AccountBalanceRoundedIcon\n                                        fontSize=\"small\"\n                                        style={{color: colorPalette.grayscale[6]}}\n                                    />\n                                </Grid>\n                                <Grid item>\n                                    <Caption color={colorPalette.grayscale[7]}>\n                                        {item.account.name}\n                                    </Caption>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n\n                        <Grid item xs={1}>\n                            <IconButton aria-label=\"edit\">\n                                <EditIcon fontSize=\"small\" />\n                            </IconButton>\n                            <IconButton\n                                aria-label=\"delete\"\n                                onClick={() => {\n                                    props.onRowDelete(index);\n                                }}\n                                disabled={props.deleting}\n                            >\n                                <DeleteOutlineIcon fontSize=\"small\" />\n                            </IconButton>\n                        </Grid>\n                    </Grid>\n                </div>\n            ))}\n            <Button\n                onClick={props.onLoadMore}\n                disabled={props.allLoaded}\n                loading={props.loading}\n                fullWidth\n                variant=\"text\"\n            >\n                Load More\n            </Button>\n        </div>\n    );\n};\n\nexport default CustomerPaymentsList;\n","import React from 'react';\nimport CustomerPaymentsTable from '../../layouts/CustomerPaymentsTable/CustomerPaymentsTable';\nimport {Typography, Grid, TextField, FormControl, Button} from '@material-ui/core';\nimport useCustomerPaymentsPage from './useCustomerPaymentsPage';\nimport CustomerPaymentModal from '../../layouts/CustomerPaymentModal/CustomerPaymentModal';\nimport FloatingAlert from '../../components/FloatingAlert/FloatingAlert';\nimport CustomerPaymentType from '../../model/customerPayment';\nimport {PageWrapper, PageHeader, PageContent} from '../../components/PageContainer/PageContainer';\nimport CustomerPaymentsList from '../../layouts/CustomerPaymentsList/CustomerPaymentsList';\n\ninterface CustomerPaymentsPageType {\n    numberOfCustomerPayments: number;\n}\nconst CustomerPaymentsPage = (props: CustomerPaymentsPageType) => {\n    const {\n        openCustomerPaymentModal,\n        closeCustomerPaymentModal,\n        modalOpen,\n        showSuccessMessage,\n        hideSuccessMessage,\n        deleteCustomerPayment,\n        loadMoreCustomerPayments,\n        addCustomerPayment,\n        deleting,\n        loading,\n        rows,\n        customers,\n        accounts,\n        loadingCustomers,\n        loadingAccounts,\n    } = useCustomerPaymentsPage();\n    return (\n        <>\n            <PageWrapper>\n                <PageHeader\n                    placeholder=\"Search Customer Payments\"\n                    loadedRows={rows.length}\n                    totalRows={props.numberOfCustomerPayments}\n                    openModal={openCustomerPaymentModal}\n                    label=\"customer payments\"\n                />\n                <PageContent>\n                    <CustomerPaymentsList\n                        rows={rows}\n                        onRowDelete={deleteCustomerPayment}\n                        deleting={deleting}\n                        onLoadMore={loadMoreCustomerPayments}\n                        allLoaded={rows.length === props.numberOfCustomerPayments}\n                        loading={loading}\n                    />\n                </PageContent>\n            </PageWrapper>\n            <FloatingAlert\n                severity=\"success\"\n                open={showSuccessMessage}\n                onClose={hideSuccessMessage}\n                message=\"CustomerPayment added successfully\"\n            />\n            <CustomerPaymentModal\n                open={modalOpen}\n                close={closeCustomerPaymentModal}\n                aria-labelledby=\"customerPayment_modal\"\n                onAdd={addCustomerPayment}\n                customers={customers}\n                accounts={accounts}\n            />\n        </>\n    );\n};\n\nexport default CustomerPaymentsPage;\n","import {useState, useEffect} from 'react';\nimport api from '../../api';\nimport EmployeeType from '../../model/employee';\nlet employeeDocs: any[] = [];\nconst useEmployeesPage = () => {\n    const [modalOpen, setModalOpen] = useState(false);\n    const [showSuccessMessage, setShowSuccessMessage] = useState(false);\n\n    const [rows, setRows] = useState<EmployeeType[]>([]);\n    const [deleting, setDeleting] = useState(false);\n    const [loading, setLoading] = useState(false);\n\n    const openEmployeeModal = () => {\n        setModalOpen(true);\n    };\n\n    const closeEmployeeModal = (created: boolean) => {\n        setModalOpen(false);\n        if (created) setShowSuccessMessage(true);\n    };\n\n    const hideSuccessMessage = () => {\n        setShowSuccessMessage(false);\n    };\n\n    const loadEmployees = () => {\n        setLoading(true);\n        api.employee.get(\n            (result: any) => {\n                employeeDocs = [];\n                const items: any[] = [];\n                result.docs.forEach((doc: any) => {\n                    employeeDocs.push(doc);\n                    const item: any = doc.data();\n                    item.id = doc.id;\n                    items.push(item);\n                });\n                setRows(items);\n                setLoading(false);\n            },\n            () => {\n                setLoading(false);\n            }\n        );\n    };\n\n    const loadMoreEmployees = () => {\n        setLoading(true);\n        api.employee.get(\n            (result: any) => {\n                const items: any[] = [];\n                result.docs.forEach((doc: any) => {\n                    employeeDocs.push(doc);\n                    const item: any = doc.data();\n                    item.id = doc.id;\n                    items.push(item);\n                });\n                setRows((prev) => prev.concat(items));\n                setLoading(false);\n            },\n            () => {\n                setLoading(false);\n            },\n            employeeDocs[employeeDocs.length - 1]\n        );\n    };\n\n    const addEmployee = (newEmployee: EmployeeType) => {\n        rows.push(newEmployee);\n        rows.sort(\n            (a: EmployeeType, b: EmployeeType) =>\n                (b.createdAt ? b.createdAt : 0) - (a.createdAt ? a.createdAt : 0)\n        );\n        setRows(rows);\n    };\n\n    const deleteEmployee = (index: number) => {\n        setDeleting(true);\n        api.employee.delete(\n            rows[index].id,\n            () => {\n                employeeDocs.splice(index, 1);\n                const remaining = rows.filter((row, i) => i !== index);\n                setRows(remaining);\n                setDeleting(false);\n            },\n            () => {\n                setDeleting(false);\n            }\n        );\n    };\n\n    const editEmployee = () => {};\n\n    useEffect(() => {\n        loadEmployees();\n    }, []);\n\n    return {\n        openEmployeeModal,\n        closeEmployeeModal,\n        modalOpen,\n        showSuccessMessage,\n        hideSuccessMessage,\n        deleteEmployee,\n        addEmployee,\n        loadMoreEmployees,\n        deleting,\n        loading,\n        rows,\n    };\n};\nexport default useEmployeesPage;\n","import firebase from 'firebase';\nimport EmployeeType from '../../model/employee';\nimport {useState} from 'react';\nimport api from '../../api';\n\nconst useEmployeeModal = (\n    onAdd: (employee: EmployeeType) => void,\n    close: (created: boolean) => void\n) => {\n    const [name, setName] = useState('');\n    const [salary, setSalary] = useState(0);\n    const [designation, setDesignation] = useState('');\n    const [cnic, setCnic] = useState('');\n    const [mobile, setMobile] = useState('');\n    const [loading, setLoading] = useState(false);\n\n    const onNameChange = (value: string) => {\n        setName(value);\n    };\n\n    const onSalaryChange = (value: string) => {\n        setSalary(parseInt(value));\n    };\n\n    const onDesignationChange = (value: string) => {\n        setDesignation(value);\n    };\n\n    const onCnicChange = (value: string) => {\n        setCnic(value);\n    };\n\n    const onMobileChange = (value: string) => {\n        setMobile(value);\n    };\n\n    const handleClick = () => {\n        if (!loading) {\n            setLoading(true);\n            const now = Date.now();\n            const newEmployee: EmployeeType = {\n                name,\n                salary,\n                designation,\n                cnic,\n                mobile,\n                createdAt: now,\n                updatedAt: now,\n            };\n            api.employee.add(\n                newEmployee,\n                (id: string) => {\n                    setLoading(false);\n                    newEmployee.id = id;\n                    onAdd(newEmployee);\n                    close(true);\n                },\n                () => {\n                    setLoading(false);\n                    //ToDo failed to add data\n                }\n            );\n        }\n    };\n    return {\n        handleClick,\n        onNameChange,\n        onSalaryChange,\n        onDesignationChange,\n        onCnicChange,\n        onMobileChange,\n        loading,\n    };\n};\n\nexport default useEmployeeModal;\n","import React from 'react';\nimport {Dialog, DialogTitle, FormControl, TextField, Grid} from '@material-ui/core';\nimport Button from '../../components/Button/Button';\nimport useEmployeeModal from './useEmployeeModal';\nimport EmployeeType from '../../model/employee';\n\nexport interface EmployeeModalType {\n    open: boolean;\n    close: (created: boolean) => void;\n    onAdd: (employee: EmployeeType) => void;\n}\nconst EmployeeModal = (props: EmployeeModalType) => {\n    const {open, close, onAdd} = props;\n    const {\n        handleClick,\n        onNameChange,\n        onCnicChange,\n        onDesignationChange,\n        onMobileChange,\n        onSalaryChange,\n        loading,\n    } = useEmployeeModal(onAdd, close);\n    return (\n        <Dialog open={open}>\n            <DialogTitle>Add New Employee</DialogTitle>\n            <Grid container spacing={2} style={{padding: 24}}>\n                <Grid item xs={12}>\n                    <Grid container spacing={2}>\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                label=\"Employee Name\"\n                                onChange={(event) => {\n                                    onNameChange(event.target.value);\n                                }}\n                            />\n                        </Grid>\n\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                label=\"Salary\"\n                                onChange={(event) => {\n                                    onSalaryChange(event.target.value);\n                                }}\n                            />\n                        </Grid>\n\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                label=\"Designation\"\n                                onChange={(event) => {\n                                    onDesignationChange(event.target.value);\n                                }}\n                            />\n                        </Grid>\n\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                label=\"CNIC\"\n                                onChange={(event) => {\n                                    onCnicChange(event.target.value);\n                                }}\n                            />\n                        </Grid>\n\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                label=\"Mobile\"\n                                onChange={(event) => {\n                                    onMobileChange(event.target.value);\n                                }}\n                            />\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid item xs={12}>\n                    <Grid container spacing={2} justify={'flex-end'}>\n                        <Grid item>\n                            <Button\n                                variant=\"text\"\n                                onClick={() => {\n                                    close(false);\n                                }}\n                            >\n                                Cancel\n                            </Button>\n                        </Grid>\n                        <Grid item>\n                            <Button onClick={handleClick} loading={loading}>\n                                Add Employee\n                            </Button>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </Dialog>\n    );\n};\n\nexport default EmployeeModal;\n","import React, {useState, useEffect} from 'react';\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\nimport EditIcon from '@material-ui/icons/Edit';\nimport {\n    Paper,\n    TableContainer,\n    Table,\n    TableHead,\n    TableRow,\n    TableCell,\n    TableSortLabel,\n    TableBody,\n    TablePagination,\n    makeStyles,\n    IconButton,\n    Card,\n    Typography,\n    Grid,\n} from '@material-ui/core';\nimport {firestore} from 'firebase';\nimport api from '../../api';\nimport EmployeeType from '../../model/employee';\nimport Button from '../../components/Button/Button';\nimport {H3, Body, SH2, SH3, Caption} from '../../components/Typography/Typography';\nimport {colorPalette} from '../../theme';\nimport InboxIcon from '@material-ui/icons/Inbox';\nimport CallRoundedIcon from '@material-ui/icons/CallRounded';\nimport EuroRoundedIcon from '@material-ui/icons/EuroRounded';\nimport CreditCardRoundedIcon from '@material-ui/icons/CreditCardRounded';\nimport AssignmentIndRoundedIcon from '@material-ui/icons/AssignmentIndRounded';\n\nconst columns: string[] = ['Name', 'Average Rate', 'Quantity', 'Total', 'Details', 'Actions'];\n\ninterface EmployeesListType {\n    rows: EmployeeType[];\n    onRowDelete: Function;\n    deleting: boolean;\n    loading?: boolean;\n    allLoaded: boolean;\n    onLoadMore: () => void;\n}\n\nconst EmployeesList = (props: EmployeesListType) => {\n    return (\n        <div>\n            {props.rows.map((item: EmployeeType, index) => (\n                <div\n                    style={{\n                        padding: 8,\n                        borderBottom: `1px solid ${colorPalette.grayscale[4]}`,\n                    }}\n                    key={index}\n                >\n                    <Grid container>\n                        <Grid item xs={11}>\n                            <Grid item container>\n                                <Grid item xs={12}>\n                                    <SH2 color={colorPalette.primary[0].interaction}>\n                                        {item.name}\n                                    </SH2>\n                                </Grid>\n                                <Grid item xs={1}>\n                                    <CallRoundedIcon fontSize=\"small\" />\n                                </Grid>\n                                <Grid item xs={11}>\n                                    {item.mobile}\n                                </Grid>\n                                <Grid item xs={1}>\n                                    <EuroRoundedIcon fontSize=\"small\" />\n                                </Grid>\n                                <Grid item xs={11}>\n                                    {item.salary}\n                                </Grid>\n                                <Grid item xs={1}>\n                                    <CreditCardRoundedIcon fontSize=\"small\" />\n                                </Grid>\n                                <Grid item xs={11}>\n                                    {item.cnic}\n                                </Grid>\n                                <Grid item xs={1}>\n                                    <AssignmentIndRoundedIcon fontSize=\"small\" />\n                                </Grid>\n                                <Grid item xs={11}>\n                                    {item.designation}\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                        <Grid item xs={1}>\n                            <IconButton aria-label=\"edit\">\n                                <EditIcon fontSize=\"small\" />\n                            </IconButton>\n                            <IconButton\n                                aria-label=\"delete\"\n                                onClick={() => {\n                                    props.onRowDelete(index);\n                                }}\n                                disabled={props.deleting}\n                            >\n                                <DeleteOutlineIcon fontSize=\"small\" />\n                            </IconButton>\n                        </Grid>\n                    </Grid>\n                </div>\n            ))}\n            <Button\n                onClick={props.onLoadMore}\n                disabled={props.allLoaded}\n                loading={props.loading}\n                fullWidth\n                variant=\"text\"\n            >\n                Load More\n            </Button>\n        </div>\n    );\n};\n\nexport default EmployeesList;\n","import React from 'react';\nimport EmployeesTable from '../../layouts/EmployeesTable/EmployeesTable';\nimport {Typography, Grid, TextField, FormControl, Button} from '@material-ui/core';\nimport useEmployeesPage from './useEmployeesPage';\nimport EmployeeModal from '../../layouts/EmployeeModal/EmployeeModal';\nimport FloatingAlert from '../../components/FloatingAlert/FloatingAlert';\nimport EmployeeType from '../../model/employee';\nimport {PageWrapper, PageHeader, PageContent} from '../../components/PageContainer/PageContainer';\nimport EmployeesList from '../../layouts/EmployeesList/EmployeesList';\n\ninterface EmployeesPageType {\n    numberOfEmployees: number;\n}\nconst EmployeesPage = (props: EmployeesPageType) => {\n    const {\n        openEmployeeModal,\n        closeEmployeeModal,\n        modalOpen,\n        showSuccessMessage,\n        hideSuccessMessage,\n        deleteEmployee,\n        loadMoreEmployees,\n        addEmployee,\n        deleting,\n        loading,\n        rows,\n    } = useEmployeesPage();\n    return (\n        <>\n            <PageWrapper>\n                <PageHeader\n                    placeholder=\"Search Employees\"\n                    loadedRows={rows.length}\n                    totalRows={props.numberOfEmployees}\n                    openModal={openEmployeeModal}\n                    label=\"employees\"\n                />\n                <PageContent>\n                    <EmployeesList\n                        rows={rows}\n                        onRowDelete={deleteEmployee}\n                        deleting={deleting}\n                        onLoadMore={loadMoreEmployees}\n                        allLoaded={rows.length === props.numberOfEmployees}\n                        loading={loading}\n                    />\n                </PageContent>\n            </PageWrapper>\n            <FloatingAlert\n                severity=\"success\"\n                open={showSuccessMessage}\n                onClose={hideSuccessMessage}\n                message=\"Employee added successfully\"\n            />\n            <EmployeeModal\n                open={modalOpen}\n                close={closeEmployeeModal}\n                aria-labelledby=\"employee_modal\"\n                onAdd={addEmployee}\n            />\n        </>\n    );\n};\n\nexport default EmployeesPage;\n","import React from 'react';\nimport {Route, Switch} from 'react-router-dom';\nimport {Typography} from '@material-ui/core';\nimport ProductsPage from '../views/Products/ProductsPage';\nimport CustomersPage from '../views/Customers/CustomersPage';\nimport CitiesPage from '../views/Cities/CitiesPage';\nimport VendorsPage from '../views/Vendors/VendorsPage';\nimport AccountsPage from '../views/Accounts/AccountsPage';\nimport PurchasesPage from '../views/Purchases/PurchasesPage';\nimport InvoicesPage from '../views/Invoices/InvoicesPage';\nimport VendorPaymentsPage from '../views/VendorPayments/VendorPaymentsPage';\nimport CustomerPaymentsPage from '../views/CustomerPaymentsPage/CustomerPaymentsPage';\nimport EmployeesPage from '../views/Employees/EmployeesPage';\n\ninterface RoutesType {\n    products: number;\n    purchases: number;\n    cities: number;\n    customers: number;\n    vendors: number;\n    accounts: number;\n    invoices: number;\n    vendorPayments: number;\n    customerPayments: number;\n    employees: number;\n}\nconst Routes = (props: RoutesType) => {\n    const routes = [\n        {\n            path: '/',\n            component: <ProductsPage numberOfProducts={props.products} />,\n        },\n        {\n            path: '/products',\n            component: <ProductsPage numberOfProducts={props.products} />,\n        },\n        {\n            path: '/purchases',\n            component: <PurchasesPage numberOfPurchases={props.purchases} />,\n        },\n        {\n            path: '/payments/vendors',\n            component: <VendorPaymentsPage numberOfVendorPayments={props.vendorPayments} />,\n        },\n        {\n            path: '/payments/customers',\n            component: <CustomerPaymentsPage numberOfCustomerPayments={props.customerPayments} />,\n        },\n        {\n            path: '/invoices',\n            component: <InvoicesPage numberOfInvoices={props.invoices} />,\n        },\n        {\n            path: '/customers',\n            component: <CustomersPage numberOfCustomers={props.customers} />,\n        },\n        {\n            path: '/vendors',\n            component: <VendorsPage numberOfVendors={props.vendors} />,\n        },\n        {\n            path: '/accounts',\n            component: <AccountsPage numberOfAccounts={props.accounts} />,\n        },\n        {\n            path: '/cities',\n            component: <CitiesPage numberOfCities={props.cities} />,\n        },\n        {\n            path: '/employees',\n            component: <EmployeesPage numberOfEmployees={props.employees} />,\n        },\n        {\n            path: '*',\n            component: <Typography variant=\"h3\">Some Page</Typography>,\n        },\n    ];\n\n    return (\n        <Switch>\n            {routes.map((route, index) => (\n                <Route exact path={route.path} key={index}>\n                    {route.component}\n                </Route>\n            ))}\n        </Switch>\n    );\n};\n\nexport default Routes;\n","import {useEffect, useState} from 'react';\nimport api from '../../api';\n\nconst useWelcome = () => {\n    const [numberOfProducts, setNumberOfProducts] = useState(0);\n    const [numberOfCities, setNumberOfCities] = useState(0);\n    const [numberOfCustomers, setNumberOfCustomers] = useState(0);\n    const [numberOfVendors, setNumberOfVendors] = useState(0);\n    const [numberOfAccounts, setNumberOfAccounts] = useState(0);\n    const [numberOfPurchases, setNumberOfPurchases] = useState(0);\n    const [numberOfInvoices, setNumberOfInvoices] = useState(0);\n    const [numberOfVendorPayments, setNumberOfVendorPayments] = useState(0);\n    const [numberOfCustomerPayments, setNumberOfCustomerPayments] = useState(0);\n    const [numberOfEmployees, setNumberOfEmployees] = useState(0);\n\n    const [showNav, setShowNav] = useState(false);\n\n    useEffect(() => {\n        api.counts.get((snapshot) => {\n            setNumberOfProducts(\n                snapshot.docs[0].data().products ? snapshot.docs[0].data().products : 0\n            );\n            setNumberOfCities(snapshot.docs[0].data().cities ? snapshot.docs[0].data().cities : 0);\n            setNumberOfCustomers(\n                snapshot.docs[0].data().customers ? snapshot.docs[0].data().customers : 0\n            );\n            setNumberOfVendors(\n                snapshot.docs[0].data().vendors ? snapshot.docs[0].data().vendors : 0\n            );\n            setNumberOfAccounts(\n                snapshot.docs[0].data().accounts ? snapshot.docs[0].data().accounts : 0\n            );\n            setNumberOfPurchases(\n                snapshot.docs[0].data().purchases ? snapshot.docs[0].data().purchases : 0\n            );\n            setNumberOfVendorPayments(\n                snapshot.docs[0].data().vendorPayments ? snapshot.docs[0].data().vendorPayments : 0\n            );\n            setNumberOfCustomerPayments(\n                snapshot.docs[0].data().customerPayments\n                    ? snapshot.docs[0].data().customerPayments\n                    : 0\n            );\n            setNumberOfInvoices(\n                snapshot.docs[0].data().invoices ? snapshot.docs[0].data().invoices : 0\n            );\n            setNumberOfEmployees(\n                snapshot.docs[0].data().employees ? snapshot.docs[0].data().employees : 0\n            );\n        });\n    }, []);\n\n    const toggleDrawer = () => {\n        console.log('hello world');\n\n        setShowNav((showNav) => !showNav);\n    };\n\n    return {\n        numberOfProducts,\n        numberOfCities,\n        numberOfCustomers,\n        numberOfVendors,\n        numberOfAccounts,\n        numberOfPurchases,\n        numberOfInvoices,\n        numberOfVendorPayments,\n        numberOfCustomerPayments,\n        numberOfEmployees,\n        toggleDrawer,\n        showNav,\n    };\n};\n\nexport default useWelcome;\n","import React from 'react';\nimport {Button} from '@material-ui/core';\nimport firebase from 'firebase';\n\nconst LogoutButton = () => {\n    const logout = () => {\n        firebase\n            .auth()\n            .signOut()\n            .then(() => {\n                console.log('succesfully signed out');\n            })\n            .catch((error) => {\n                console.log('error', error);\n            });\n    };\n    return (\n        <Button variant=\"outlined\" color=\"inherit\" onClick={logout}>\n            Logout\n        </Button>\n    );\n};\n\nexport default LogoutButton;\n","import React from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport LogoutButton from '../LogoutButton/LogoutButton';\nimport {withRouter, RouteComponentProps} from 'react-router-dom';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n    title: {\n        flexGrow: 1,\n    },\n}));\n\ninterface TopAppBarProps extends RouteComponentProps {\n    toggleNavigation: () => void;\n}\n\nconst TopAppBar = withRouter(({history, ...props}: TopAppBarProps) => {\n    const classes = useStyles();\n    const getTitle = () => {\n        let title = history.location.pathname.substring(1);\n        title = title.toUpperCase().replace('/', ' ');\n        return title.length > 0 ? title : 'PRODUCTS';\n    };\n\n    return (\n        <div className={classes.root}>\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <IconButton\n                        edge=\"start\"\n                        className={classes.menuButton}\n                        color=\"inherit\"\n                        aria-label=\"menu\"\n                        onClick={() => {\n                            console.log('clicking');\n                            props.toggleNavigation();\n                        }}\n                    >\n                        <MenuIcon />\n                    </IconButton>\n                    <Typography variant=\"body1\" className={classes.title}>\n                        {getTitle()}\n                    </Typography>\n                    <LogoutButton />\n                </Toolbar>\n            </AppBar>\n        </div>\n    );\n});\n\nexport default TopAppBar;\n","import React from 'react';\nimport {Grid, Typography, makeStyles} from '@material-ui/core';\nimport NavigationBarLayout from '../NavigationBarLayout/NavigationBarLayout';\nimport {BrowserRouter} from 'react-router-dom';\nimport Routes from '../../Routes/Routes';\nimport LogoutButton from '../../components/LogoutButton/LogoutButton';\nimport useWelcome from './useWelcome';\nimport TopAppBar from '../../components/AppBar/AppBar';\nimport {colorPalette} from '../../theme';\nconst useStyles = makeStyles({\n    welcome: {\n        backgroundColor: colorPalette.grayscale[0],\n    },\n});\n\nconst Welcome = () => {\n    const classes = useStyles();\n    const {\n        numberOfProducts,\n        numberOfCities,\n        numberOfCustomers,\n        numberOfVendors,\n        numberOfAccounts,\n        numberOfPurchases,\n        numberOfInvoices,\n        numberOfVendorPayments,\n        numberOfCustomerPayments,\n        numberOfEmployees,\n        toggleDrawer,\n        showNav,\n    } = useWelcome();\n\n    return (\n        <>\n            <BrowserRouter basename=\"/bilalshop\">\n                <TopAppBar toggleNavigation={toggleDrawer} />\n                <Grid container className={classes.welcome}>\n                    <Grid item lg={2} md={3}>\n                        <NavigationBarLayout\n                            products={numberOfProducts}\n                            cities={numberOfCities}\n                            customers={numberOfCustomers}\n                            vendors={numberOfVendors}\n                            accounts={numberOfAccounts}\n                            purchases={numberOfPurchases}\n                            invoices={numberOfInvoices}\n                            vendorPayments={numberOfVendorPayments}\n                            customerPayments={numberOfCustomerPayments}\n                            employees={numberOfEmployees}\n                            showNav={showNav}\n                            toggleNavigation={toggleDrawer}\n                        />\n                    </Grid>\n                    <Grid item lg={10} md={9} sm={12} xs={12}>\n                        <Routes\n                            products={numberOfProducts}\n                            cities={numberOfCities}\n                            customers={numberOfCustomers}\n                            vendors={numberOfVendors}\n                            accounts={numberOfAccounts}\n                            purchases={numberOfPurchases}\n                            invoices={numberOfInvoices}\n                            vendorPayments={numberOfVendorPayments}\n                            customerPayments={numberOfCustomerPayments}\n                            employees={numberOfEmployees}\n                        />\n                    </Grid>\n                </Grid>\n            </BrowserRouter>\n        </>\n    );\n};\n\nexport default Welcome;\n","import React, {useState, useEffect} from 'react';\nimport LoginComponent from './components/LoginComponent/LoginComponent';\nimport {CircularProgress} from '@material-ui/core';\nimport firebase from 'firebase';\nimport Welcome from './layouts/Welcome/Welcome';\n\nconst App = () => {\n    const [loading, setloading] = useState(true);\n    const [signedIn, setSignedIn] = useState(false);\n\n    useEffect(() => {\n        firebase.auth().onAuthStateChanged((user: any) => {\n            if (user) {\n                setSignedIn(true);\n            } else {\n                setSignedIn(false);\n            }\n            setloading(false);\n        });\n    }, []);\n\n    return loading ? <CircularProgress /> : signedIn ? <Welcome /> : <LoginComponent />;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport firebase from 'firebase';\nimport {ThemeProvider} from '@material-ui/core';\nimport primary from './theme';\n\nconst config = {\n    apiKey: 'AIzaSyAN6y59cHMfZiXomgcBbIVh5p1m0yLQshI',\n    // authDomain: 'bilalshop-b7685.firebaseapp.com',\n    projectId: 'bilalshop-b7685',\n    // ...\n};\nfirebase.initializeApp(config);\n\nReactDOM.render(\n    <React.StrictMode>\n        <ThemeProvider theme={primary}>\n            <App />\n        </ThemeProvider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}